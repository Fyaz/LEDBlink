


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Faiyaz Mostofa & Zaine
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/28/2018
    5 00000000         ; Brief description of the program:
    6 00000000         ;   A collection of operations are done in this program 
                       (at once):
    7 00000000         ; - An internal Blue LED blinks repeatedly indicating th
                       at the program is running
    8 00000000         ; - A Red LED blinks on and off based on different patte
                       rns which can be changed by a switch (8Hz).
    9 00000000         ;   The LED will cycle through different patterns as spe
                       cified below:
   10 00000000         ;     :on for (1/40s) -> on for (1/20s) -> on for (3/40s
                       ) -> on for (1/10s) -> always on -> always off -> loop:
   11 00000000         ;   The delays for the blinking is handled by SysTick.s
   12 00000000         ; - The Red LED also has a breathing function can be act
                       ivated by holding the internal button @ PF4 on the micro
                       -controller.
   13 00000000         ;   The delays for the breathing is handled by the delay
                        function @ the end of this file.
   14 00000000         ;   - A debugging capture tool that runs 3rd time the lo
                       op finishes.
   15 00000000         ; Hardware connections (External: One button and one LED
                       )
   16 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
   17 00000000         ;  PE0 is a Red LED output (1 activates external LED on 
                       protoboard)
   18 00000000         ;  PF2 is a Green LED output (1 activates external LED o
                       n protoboard)
   19 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal)
   20 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   21 00000000         
   22 00000000         ; PortE device registers
   23 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   24 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   25 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   26 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   27 00000000         ; PortF device registers
   28 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   29 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   30 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   31 00000000 40025510 



ARM Macro Assembler    Page 2 


                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   32 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   33 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   34 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   35 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   36 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   37 00000000         ; System Clock reigsters
   38 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   39 00000000         
   40 00000000         ;Variables that hold the maximum values
   41 00000000 001864A8 
                       MAX_DELAY
                               EQU              0x1864A8    ; The interval size
                                                             of the delays (in 
                                                            cycles)
   42 00000000         ; 0x0c (in 10ms)
   43 00000000 00005E00 
                       BREATHE_DELAY_MAX
                               EQU              0x5E00      ; The delay require
                                                            d
   44 00000000         
   45 00000000                 IMPORT           TExaS_Init
   46 00000000                 IMPORT           SysTick_Init
   47 00000000         
   48 00000000                 THUMB
   49 00000000         ;------------Global Variables---------------------------
                       ----------------------------------------
   50 00000000                 AREA             DATA, ALIGN=2
   51 00000000         
   52 00000000         ;Blinking variables
   53 00000000 00 00 00 
              00       delay_inc
                               SPACE            4           ; how to increment 
                                                            the delays when we 
                                                            need to change them
                                                             (1/5 of MAX_DELAY)
                                                            
   54 00000004 00 00 00 
              00       delay_off
                               SPACE            4           ; how long the LED 
                                                            will stay off (in c
                                                            ycles)
   55 00000008 00 00 00 
              00       delay_on
                               SPACE            4           ; how long the LED 



ARM Macro Assembler    Page 3 


                                                            will stay on (in cy
                                                            cles)
   56 0000000C 00      prev_button_state
                               SPACE            1           ; captures whether 
                                                            a button has been r
                                                            eleased or pushed
   57 0000000D 00      green_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and toggles th
                                                            e blue LED after a 
                                                            certain time is met
                                                            .
   58 0000000E         
   59 0000000E         ;Debuggin variables
   60 0000000E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    data_capture
                               SPACE            50          ; Array of 50 8-byt
                                                            e numbers
   61 00000040 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    time_capture
                               SPACE            200         ; Array of 50 32-by
                                                            te numbers
   62 00000108 00      debug_capture_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and captures d
                                                            ebugging data after
                                                             a certain amount o
                                                            f loops
   63 00000109         
   64 00000109 00      NEntries
                               SPACE            1           ; Number of entries
                                                             in either array 
   65 0000010A         
   66 0000010A                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   67 00000000                 THUMB



ARM Macro Assembler    Page 5 


   68 00000000                 EXPORT           Start
   69 00000000         
   70 00000000         ;---------Main Code-------------------------------------
                       ----------------------------------------
   71 00000000         Start
   72 00000000         ; TExaS_Init sets bus clock at 80 MHz
   73 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   74 00000004 F000 F8CD       BL               Debug_Init  ; Initializes the D
                                                            ebugging Tools
   75 00000008 F7FF FFFE       BL               SysTick_Init ; Initializes the 
                                                            SysTick (method in 
                                                            SysTick.s)
   76 0000000C F000 F91F       BL               Ports_Init  ;  Initializes Port
                                                            s E,F
   77 00000010         ; PE0 = Red LED output
   78 00000010         ; PE1 = positive logic Input (Switch)
   79 00000010         ; PF2 = Blue LED output
   80 00000010         ; PF4 = Hold switch for breathing functionality
   81 00000010         
   82 00000010         ; Setting up variables
   83 00000010         Configure
   84 00000010 49A9            LDR              R1, =MAX_DELAY ;  
   85 00000012 F04F 0205       MOV              R2, #5      ;     
   86 00000016 FBB1 F2F2       UDIV             R2, R1, R2  ;  split the max de
                                                            lay into 5 equal se
                                                            ctions
   87 0000001A 49A8            LDR              R1, =delay_inc ;
   88 0000001C 600A            STR              R2, [R1]    ;   delay_inc = (MA
                                                            X_DELAY / 5)
   89 0000001E         
   90 0000001E 49A7            LDR              R1, =delay_inc ;
   91 00000020 680A            LDR              R2, [R1]    ;
   92 00000022 F04F 0304       MOV              R3, #4      ;
   93 00000026 FB02 F203       MUL              R2, R2, R3  ; 
   94 0000002A 49A5            LDR              R1, =delay_off ; 
   95 0000002C 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_off starts @ 4/
                                                            5 of the MAX_DELAY
   96 0000002E         
   97 0000002E 49A3            LDR              R1, =delay_inc ;
   98 00000030 680A            LDR              R2, [R1]    ;
   99 00000032 49A4            LDR              R1, =delay_on ;
  100 00000034 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_on on starts @ 
                                                            1/5 of the MAX_DELA
                                                            Y
  101 00000036         
  102 00000036 49A4            LDR              R1, =green_counter ;
  103 00000038 F04F 0200       MOV              R2, #0      ;
  104 0000003C 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he green_counter to
                                                             0
  105 0000003E 49A3            LDR              R1, =debug_capture_counter ;
  106 00000040 F04F 0200       MOV              R2, #0      ;
  107 00000044 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he debug_counter to
                                                             0
  108 00000046         



ARM Macro Assembler    Page 6 


  109 00000046 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  110 00000048         
  111 00000048         ; The main loop engine
  112 00000048         main_loop
  113 00000048         
  114 00000048 F000 F879       BL               Check_Debug ; ; Check if we nee
                                                            d to record debuggi
                                                            ng statistics
  115 0000004C F000 F889       BL               Check_Green ; Check whether to 
                                                            toggle the green LE
                                                            D on or not
  116 00000050 F000 F899       BL               Check_Breathe ; Check if whethe
                                                            r we need to make t
                                                            he LED Breathe
  117 00000054         
  118 00000054         ;If a button @ PE1 is pushed, increment the blinking pat
                       tern
  119 00000054         Blink_ifPushed
  120 00000054 499E            LDR              R1, =GPIO_PORTE_DATA_R ;
  121 00000056 4A9F            LDR              R2, =prev_button_state ;
  122 00000058 7812            LDRB             R2, [R2]    ;
  123 0000005A 680B            LDR              R3, [R1]    ;    <- R3 holds th
                                                            e data from the Por
                                                            tE data register
  124 0000005C F003 0302       AND              R3, R3, #0x02 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  125 00000060 4293            CMP              R3, R2      ;     <- Check if t
                                                            he button is in the
                                                             same state as befo
                                                            re 
  126 00000062 D01A            BEQ              Blink       ;
  127 00000064 4A9B            LDR              R2, =prev_button_state ;
  128 00000066 7013            STRB             R3, [R2]    ;
  129 00000068         ;BL Debug_Capture;
  130 00000068         ; If the button is pushed, set PE4 to 1
  131 00000068 2B00            CMP              R3, #0x00   ;   If the button i
                                                            s pushed
  132 0000006A D100            BNE              Blink_incrementDuty ;
  133 0000006C E015            B                Blink       ;
  134 0000006E         Blink_incrementDuty
  135 0000006E         ; Incrementing the duty time
  136 0000006E 4A93            LDR              R2, =delay_inc ;
  137 00000070 6812            LDR              R2, [R2]    ;    
  138 00000072 4993            LDR              R1, =delay_off ;   
  139 00000074 680B            LDR              R3, [R1]    ;    
  140 00000076 EBA3 0302       SUB              R3, R3, R2  ;    Decrement the 
                                                            off time
  141 0000007A 600B            STR              R3, [R1]    ;
  142 0000007C 4991            LDR              R1, =delay_on ;
  143 0000007E 680B            LDR              R3, [R1]    ;
  144 00000080 4413            ADD              R3, R3, R2  ;    Increment the 
                                                            on time
  145 00000082 600B            STR              R3, [R1]    ;
  146 00000084         ;Check if the duty time needs to be reset (always on -> 
                       always off)
  147 00000084 498E            LDR              R1, =delay_off ;



ARM Macro Assembler    Page 7 


  148 00000086 680A            LDR              R2, [R1]    ;
  149 00000088 2A00            CMP              R2, #0      ;
  150 0000008A D506            BPL              Blink       ;    If the the off
                                                             time is < 0 (off <
                                                             0%, on > 100%), re
                                                            set the values to o
                                                            ff = 100%, on = 0%
  151 0000008C 4A8A            LDR              R2, =MAX_DELAY ;
  152 0000008E 498C            LDR              R1, =delay_off ;
  153 00000090 600A            STR              R2, [R1]    ;
  154 00000092 498C            LDR              R1, =delay_on ;
  155 00000094 F04F 0200       MOV              R2, #0      ;     Reset the on 
                                                            time to 0 (light is
                                                             always off)
  156 00000098 600A            STR              R2, [R1]    ;
  157 0000009A         Blink
  158 0000009A         ; Turn off the light and wait
  159 0000009A 498D            LDR              R1, =GPIO_PORTE_DATA_R ;
  160 0000009C 680A            LDR              R2, [R1]    ;
  161 0000009E F022 0201       BIC              R2, #0x01   ;
  162 000000A2 600A            STR              R2, [R1]    ;
  163 000000A4 4A86            LDR              R2, =delay_off ;
  164 000000A6 6810            LDR              R0, [R2]    ;
  165 000000A8 F000 F8C7       BL               delay       ; ;BL delay; Delay 
                                                            the program for a a
                                                            mount of time speci
                                                            fied in R0
  166 000000AC         ; Turn on the light and wait
  167 000000AC 4988            LDR              R1, =GPIO_PORTE_DATA_R ;
  168 000000AE 680A            LDR              R2, [R1]    ;
  169 000000B0 F042 0201       ORR              R2, #0x01   ;  
  170 000000B4 600A            STR              R2, [R1]    ;
  171 000000B6 4A83            LDR              R2, =delay_on ;
  172 000000B8 6810            LDR              R0, [R2]    ;
  173 000000BA F000 F8BE       BL               delay       ;BL delay
  174 000000BE         
  175 000000BE E7C3            B                main_loop
  176 000000C0         ;-------------------------------------------------------
                       ----------------------------------------
  177 000000C0         Breathe_Start
  178 000000C0         ; a subroutine that handles all the breathing functional
                       ity by completly reworking everything
  179 000000C0 B4FF            PUSH             {R0-R7}     ;
  180 000000C2 E92D 4100       PUSH             {R8, LR}    ;
  181 000000C6         
  182 000000C6         ; Setting up variables
  183 000000C6 4882            LDR              R0, =GPIO_PORTE_DATA_R ;
  184 000000C8 F8DF 920C       LDR              R9, =GPIO_PORTF_DATA_R ;
  185 000000CC F44F 42BC       LDR              R2, =BREATHE_DELAY_MAX ;
  186 000000D0 F44F 73FA       MOV              R3, #500    ;
  187 000000D4 FBB2 F4F3       UDIV             R4, R2, R3  ;   The increments 
                                                            of the delay
  188 000000D8 F102 0500       ADD              R5, R2, #0  ;    Default: off f
                                                            or 4/5 of 80Hz
  189 000000DC F04F 0600       MOV              R6, #0      ;     Default: on f
                                                            or 1/5 of 80Hz
  190 000000E0 F102 0700       ADD              R7, R2, #0  ;
  191 000000E4         
  192 000000E4         Breathe_loop



ARM Macro Assembler    Page 8 


  193 000000E4 F8D9 1000       LDR              R1, [R9]    ;    <- R1 holds th
                                                            e data from the dat
                                                            a register
  194 000000E8         Breathe_ifPushed
  195 000000E8 F001 0310       AND              R3, R1, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  196 000000EC 2B10            CMP              R3, #0x10   ;    Keep Breathing
                                                             until the button i
                                                            s released.
  197 000000EE D100            BNE              Breathe_incrementDuty ;
  198 000000F0 E021            B                Breathe_Stop ;
  199 000000F2         
  200 000000F2         Breathe_incrementDuty
  201 000000F2         ; Incrementing the duty time
  202 000000F2 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  203 000000F6 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  204 000000F8 2D00            CMP              R5, #0      ;
  205 000000FA D402            BMI              Breathe_Verse ;
  206 000000FC D001            BEQ              Breathe_Verse ;   Check if we'v
                                                            e stopped or froze 
                                                            the delay of the li
                                                            ght (either R5 or R
                                                            6 reach zero)
  207 000000FE 2E00            CMP              R6, #0      ;
  208 00000100 D506            BPL              Breathe     ;
  209 00000102         Breathe_Verse
  210 00000102 F04F 33FF       MOV              R3, #-1     ;
  211 00000106 FB04 F403       MUL              R4, R4, R3  ;    Once we reach 
                                                            a maximum, down/up 
                                                            or up depending on 
                                                            the scenario
  212 0000010A EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  213 0000010E 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  214 00000110         Breathe
  215 00000110         ; Turn off the light and wait
  216 00000110 F021 0101       BIC              R1, #0x01   ;  
  217 00000114 6001            STR              R1, [R0]    ;
  218 00000116 B403            PUSH             {R0, R1}    ;
  219 00000118 F105 0000       ADD              R0, R5, #0  ;
  220 0000011C F000 F88D       BL               delay       ;     Delay the pro
                                                            gram for a amount o
                                                            f time specified in
                                                             R7
  221 00000120 BC03            POP              {R0, R1}    ;
  222 00000122         ; Turn on the light and wait
  223 00000122 F041 0101       ORR              R1, #0x01   ;  
  224 00000126 6001            STR              R1, [R0]    ;
  225 00000128 B403            PUSH             {R0, R1}    ;
  226 0000012A F106 0000       ADD              R0, R6, #0  ;
  227 0000012E F000 F884       BL               delay       ;
  228 00000132 BC03            POP              {R0, R1}    ;
  229 00000134         
  230 00000134 E7D6            B                Breathe_loop
  231 00000136         



ARM Macro Assembler    Page 9 


  232 00000136         Breathe_Stop
  233 00000136 E8BD 4100       POP              {R8,LR}     ;
  234 0000013A BCFF            POP              {R0-R7}     ;
  235 0000013C         
  236 0000013C 4770            BX               LR          ;
  237 0000013E         
  238 0000013E         ;-------CHECK_debug-------------------------------------
                       ----------------------------------------
  239 0000013E         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  240 0000013E         Check_Debug
  241 0000013E B403            PUSH             {R0, R1}    ;
  242 00000140 B504            PUSH             {R2, LR}    ;
  243 00000142 4962            LDR              R1, =debug_capture_counter ;
  244 00000144 780A            LDRB             R2, [R1]    ; 
  245 00000146 F102 0201       ADD              R2, R2, #1  ;   debug_capture_c
                                                            ounter++;
  246 0000014A 700A            STRB             R2, [R1]    ;
  247 0000014C 2A06            CMP              R2, #6      ;
  248 0000014E D104            BNE              Check_Debug_Leave ;
  249 00000150 F000 F844       BL               Debug_Capture ;  if(debug_captu
                                                            re_counter == 3) ca
                                                            pture data
  250 00000154 F04F 0200       MOV              R2, #0      ;
  251 00000158 700A            STRB             R2, [R1]    ;
  252 0000015A         Check_Debug_Leave
  253 0000015A E8BD 4004       POP              {R2, LR}    ;
  254 0000015E BC03            POP              {R0, R1}    ;
  255 00000160 4770            BX               LR          ;  
  256 00000162         
  257 00000162         ;-------CHECK_Green-------------------------------------
                       ----------------------------------------
  258 00000162         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  259 00000162         Check_Green
  260 00000162 B403            PUSH             {R0, R1}    ;
  261 00000164 B504            PUSH             {R2, LR}    ;
  262 00000166 4958            LDR              R1, =green_counter ;
  263 00000168 780A            LDRB             R2, [R1]    ;
  264 0000016A F102 0201       ADD              R2, R2, #1  ;   green_counter++
                                                            
  265 0000016E 700A            STRB             R2, [R1]    ;
  266 00000170 2A03            CMP              R2, #3      ;
  267 00000172 D104            BNE              Check_Green_Leave ; 
  268 00000174 F000 F859       BL               Toggle_Green ;  if(green_counte
                                                            r == 3) toggle Gree
                                                            n LED
  269 00000178 F04F 0200       MOV              R2, #0      ;
  270 0000017C 700A            STRB             R2, [R1]    ;
  271 0000017E         Check_Green_Leave
  272 0000017E E8BD 4004       POP              {R2, LR}    ;
  273 00000182 BC03            POP              {R0, R1}    ;
  274 00000184 4770            BX               LR          ;  
  275 00000186         
  276 00000186         ;-------CHECK_Breathe-----------------------------------
                       ------------------------------------------
  277 00000186         ; If the button @ PF4 is pushed, Start breathing
  278 00000186         Check_Breathe
  279 00000186 B403            PUSH             {R0, R1}    ;



ARM Macro Assembler    Page 10 


  280 00000188 B504            PUSH             {R2, LR}    ;
  281 0000018A 4953            LDR              R1, =GPIO_PORTF_DATA_R ;
  282 0000018C 680A            LDR              R2, [R1]    ;
  283 0000018E F002 0210       AND              R2, R2, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  284 00000192 2A00            CMP              R2, #0x00   ;
  285 00000194 D101            BNE              Check_Breathe_Leave ; If SW1 is
                                                             pushed, start the 
                                                            breathing
  286 00000196 F7FF FF93       BL               Breathe_Start ;
  287 0000019A         Check_Breathe_Leave
  288 0000019A E8BD 4004       POP              {R2, LR}    ;
  289 0000019E BC03            POP              {R0, R1}    ;
  290 000001A0 4770            BX               LR          ;
  291 000001A2         
  292 000001A2         ;-------DEBUG_Init--------------------------------------
                       ----------------------------------------
  293 000001A2         ;Initiliazing Debug Dump
  294 000001A2         Debug_Init
  295 000001A2 B403            PUSH             {R0, R1}
  296 000001A4 B40C            PUSH             {R2, R3}
  297 000001A6         
  298 000001A6 4A4D            LDR              R2, =data_capture ;
  299 000001A8 4B4D            LDR              R3, =time_capture 
                                                            ;  Created pointers
                                                            
  300 000001AA         ; Fill the data array with 0xFF (signifying empty) 
  301 000001AA F04F 0032       MOV              R0, #50     ;
  302 000001AE         setting_data_capture
  303 000001AE F1A0 0001       SUB              R0,R0, #0x01
  304 000001B2 F04F 01FF       MOV              R1, #0xFF   ;  
  305 000001B6 7011            STRB             R1, [R2]
  306 000001B8 F102 0201       ADD              R2, R2, #1  ;
  307 000001BC 2800            CMP              R0, #0x0    ;
  308 000001BE D1F6            BNE              setting_data_capture
  309 000001C0         ; Fill the time array with 0xFFFFFFFF (signifying empty)
                        
  310 000001C0 F04F 0032       MOV              R0, #50     ;
  311 000001C4         setting_time_capture
  312 000001C4 F1A0 0001       SUB              R0,R0, #1   ;
  313 000001C8 F04F 31FF       MOV              R1, #0xFFFFFFFF ;
  314 000001CC 6019            STR              R1, [R3]
  315 000001CE F103 0304       ADD              R3, R3, #4  ;
  316 000001D2 2800            CMP              R0, #0x0    ;
  317 000001D4 D1F6            BNE              setting_time_capture
  318 000001D6         
  319 000001D6 BC0C            POP              {R2, R3}
  320 000001D8 BC03            POP              {R0, R1}
  321 000001DA 4770            BX               LR
  322 000001DC         
  323 000001DC         ;-------DEBUG_CAPTURE-----------------------------------
                       ----------------------------------------
  324 000001DC         ; saves one data point
  325 000001DC         Debug_Capture
  326 000001DC B403            PUSH             {R0,R1}
  327 000001DE B504            PUSH             {R2,LR}
  328 000001E0 4840            LDR              R0 , =NEntries
  329 000001E2 6801            LDR              R1, [R0]



ARM Macro Assembler    Page 11 


  330 000001E4 2932            CMP              R1 , #50
  331 000001E6 D21C            BHS              DONE_C      ;   if (the array i
                                                            s not full)
  332 000001E8 F101 0101       ADD              R1, R1, #1  ;   Add a new entry
                                                            
  333 000001EC 7001            STRB             R1, [R0]    ;   NEntries++;
  334 000001EE         ; Record the current data entries
  335 000001EE 4838            LDR              R0, =GPIO_PORTE_DATA_R ; 
  336 000001F0 6800            LDR              R0, [R0]    ;
  337 000001F2 F100 0100       ADD              R1, R0, #0  ;
  338 000001F6 F000 0001       AND              R0, R0, #0x01 ;  R0 holds the d
                                                            ata for PE0
  339 000001FA F001 0102       AND              R1, R1, #0x02 ;  R1 holds the d
                                                            ata for PE1
  340 000001FE EA4F 01C1       LSL              R1, R1, #3  ;   Move PE1 to PE4
                                                             
  341 00000202 EA41 0100       ORR              R1, R1, R0  ;   Merge the two b
                                                            its (PE0 | PE4)
  342 00000206 4835            LDR              R0, =data_capture ;
  343 00000208 4A36            LDR              R2, =NEntries ;
  344 0000020A 7812            LDRB             R2, [R2]    ;
  345 0000020C 4410            ADD              R0, R0, R2  ;
  346 0000020E 7001            STRB             R1, [R0]    ;   Store the value
                                                             in the correct spo
                                                            t on the data array
                                                            
  347 00000210         ; Record the current time
  348 00000210 F04F 0004       MOV              R0, #4      ;
  349 00000214 FB02 F200       MUL              R2, R2, R0  ;   Increment in th
                                                            e time array by 4 b
                                                            ytes
  350 00000218 4931            LDR              R1, =time_capture ;
  351 0000021A 4411            ADD              R1, R1, R2  ;
  352 0000021C 4832            LDR              R0, =NVIC_ST_CURRENT_R
  353 0000021E 6800            LDR              R0, [R0]    ;
  354 00000220 6008            STR              R0, [R1]    ;   Store the curre
                                                            nt time in the corr
                                                            ect spot on the tim
                                                            e array
  355 00000222         ; Restore the registers and leave
  356 00000222         DONE_C
  357 00000222 E8BD 4004       POP              {R2, LR}    ;   
  358 00000226 BC03            POP              {R0,R1}
  359 00000228 4770            BX               LR          ;
  360 0000022A         
  361 0000022A         ;-------Toggle Green LED (PF2)--------------------------
                       ----------------------------------------
  362 0000022A         ;Toggles the Green LED on and off (PF2)
  363 0000022A         Toggle_Green
  364 0000022A B403            PUSH             {R0, R1}    ;
  365 0000022C 482A            LDR              R0, =GPIO_PORTF_DATA_R ;
  366 0000022E 6801            LDR              R1, [R0]    ;
  367 00000230 F081 0104       EOR              R1, #0x04   ;
  368 00000234 6001            STR              R1, [R0]    ;
  369 00000236 BC03            POP              {R0, R1}    ;
  370 00000238 4770            BX               LR          ;
  371 0000023A         
  372 0000023A         ;-------------------------------------------------------
                       ----------------------------------------



ARM Macro Assembler    Page 12 


  373 0000023A         delay
  374 0000023A         ; a subroutine that loops using the value at R0
  375 0000023A B403            PUSH             {R0, R1}    ;
  376 0000023C F04F 0100       MOV              R1, #0      ;
  377 00000240         delayLoop
  378 00000240 4288            CMP              R0, R1      ;   Loop until temp
                                                            orary value, R1, re
                                                            aches R0
  379 00000242 D002            BEQ              delayDone   ;
  380 00000244 F101 0101       ADD              R1, R1, #1  ; 
  381 00000248 E7FA            B                delayLoop   ;
  382 0000024A         delayDone
  383 0000024A BC03            POP              {R0, R1}    ;
  384 0000024C 4770            BX               LR          ;
  385 0000024E         
  386 0000024E         ;-------------------------------------------------------
                       ----------------------------------------
  387 0000024E         ; Port Initialization
  388 0000024E         Ports_Init
  389 0000024E B403            PUSH             {R0, R1}    ;
  390 00000250 B504            PUSH             {R2, LR}    ;
  391 00000252 4826            LDR              R0, =SYSCTL_RCGCGPIO_R ;
  392 00000254 6801            LDR              R1, [R0]    ;
  393 00000256 F041 0130       ORR              R1, R1, #0x30 ;   Start up Port
                                                             F and Port E
  394 0000025A 6001            STR              R1, [R0]    ;
  395 0000025C BF00            NOP                          ;
  396 0000025E BF00            NOP                          ;
  397 00000260         ; Configure Port E
  398 00000260 4823            LDR              R0, =GPIO_PORTE_DIR_R ;
  399 00000262 6801            LDR              R1, [R0]    ;
  400 00000264 F041 0101       ORR              R1, R1, #0x01 ;    PE0 is set t
                                                            o output (LED)
  401 00000268 F021 0112       BIC              R1, R1, #0x12 ;    PE1,4 are se
                                                            t to input (buttons
                                                            )
  402 0000026C 6001            STR              R1, [R0]    ;
  403 0000026E 4821            LDR              R0, =GPIO_PORTE_AFSEL_R ;
  404 00000270 6801            LDR              R1, [R0]    ;
  405 00000272 F04F 0100       MOV              R1, #0      ;      Disables the
                                                             "alternate functio
                                                            ns" in the port
  406 00000276 6001            STR              R1, [R0]    ;
  407 00000278 481F            LDR              R0, =GPIO_PORTE_DEN_R ;
  408 0000027A 6801            LDR              R1, [R0]    ;
  409 0000027C F04F 01FF       MOV              R1, #0xFF   ;     1 means enabl
                                                            e digital I/O
  410 00000280 6001            STR              R1, [R0]    ;
  411 00000282         ; Configure Port F
  412 00000282 491E            LDR              R1, =GPIO_PORTF_LOCK_R ;  2) un
                                                            lock the lock regis
                                                            ter
  413 00000284 481E            LDR              R0, =GPIO_LOCK_KEY ;   unlock G
                                                            PIO Port F Commit R
                                                            egister
  414 00000286 6008            STR              R0, [R1]    ;
  415 00000288 491E            LDR              R1, =GPIO_PORTF_CR_R ;    enabl
                                                            e commit for Port F
                                                            



ARM Macro Assembler    Page 13 


  416 0000028A F04F 00FF       MOV              R0, #0xFF   ;               1 m
                                                            eans allow access
  417 0000028E 6008            STR              R0, [R1]    ;
  418 00000290 491D            LDR              R1, =GPIO_PORTF_DIR_R ;   5) se
                                                            t direction registe
                                                            r
  419 00000292 F04F 000E       MOV              R0,#0x0E    ;
  420 00000296 6008            STR              R0, [R1]    ;
  421 00000298 491C            LDR              R1, =GPIO_PORTF_AFSEL_R ; 6) re
                                                            gular port function
                                                            
  422 0000029A F04F 0000       MOV              R0, #0      ;                  
                                                              0 means disable a
                                                            lternate function
  423 0000029E 6008            STR              R0, [R1]    ;
  424 000002A0 491B            LDR              R1, =GPIO_PORTF_PUR_R ;     pul
                                                            l-up resistors for 
                                                            PF4,PF0
  425 000002A2 F04F 0011       MOV              R0, #0x11   ;                 1
                                                            )enable for negativ
                                                            e logic
  426 000002A6 6008            STR              R0, [R1]    ;
  427 000002A8 491A            LDR              R1, =GPIO_PORTF_DEN_R ;     7) 
                                                            enable Port F digit
                                                            al port
  428 000002AA F04F 00FF       MOV              R0, #0xFF   ;                 1
                                                             means enable digit
                                                            al I/O
  429 000002AE 6008            STR              R0, [R1]    ;
  430 000002B0 E8BD 4004       POP              {R2, LR}    ;
  431 000002B4 BC03            POP              {R0, R1}    ;
  432 000002B6 4770            BX               LR          ;
  433 000002B8         
  434 000002B8         ;-------------------------------------------------------
                       ----------------------------------------
  435 000002B8                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  436 000002B8                 END                          ; end of file
              001864A8 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              400243FC 
              00000000 
              400253FC 
              00000000 
              00000000 
              00000000 
              E000E018 
              400FE608 
              40024400 
              40024420 
              4002451C 
              40025520 
              4C4F434B 
              40025524 



ARM Macro Assembler    Page 14 


              40025400 
              40025420 
              40025510 
              4002551C 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 50 in file main.s
   Uses
      None
Comment: DATA unused
NEntries 00000109

Symbol: NEntries
   Definitions
      At line 64 in file main.s
   Uses
      At line 328 in file main.s
      At line 343 in file main.s

data_capture 0000000E

Symbol: data_capture
   Definitions
      At line 60 in file main.s
   Uses
      At line 298 in file main.s
      At line 342 in file main.s

debug_capture_counter 00000108

Symbol: debug_capture_counter
   Definitions
      At line 62 in file main.s
   Uses
      At line 105 in file main.s
      At line 243 in file main.s

delay_inc 00000000

Symbol: delay_inc
   Definitions
      At line 53 in file main.s
   Uses
      At line 87 in file main.s
      At line 90 in file main.s
      At line 97 in file main.s
      At line 136 in file main.s

delay_off 00000004

Symbol: delay_off
   Definitions
      At line 54 in file main.s
   Uses
      At line 94 in file main.s
      At line 138 in file main.s
      At line 147 in file main.s
      At line 152 in file main.s
      At line 163 in file main.s

delay_on 00000008



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: delay_on
   Definitions
      At line 55 in file main.s
   Uses
      At line 99 in file main.s
      At line 142 in file main.s
      At line 154 in file main.s
      At line 171 in file main.s

green_counter 0000000D

Symbol: green_counter
   Definitions
      At line 57 in file main.s
   Uses
      At line 102 in file main.s
      At line 262 in file main.s

prev_button_state 0000000C

Symbol: prev_button_state
   Definitions
      At line 56 in file main.s
   Uses
      At line 121 in file main.s
      At line 127 in file main.s

time_capture 00000040

Symbol: time_capture
   Definitions
      At line 61 in file main.s
   Uses
      At line 299 in file main.s
      At line 350 in file main.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 66 in file main.s
   Uses
      None
Comment: .text unused
Blink 0000009A

Symbol: Blink
   Definitions
      At line 157 in file main.s
   Uses
      At line 126 in file main.s
      At line 133 in file main.s
      At line 150 in file main.s

Blink_ifPushed 00000054

Symbol: Blink_ifPushed
   Definitions
      At line 119 in file main.s
   Uses
      None
Comment: Blink_ifPushed unused
Blink_incrementDuty 0000006E

Symbol: Blink_incrementDuty
   Definitions
      At line 134 in file main.s
   Uses
      At line 132 in file main.s
Comment: Blink_incrementDuty used once
Breathe 00000110

Symbol: Breathe
   Definitions
      At line 214 in file main.s
   Uses
      At line 208 in file main.s
Comment: Breathe used once
Breathe_Start 000000C0

Symbol: Breathe_Start
   Definitions
      At line 177 in file main.s
   Uses
      At line 286 in file main.s
Comment: Breathe_Start used once
Breathe_Stop 00000136

Symbol: Breathe_Stop
   Definitions
      At line 232 in file main.s
   Uses
      At line 198 in file main.s
Comment: Breathe_Stop used once
Breathe_Verse 00000102



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Breathe_Verse
   Definitions
      At line 209 in file main.s
   Uses
      At line 205 in file main.s
      At line 206 in file main.s

Breathe_ifPushed 000000E8

Symbol: Breathe_ifPushed
   Definitions
      At line 194 in file main.s
   Uses
      None
Comment: Breathe_ifPushed unused
Breathe_incrementDuty 000000F2

Symbol: Breathe_incrementDuty
   Definitions
      At line 200 in file main.s
   Uses
      At line 197 in file main.s
Comment: Breathe_incrementDuty used once
Breathe_loop 000000E4

Symbol: Breathe_loop
   Definitions
      At line 192 in file main.s
   Uses
      At line 230 in file main.s
Comment: Breathe_loop used once
Check_Breathe 00000186

Symbol: Check_Breathe
   Definitions
      At line 278 in file main.s
   Uses
      At line 116 in file main.s
Comment: Check_Breathe used once
Check_Breathe_Leave 0000019A

Symbol: Check_Breathe_Leave
   Definitions
      At line 287 in file main.s
   Uses
      At line 285 in file main.s
Comment: Check_Breathe_Leave used once
Check_Debug 0000013E

Symbol: Check_Debug
   Definitions
      At line 240 in file main.s
   Uses
      At line 114 in file main.s
Comment: Check_Debug used once
Check_Debug_Leave 0000015A

Symbol: Check_Debug_Leave



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 252 in file main.s
   Uses
      At line 248 in file main.s
Comment: Check_Debug_Leave used once
Check_Green 00000162

Symbol: Check_Green
   Definitions
      At line 259 in file main.s
   Uses
      At line 115 in file main.s
Comment: Check_Green used once
Check_Green_Leave 0000017E

Symbol: Check_Green_Leave
   Definitions
      At line 271 in file main.s
   Uses
      At line 267 in file main.s
Comment: Check_Green_Leave used once
Configure 00000010

Symbol: Configure
   Definitions
      At line 83 in file main.s
   Uses
      None
Comment: Configure unused
DONE_C 00000222

Symbol: DONE_C
   Definitions
      At line 356 in file main.s
   Uses
      At line 331 in file main.s
Comment: DONE_C used once
Debug_Capture 000001DC

Symbol: Debug_Capture
   Definitions
      At line 325 in file main.s
   Uses
      At line 249 in file main.s
Comment: Debug_Capture used once
Debug_Init 000001A2

Symbol: Debug_Init
   Definitions
      At line 294 in file main.s
   Uses
      At line 74 in file main.s
Comment: Debug_Init used once
Ports_Init 0000024E

Symbol: Ports_Init
   Definitions
      At line 388 in file main.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 76 in file main.s
Comment: Ports_Init used once
Start 00000000

Symbol: Start
   Definitions
      At line 71 in file main.s
   Uses
      At line 68 in file main.s
Comment: Start used once
Toggle_Green 0000022A

Symbol: Toggle_Green
   Definitions
      At line 363 in file main.s
   Uses
      At line 268 in file main.s
Comment: Toggle_Green used once
delay 0000023A

Symbol: delay
   Definitions
      At line 373 in file main.s
   Uses
      At line 165 in file main.s
      At line 173 in file main.s
      At line 220 in file main.s
      At line 227 in file main.s

delayDone 0000024A

Symbol: delayDone
   Definitions
      At line 382 in file main.s
   Uses
      At line 379 in file main.s
Comment: delayDone used once
delayLoop 00000240

Symbol: delayLoop
   Definitions
      At line 377 in file main.s
   Uses
      At line 381 in file main.s
Comment: delayLoop used once
main_loop 00000048

Symbol: main_loop
   Definitions
      At line 112 in file main.s
   Uses
      At line 175 in file main.s
Comment: main_loop used once
setting_data_capture 000001AE

Symbol: setting_data_capture
   Definitions
      At line 302 in file main.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 308 in file main.s
Comment: setting_data_capture used once
setting_time_capture 000001C4

Symbol: setting_time_capture
   Definitions
      At line 311 in file main.s
   Uses
      At line 317 in file main.s
Comment: setting_time_capture used once
30 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BREATHE_DELAY_MAX 00005E00

Symbol: BREATHE_DELAY_MAX
   Definitions
      At line 43 in file main.s
   Uses
      At line 185 in file main.s
Comment: BREATHE_DELAY_MAX used once
GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 35 in file main.s
   Uses
      At line 413 in file main.s
Comment: GPIO_LOCK_KEY used once
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 25 in file main.s
   Uses
      At line 403 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 23 in file main.s
   Uses
      At line 120 in file main.s
      At line 159 in file main.s
      At line 167 in file main.s
      At line 183 in file main.s
      At line 335 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 26 in file main.s
   Uses
      At line 407 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 24 in file main.s
   Uses
      At line 398 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 30 in file main.s
   Uses
      At line 421 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 415 in file main.s
Comment: GPIO_PORTF_CR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 28 in file main.s
   Uses
      At line 184 in file main.s
      At line 281 in file main.s
      At line 365 in file main.s

GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 427 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 29 in file main.s
   Uses
      At line 418 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 412 in file main.s
Comment: GPIO_PORTF_LOCK_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 424 in file main.s
Comment: GPIO_PORTF_PUR_R used once
MAX_DELAY 001864A8

Symbol: MAX_DELAY
   Definitions
      At line 41 in file main.s
   Uses
      At line 84 in file main.s
      At line 151 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 352 in file main.s
Comment: NVIC_ST_CURRENT_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 391 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 46 in file main.s
   Uses
      At line 75 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 45 in file main.s
   Uses
      At line 73 in file main.s
Comment: TExaS_Init used once
2 symbols
391 symbols in table
