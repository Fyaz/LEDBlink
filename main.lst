


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Faiyaz Mostofa & Zaine
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/14/2018
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ; Hardware connections (External: One button and one LED
                       )
    8 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
    9 00000000         ;  PE0 is LED output (1 activates external LED on protob
                       oard)
   10 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal)
   11 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   12 00000000         ; Overall functionality of this system is to operate lik
                       e this
   13 00000000         ;   1) Make PE0 an output and make PE1 and PF4 inputs.
   14 00000000         ;   2) The system starts with the the LED toggling at 8H
                       z,
   15 00000000         ;      which is 8 times per second with a duty-cycle of 
                       20%.
   16 00000000         ;      Therefore, the LED is ON for (0.2*1/8)th of a sec
                       ond
   17 00000000         ;      and OFF for (0.8*1/8)th of a second.
   18 00000000         ;   3) When the button on (PE1) is pressed-and-released 
                       increase
   19 00000000         ;      the duty cycle by 20% (modulo 100%). Therefore fo
                       r each
   20 00000000         ;      press-and-release the duty cycle changes from 20%
                        to 40% to 60%
   21 00000000         ;      to 80% to 100%(ON) to 0%(Off) to 20% to 40% so on
                       
   22 00000000         ;   4) Implement a "breathing LED" when SW1 (PF4) on the
                        Launchpad is pressed:
   23 00000000         ;      a) Be creative and play around with what "breathi
                       ng" means.
   24 00000000         ;         An example of "breathing" is most computers po
                       wer LED in sleep mode
   25 00000000         ;         (e.g., https://www.youtube.com/watch?v=ZT6siXy
                       IjvQ).
   26 00000000         ;      b) When (PF4) is released while in breathing mode
                       , resume blinking at 8Hz.
   27 00000000         ;         The duty cycle can either match the most recen
                       t duty-
   28 00000000         ;         cycle or reset to 20%.
   29 00000000         ;      TIP: debugging the breathing LED algorithm and fe
                       el on the simulator is impossible.
   30 00000000         ; PortE device registers
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 



ARM Macro Assembler    Page 2 


                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         ; PortF device registers
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   42 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   43 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   44 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   45 00000000         ; System Clock reigsters
   46 00000000 E000E010 
                       NVIC_ST_CTRL_R
                               EQU              0xE000E010
   47 00000000 E000E014 
                       NVIC_ST_RELOAD_R
                               EQU              0xE000E014
   48 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   49 00000000         
   50 00000000 00010000 
                       NVIC_ST_CTRL_COUNT
                               EQU              0x00010000  ; Count flag
   51 00000000 00000004 
                       NVIC_ST_CTRL_CLK_SRC
                               EQU              0x00000004  ; Clock Source
   52 00000000 00000002 
                       NVIC_ST_CTRL_INTEN
                               EQU              0x00000002  ; Interrupt enable
   53 00000000 00000001 
                       NVIC_ST_CTRL_ENABLE
                               EQU              0x00000001  ; Counter mode
   54 00000000 00FFFFFF 
                       NVIC_ST_RELOAD_M
                               EQU              0x00FFFFFF  ; Counter load valu
                                                            e
   55 00000000         



ARM Macro Assembler    Page 3 


   56 00000000         ;Variables that hold the maximum values 
   57 00000000 0000000C 
                       MAX_DELAY
                               EQU              0x0C        ; The interval size
                                                             of the delays (in 
                                                            10ms)
   58 00000000         ; 0x1864A8 (in cycles)
   59 00000000 00005E00 
                       BREATHE_DELAY_MAX
                               EQU              0x5E00      ; The delay require
                                                            d
   60 00000000         
   61 00000000                 IMPORT           TExaS_Init
   62 00000000                 IMPORT           SysTick_Init
   63 00000000                 IMPORT           SysTick_Wait10ms
   64 00000000         
   65 00000000                 THUMB
   66 00000000         ;------------Global Variables---------------------------
                       ----------------------------------------
   67 00000000                 AREA             DATA, ALIGN=2
   68 00000000         
   69 00000000         ;Blinking variables
   70 00000000 00 00 00 
              00       delay_inc
                               SPACE            4           ; how to increment 
                                                            the delays when we 
                                                            need to change them
                                                             (1/5 of MAX_DELAY)
                                                            
   71 00000004 00 00 00 
              00       delay_off
                               SPACE            4           ; how long the LED 
                                                            will stay off (in c
                                                            ycles)
   72 00000008 00 00 00 
              00       delay_on
                               SPACE            4           ; how long the LED 
                                                            will stay on (in cy
                                                            cles)
   73 0000000C 00      prev_button_state
                               SPACE            1           ; captures whether 
                                                            a button has been r
                                                            eleased or pushed
   74 0000000D 00      green_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and toggles th
                                                            e blue LED after a 
                                                            certain time is met
                                                            .
   75 0000000E         
   76 0000000E         ;Debuggin variables
   77 0000000E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    data_capture
                               SPACE            50          ; Array of 50 8-byt
                                                            e numbers
   78 00000040 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    time_capture
                               SPACE            200         ; Array of 50 32-by
                                                            te numbers
   79 00000108 00      debug_capture_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and captures d
                                                            ebugging data after
                                                             a certain amount o
                                                            f loops
   80 00000109         
   81 00000109 00      NEntries
                               SPACE            1           ; Number of entries
                                                             in either array 
   82 0000010A         
   83 0000010A                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   84 00000000                 THUMB
   85 00000000                 EXPORT           Start
   86 00000000         
   87 00000000         ;R10 = data_capture pointer
   88 00000000         ;R11 = time_capture pointer
   89 00000000         ;---------Main Code-------------------------------------
                       ----------------------------------------
   90 00000000         Start
   91 00000000         ; TExaS_Init sets bus clock at 80 MHz
   92 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   93 00000004 F000 F8CF       BL               Debug_Init  ; Initializes the D
                                                            ebugging Tools
   94 00000008 F7FF FFFE       BL               SysTick_Init ; Initializes the 
                                                            SysTick
   95 0000000C F000 F927       BL               Ports_Init  ;  Initializes Port
                                                            s E,F
   96 00000010         ; PE0 = Red LED output
   97 00000010         ; PE1 = positive logic Input (Switch)
   98 00000010         ; PF2 = Green LED output
   99 00000010         ; PF4 = Hold switch for breathing functionality
  100 00000010         
  101 00000010         ; Setting up variables



ARM Macro Assembler    Page 6 


  102 00000010         Configure
  103 00000010 F04F 010C       LDR              R1, =MAX_DELAY ;  
  104 00000014 F04F 0205       MOV              R2, #5      ;     
  105 00000018 FBB1 F2F2       UDIV             R2, R1, R2  ;  split the max de
                                                            lay into 5 equal se
                                                            ctions
  106 0000001C 49AA            LDR              R1, =delay_inc ;
  107 0000001E 600A            STR              R2, [R1]    ;   delay_inc = (MA
                                                            X_DELAY / 5)
  108 00000020         
  109 00000020 49A9            LDR              R1, =delay_inc ;
  110 00000022 680A            LDR              R2, [R1]    ;
  111 00000024 F04F 0304       MOV              R3, #4      ;
  112 00000028 FB02 F203       MUL              R2, R2, R3  ; 
  113 0000002C 49A7            LDR              R1, =delay_off ; 
  114 0000002E 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_off starts @ 4/
                                                            5 of the MAX_DELAY
  115 00000030         
  116 00000030 49A5            LDR              R1, =delay_inc ;
  117 00000032 680A            LDR              R2, [R1]    ;
  118 00000034 49A6            LDR              R1, =delay_on ;
  119 00000036 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_on on starts @ 
                                                            1/5 of the MAX_DELA
                                                            Y
  120 00000038         
  121 00000038 49A6            LDR              R1, =green_counter ;
  122 0000003A F04F 0200       MOV              R2, #0      ;
  123 0000003E 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he green_counter to
                                                             0
  124 00000040 49A5            LDR              R1, =debug_capture_counter ;
  125 00000042 F04F 0200       MOV              R2, #0      ;
  126 00000046 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he debug_counter to
                                                             0
  127 00000048         
  128 00000048 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  129 0000004A         
  130 0000004A         ; The main loop engine
  131 0000004A         main_loop
  132 0000004A         
  133 0000004A F000 F87A       BL               Check_Debug ; ; Check if we nee
                                                            d to record debuggi
                                                            ng statistics
  134 0000004E F000 F88A       BL               Check_Green ; Check whether to 
                                                            toggle the green LE
                                                            D on or not
  135 00000052 F000 F89A       BL               Check_Breathe ; Check if whethe
                                                            r we need to make t
                                                            he LED Breathe
  136 00000056         
  137 00000056         ;If a button @ PE1 is pushed, increment the blinking pat
                       tern
  138 00000056         Blink_ifPushed
  139 00000056 49A1            LDR              R1, =GPIO_PORTE_DATA_R ;



ARM Macro Assembler    Page 7 


  140 00000058 4AA1            LDR              R2, =prev_button_state ;
  141 0000005A 7812            LDRB             R2, [R2]    ;
  142 0000005C 680B            LDR              R3, [R1]    ;    <- R3 holds th
                                                            e data from the Por
                                                            tE data register
  143 0000005E F003 0302       AND              R3, R3, #0x02 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  144 00000062 4293            CMP              R3, R2      ;     <- Check if t
                                                            he button is in the
                                                             same state as befo
                                                            re 
  145 00000064 D01B            BEQ              Blink       ;
  146 00000066 4A9E            LDR              R2, =prev_button_state ;
  147 00000068 7013            STRB             R3, [R2]    ;
  148 0000006A         ; If the button is pushed, set PE4 to 1
  149 0000006A 2B00            CMP              R3, #0x00   ;   If the button i
                                                            s pushed
  150 0000006C D100            BNE              Blink_incrementDuty ;
  151 0000006E E016            B                Blink       ;
  152 00000070         Blink_incrementDuty
  153 00000070         ; Incrementing the duty time
  154 00000070 4A95            LDR              R2, =delay_inc ;
  155 00000072 6812            LDR              R2, [R2]    ;    
  156 00000074 4995            LDR              R1, =delay_off ;   
  157 00000076 680B            LDR              R3, [R1]    ;    
  158 00000078 EBA3 0302       SUB              R3, R3, R2  ;    Decrement the 
                                                            off time
  159 0000007C 600B            STR              R3, [R1]    ;
  160 0000007E 4994            LDR              R1, =delay_on ;
  161 00000080 680B            LDR              R3, [R1]    ;
  162 00000082 4413            ADD              R3, R3, R2  ;    Increment the 
                                                            on time
  163 00000084 600B            STR              R3, [R1]    ;
  164 00000086         ;Check if the duty time needs to be reset (always on -> 
                       always off)
  165 00000086 4991            LDR              R1, =delay_off ;
  166 00000088 680A            LDR              R2, [R1]    ;
  167 0000008A 2A00            CMP              R2, #0      ;
  168 0000008C D507            BPL              Blink       ;    If the the off
                                                             time is < 0 (off <
                                                             0%, on > 100%), re
                                                            set the values to o
                                                            ff = 100%, on = 0%
  169 0000008E F04F 020C       LDR              R2, =MAX_DELAY ;
  170 00000092 498E            LDR              R1, =delay_off ;
  171 00000094 600A            STR              R2, [R1]    ;
  172 00000096 498E            LDR              R1, =delay_on ;
  173 00000098 F04F 0200       MOV              R2, #0      ;     Reset the on 
                                                            time to 0 (light is
                                                             always off)
  174 0000009C 600A            STR              R2, [R1]    ;
  175 0000009E         Blink
  176 0000009E         ; Turn off the light and wait
  177 0000009E 498F            LDR              R1, =GPIO_PORTE_DATA_R ;
  178 000000A0 680A            LDR              R2, [R1]    ;
  179 000000A2 F022 0201       BIC              R2, #0x01   ;
  180 000000A6 600A            STR              R2, [R1]    ;
  181 000000A8 4A88            LDR              R2, =delay_off ;



ARM Macro Assembler    Page 8 


  182 000000AA 6810            LDR              R0, [R2]    ;
  183 000000AC F7FF FFFE       BL               SysTick_Wait10ms ;BL delay; Del
                                                            ay the program for 
                                                            a amount of time sp
                                                            ecified in R0
  184 000000B0         ; Turn on the light and wait
  185 000000B0 498A            LDR              R1, =GPIO_PORTE_DATA_R ;
  186 000000B2 680A            LDR              R2, [R1]    ;
  187 000000B4 F042 0201       ORR              R2, #0x01   ;  
  188 000000B8 600A            STR              R2, [R1]    ;
  189 000000BA 4A85            LDR              R2, =delay_on ;
  190 000000BC 6810            LDR              R0, [R2]    ;
  191 000000BE F7FF FFFE       BL               SysTick_Wait10ms ;BL delay
  192 000000C2         
  193 000000C2 E7C2            B                main_loop
  194 000000C4         ;-------------------------------------------------------
                       ----------------------------------------
  195 000000C4         Breathe_Start
  196 000000C4         ; a subroutine that handles all the breathing functional
                       ity by completly reworking everything
  197 000000C4 B4FF            PUSH             {R0-R7}     ;
  198 000000C6 E92D 4100       PUSH             {R8, LR}    ;
  199 000000CA         
  200 000000CA         ; Setting up variables
  201 000000CA 4884            LDR              R0, =GPIO_PORTE_DATA_R ;
  202 000000CC F8DF 9214       LDR              R9, =GPIO_PORTF_DATA_R ;
  203 000000D0 F44F 42BC       LDR              R2, =BREATHE_DELAY_MAX ;
  204 000000D4 F44F 73FA       MOV              R3, #500    ;
  205 000000D8 FBB2 F4F3       UDIV             R4, R2, R3  ;   The increments 
                                                            of the delay
  206 000000DC F102 0500       ADD              R5, R2, #0  ;    Default: off f
                                                            or 4/5 of 80Hz
  207 000000E0 F04F 0600       MOV              R6, #0      ;     Default: on f
                                                            or 1/5 of 80Hz
  208 000000E4 F102 0700       ADD              R7, R2, #0  ;
  209 000000E8         
  210 000000E8         Breathe_loop
  211 000000E8 F8D9 1000       LDR              R1, [R9]    ;    <- R1 holds th
                                                            e data from the dat
                                                            a register
  212 000000EC         Breathe_ifPushed
  213 000000EC F001 0310       AND              R3, R1, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  214 000000F0 2B10            CMP              R3, #0x10   ;    ; Keep Breathi
                                                            ng until the button
                                                             is released.
  215 000000F2 D100            BNE              Breathe_incrementDuty ;
  216 000000F4 E021            B                Breathe_Stop ;
  217 000000F6         
  218 000000F6         Breathe_incrementDuty
  219 000000F6         ; Incrementing the duty time
  220 000000F6 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  221 000000FA 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  222 000000FC 2D00            CMP              R5, #0      ;
  223 000000FE D402            BMI              Breathe_Verse ;
  224 00000100 D001            BEQ              Breathe_Verse ;   Check if we'v



ARM Macro Assembler    Page 9 


                                                            e stopped or froze 
                                                            the delay of the li
                                                            ght (either R5 or R
                                                            6 reach zero)
  225 00000102 2E00            CMP              R6, #0      ;
  226 00000104 D506            BPL              Breathe     ;
  227 00000106         Breathe_Verse
  228 00000106 F04F 33FF       MOV              R3, #-1     ;
  229 0000010A FB04 F403       MUL              R4, R4, R3  ;    Once we reach 
                                                            a maximum, down/up 
                                                            or up depending on 
                                                            the scenario
  230 0000010E EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  231 00000112 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  232 00000114         Breathe
  233 00000114         ; Turn off the light and wait
  234 00000114 F021 0101       BIC              R1, #0x01   ;  
  235 00000118 6001            STR              R1, [R0]    ;
  236 0000011A B403            PUSH             {R0, R1}    ;
  237 0000011C F105 0000       ADD              R0, R5, #0  ;
  238 00000120 F000 F893       BL               delay       ;     Delay the pro
                                                            gram for a amount o
                                                            f time specified in
                                                             R7
  239 00000124 BC03            POP              {R0, R1}    ;
  240 00000126         ; Turn on the light and wait
  241 00000126 F041 0101       ORR              R1, #0x01   ;  
  242 0000012A 6001            STR              R1, [R0]    ;
  243 0000012C B403            PUSH             {R0, R1}    ;
  244 0000012E F106 0000       ADD              R0, R6, #0  ;
  245 00000132 F000 F88A       BL               delay       ;
  246 00000136 BC03            POP              {R0, R1}    ;
  247 00000138         
  248 00000138 E7D6            B                Breathe_loop
  249 0000013A         
  250 0000013A         Breathe_Stop
  251 0000013A E8BD 4100       POP              {R8,LR}     ;
  252 0000013E BCFF            POP              {R0-R7}     ;
  253 00000140         
  254 00000140 4770            BX               LR          ;
  255 00000142         
  256 00000142         ;-------CHECK_debug-------------------------------------
                       ----------------------------------------
  257 00000142         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  258 00000142         Check_Debug
  259 00000142 B403            PUSH             {R0, R1}    ;
  260 00000144 B504            PUSH             {R2, LR}    ;
  261 00000146 4964            LDR              R1, =debug_capture_counter ;
  262 00000148 780A            LDRB             R2, [R1]    ; 
  263 0000014A F102 0201       ADD              R2, R2, #1  ;   debug_capture_c
                                                            ounter++;
  264 0000014E 700A            STRB             R2, [R1]    ;
  265 00000150 2A03            CMP              R2, #3      ;
  266 00000152 D104            BNE              Check_Debug_Leave ;
  267 00000154 F000 F852       BL               Debug_Capture ;
  268 00000158 F04F 0200       MOV              R2, #0      ;



ARM Macro Assembler    Page 10 


  269 0000015C 700A            STRB             R2, [R1]    ;
  270 0000015E         Check_Debug_Leave
  271 0000015E E8BD 4004       POP              {R2, LR}    ;
  272 00000162 BC03            POP              {R0, R1}    ;
  273 00000164 4770            BX               LR          ;     if(debug_capt
                                                            ure_counter == 3) c
                                                            apture data
  274 00000166         
  275 00000166         ;-------CHECK_Green-------------------------------------
                       ----------------------------------------
  276 00000166         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  277 00000166         Check_Green
  278 00000166 B403            PUSH             {R0, R1}    ;
  279 00000168 B504            PUSH             {R2, LR}    ;
  280 0000016A 495A            LDR              R1, =green_counter ;
  281 0000016C 780A            LDRB             R2, [R1]    ;
  282 0000016E F102 0201       ADD              R2, R2, #1  ;   green_counter++
                                                            
  283 00000172 700A            STRB             R2, [R1]    ;
  284 00000174 2A03            CMP              R2, #3      ;
  285 00000176 D104            BNE              Check_Green_Leave ; if(green_co
                                                            unter == 3) toggle 
                                                            Green LED
  286 00000178 F000 F85F       BL               Toggle_Green ;
  287 0000017C F04F 0200       MOV              R2, #0      ;
  288 00000180 700A            STRB             R2, [R1]    ;
  289 00000182         Check_Green_Leave
  290 00000182 E8BD 4004       POP              {R2, LR}    ;
  291 00000186 BC03            POP              {R0, R1}    ;
  292 00000188 4770            BX               LR          ;  
  293 0000018A         
  294 0000018A         ;-------CHECK_Breathe-----------------------------------
                       ------------------------------------------
  295 0000018A         ; If the button @ PF4 is pushed, Start breathing
  296 0000018A         Check_Breathe
  297 0000018A B403            PUSH             {R0, R1}    ;
  298 0000018C B504            PUSH             {R2, LR}    ;
  299 0000018E 4955            LDR              R1, =GPIO_PORTF_DATA_R ;
  300 00000190 680A            LDR              R2, [R1]    ;
  301 00000192 F002 0210       AND              R2, R2, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  302 00000196 2A00            CMP              R2, #0x00   ;
  303 00000198 D101            BNE              Check_Breathe_Leave ;  If SW1 i
                                                            s pushed, start the
                                                             breathing
  304 0000019A F7FF FF93       BL               Breathe_Start ;
  305 0000019E         Check_Breathe_Leave
  306 0000019E E8BD 4004       POP              {R2, LR}    ;
  307 000001A2 BC03            POP              {R0, R1}    ;
  308 000001A4 4770            BX               LR          ;
  309 000001A6         
  310 000001A6         ;-------DEBUG_Init--------------------------------------
                       ----------------------------------------
  311 000001A6         ;Initiliazing Debug Dump
  312 000001A6         Debug_Init
  313 000001A6 F8DF A140       LDR              R10, =data_capture
  314 000001AA F8DF B140       LDR              R11, =time_capture 



ARM Macro Assembler    Page 11 


                                                            ;  Created pointers
                                                            
  315 000001AE         
  316 000001AE B403            PUSH             {R0, R1}
  317 000001B0 B40C            PUSH             {R2, R3}
  318 000001B2 F04F 0008       MOV              R0, #0x08   ;  8 bits in data_c
                                                            apture
  319 000001B6 F04F 0132       MOV              R1, #50     ;
  320 000001BA         
  321 000001BA         setting_data_capture
  322 000001BA F1A1 0101       SUB              R1,R1, #0x01
  323 000001BE F04F 02FF       MOV              R2, #0xFF   ;
  324 000001C2 F88A 2000       STRB             R2, [R10]
  325 000001C6 4482            ADD              R10, R10, R0
  326 000001C8 2900            CMP              R1, #0x0    ;
  327 000001CA D1F6            BNE              setting_data_capture
  328 000001CC         
  329 000001CC F04F 0132       MOV              R1, #50     ;
  330 000001D0 F04F 0204       MOV              R2, #0x04   ;
  331 000001D4 FB00 F002       MUL              R0,R0, R2   ;
  332 000001D8         setting_time_capture
  333 000001D8 F04F 0201       MOV              R2, #0x01   ;
  334 000001DC EBA1 0102       SUB              R1,R1, R2   ;
  335 000001E0 F04F 32FF       MOV              R2, #0xFFFFFFFF ;
  336 000001E4 F8CA 2000       STR              R2, [R10]
  337 000001E8 4482            ADD              R10, R10, R0
  338 000001EA 2900            CMP              R1, #0x0    ;
  339 000001EC D1F4            BNE              setting_time_capture
  340 000001EE         
  341 000001EE F8DF A0F8       LDR              R10, =data_capture
  342 000001F2 F8DF B0F8       LDR              R11,=time_capture
  343 000001F6 BC0C            POP              {R2, R3}
  344 000001F8 BC03            POP              {R0, R1}
  345 000001FA 4770            BX               LR
  346 000001FC         
  347 000001FC         ;-------DEBUG_CAPTURE-----------------------------------
                       ----------------------------------------
  348 000001FC         ;saves one data point
  349 000001FC         Debug_Capture
  350 000001FC B403            PUSH             {R0,R1}
  351 000001FE 483C            LDR              R0 , =NEntries
  352 00000200 6800            LDR              R0, [R0]
  353 00000202 2832            CMP              R0 , #50
  354 00000204 D017            BEQ              DONE_C
  355 00000206 4835            LDR              R0, =GPIO_PORTE_DATA_R
  356 00000208 F000 0002       AND              R0, R0, #0x02 ;  Capturing Pins
                                                             E0 and E1
  357 0000020C EA4F 00D0       LSR              R0, R0, #0x03 ;
  358 00000210 4932            LDR              R1, =GPIO_PORTE_DATA_R
  359 00000212 F001 0101       AND              R1,R1,#0x01 ;
  360 00000216 EA00 0001       AND              R0,R0,R1    ;
  361 0000021A 4936            LDR              R1, =NVIC_ST_CURRENT_R 
                                                            ; Capturing Time
  362 0000021C F88A 0000       STRB             R0, [R10]   ;   Finished Storin
                                                            g Data
  363 00000220         
  364 00000220 F8CB 1000       STR              R1, [R11]
  365 00000224 F10A 0A01       ADD              R10, R10, #0x01
  366 00000228 F10B 0B04       ADD              R11, R11, #0x04



ARM Macro Assembler    Page 12 


  367 0000022C 4830            LDR              R0, =NEntries
  368 0000022E 6801            LDR              R1, [R0]
  369 00000230 F101 0101       ADD              R1,R1, #0x01
  370 00000234 6001            STR              R1, [R0]
  371 00000236         
  372 00000236 BC03    DONE_C  POP              {R0,R1}
  373 00000238 4770            BX               LR          ;
  374 0000023A         
  375 0000023A         ;-------Toggle Green LED (PF2)--------------------------
                       ----------------------------------------
  376 0000023A         ;Toggles the Green LED on and off (PF2)
  377 0000023A         Toggle_Green
  378 0000023A B403            PUSH             {R0, R1}    ;
  379 0000023C 4829            LDR              R0, =GPIO_PORTF_DATA_R ;
  380 0000023E 6801            LDR              R1, [R0]    ;
  381 00000240 F081 0104       EOR              R1, #0x04   ;
  382 00000244 6001            STR              R1, [R0]    ;
  383 00000246 BC03            POP              {R0, R1}    ;
  384 00000248 4770            BX               LR          ;
  385 0000024A         
  386 0000024A         ;-------------------------------------------------------
                       ----------------------------------------
  387 0000024A         delay
  388 0000024A         ; a subroutine that loops using the value at R0
  389 0000024A B403            PUSH             {R0, R1}    ;
  390 0000024C F04F 0100       MOV              R1, #0      ;
  391 00000250         delayLoop
  392 00000250 4288            CMP              R0, R1      ;   Loop until temp
                                                            orary value R1 reac
                                                            hes R0
  393 00000252 D002            BEQ              delayDone   ;
  394 00000254 F101 0101       ADD              R1, R1, #1  ; 
  395 00000258 E7FA            B                delayLoop   ;
  396 0000025A         delayDone
  397 0000025A BC03            POP              {R0, R1}    ;
  398 0000025C 4770            BX               LR          ;
  399 0000025E         
  400 0000025E         ;-------------------------------------------------------
                       ----------------------------------------
  401 0000025E         ; Port Initialization
  402 0000025E         Ports_Init
  403 0000025E B403            PUSH             {R0, R1}    ;
  404 00000260 B504            PUSH             {R2, LR}    ;
  405 00000262 4825            LDR              R0, =SYSCTL_RCGCGPIO_R ;
  406 00000264 6801            LDR              R1, [R0]    ;
  407 00000266 F041 0130       ORR              R1, R1, #0x30 ;   Start up Port
                                                             F and Port E
  408 0000026A 6001            STR              R1, [R0]    ;
  409 0000026C BF00            NOP                          ;
  410 0000026E BF00            NOP                          ;
  411 00000270         ; Configure Port E
  412 00000270 4822            LDR              R0, =GPIO_PORTE_DIR_R ;
  413 00000272 6801            LDR              R1, [R0]    ;
  414 00000274 F041 0101       ORR              R1, R1, #0x01 ;    PE0 is set t
                                                            o output (LED)
  415 00000278 F021 0112       BIC              R1, R1, #0x12 ;    PE1,4 are se
                                                            t to input (buttons
                                                            )
  416 0000027C 6001            STR              R1, [R0]    ;



ARM Macro Assembler    Page 13 


  417 0000027E 4820            LDR              R0, =GPIO_PORTE_AFSEL_R ;
  418 00000280 6801            LDR              R1, [R0]    ;
  419 00000282 F04F 0100       MOV              R1, #0      ;      Disables the
                                                             "alternate functio
                                                            ns" in the port
  420 00000286 6001            STR              R1, [R0]    ;
  421 00000288 481E            LDR              R0, =GPIO_PORTE_DEN_R ;
  422 0000028A 6801            LDR              R1, [R0]    ;
  423 0000028C F04F 01FF       MOV              R1, #0xFF   ;     1 means enabl
                                                            e digital I/O
  424 00000290 6001            STR              R1, [R0]    ;
  425 00000292         ; Configure Port F
  426 00000292 491D            LDR              R1, =GPIO_PORTF_LOCK_R ;  2) un
                                                            lock the lock regis
                                                            ter
  427 00000294 481D            LDR              R0, =GPIO_LOCK_KEY ;   unlock G
                                                            PIO Port F Commit R
                                                            egister
  428 00000296 6008            STR              R0, [R1]    ;
  429 00000298 491D            LDR              R1, =GPIO_PORTF_CR_R ;    enabl
                                                            e commit for Port F
                                                            
  430 0000029A F04F 00FF       MOV              R0, #0xFF   ;               1 m
                                                            eans allow access
  431 0000029E 6008            STR              R0, [R1]    ;
  432 000002A0 491C            LDR              R1, =GPIO_PORTF_DIR_R ;   5) se
                                                            t direction registe
                                                            r
  433 000002A2 F04F 000E       MOV              R0,#0x0E    ;
  434 000002A6 6008            STR              R0, [R1]    ;
  435 000002A8 491B            LDR              R1, =GPIO_PORTF_AFSEL_R ; 6) re
                                                            gular port function
                                                            
  436 000002AA F04F 0000       MOV              R0, #0      ;                  
                                                              0 means disable a
                                                            lternate function
  437 000002AE 6008            STR              R0, [R1]    ;
  438 000002B0 491A            LDR              R1, =GPIO_PORTF_PUR_R ;     pul
                                                            l-up resistors for 
                                                            PF4,PF0
  439 000002B2 F04F 0011       MOV              R0, #0x11   ;                 1
                                                            )enable for negativ
                                                            e logic
  440 000002B6 6008            STR              R0, [R1]    ;
  441 000002B8 4919            LDR              R1, =GPIO_PORTF_DEN_R ;     7) 
                                                            enable Port F digit
                                                            al port
  442 000002BA F04F 00FF       MOV              R0, #0xFF   ;                 1
                                                             means enable digit
                                                            al I/O
  443 000002BE 6008            STR              R0, [R1]    ;
  444 000002C0 E8BD 4004       POP              {R2, LR}    ;
  445 000002C4 BC03            POP              {R0, R1}    ;
  446 000002C6 4770            BX               LR          ;
  447 000002C8         ;-------------------------------------------------------
                       ----------------------------------------
  448 000002C8                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned



ARM Macro Assembler    Page 14 


  449 000002C8                 END                          ; end of file
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              400243FC 
              00000000 
              400253FC 
              00000000 
              00000000 
              00000000 
              E000E018 
              400FE608 
              40024400 
              40024420 
              4002451C 
              40025520 
              4C4F434B 
              40025524 
              40025400 
              40025420 
              40025510 
              4002551C 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 67 in file main.s
   Uses
      None
Comment: DATA unused
NEntries 00000109

Symbol: NEntries
   Definitions
      At line 81 in file main.s
   Uses
      At line 351 in file main.s
      At line 367 in file main.s

data_capture 0000000E

Symbol: data_capture
   Definitions
      At line 77 in file main.s
   Uses
      At line 313 in file main.s
      At line 341 in file main.s

debug_capture_counter 00000108

Symbol: debug_capture_counter
   Definitions
      At line 79 in file main.s
   Uses
      At line 124 in file main.s
      At line 261 in file main.s

delay_inc 00000000

Symbol: delay_inc
   Definitions
      At line 70 in file main.s
   Uses
      At line 106 in file main.s
      At line 109 in file main.s
      At line 116 in file main.s
      At line 154 in file main.s

delay_off 00000004

Symbol: delay_off
   Definitions
      At line 71 in file main.s
   Uses
      At line 113 in file main.s
      At line 156 in file main.s
      At line 165 in file main.s
      At line 170 in file main.s
      At line 181 in file main.s

delay_on 00000008



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: delay_on
   Definitions
      At line 72 in file main.s
   Uses
      At line 118 in file main.s
      At line 160 in file main.s
      At line 172 in file main.s
      At line 189 in file main.s

green_counter 0000000D

Symbol: green_counter
   Definitions
      At line 74 in file main.s
   Uses
      At line 121 in file main.s
      At line 280 in file main.s

prev_button_state 0000000C

Symbol: prev_button_state
   Definitions
      At line 73 in file main.s
   Uses
      At line 140 in file main.s
      At line 146 in file main.s

time_capture 00000040

Symbol: time_capture
   Definitions
      At line 78 in file main.s
   Uses
      At line 314 in file main.s
      At line 342 in file main.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 83 in file main.s
   Uses
      None
Comment: .text unused
Blink 0000009E

Symbol: Blink
   Definitions
      At line 175 in file main.s
   Uses
      At line 145 in file main.s
      At line 151 in file main.s
      At line 168 in file main.s

Blink_ifPushed 00000056

Symbol: Blink_ifPushed
   Definitions
      At line 138 in file main.s
   Uses
      None
Comment: Blink_ifPushed unused
Blink_incrementDuty 00000070

Symbol: Blink_incrementDuty
   Definitions
      At line 152 in file main.s
   Uses
      At line 150 in file main.s
Comment: Blink_incrementDuty used once
Breathe 00000114

Symbol: Breathe
   Definitions
      At line 232 in file main.s
   Uses
      At line 226 in file main.s
Comment: Breathe used once
Breathe_Start 000000C4

Symbol: Breathe_Start
   Definitions
      At line 195 in file main.s
   Uses
      At line 304 in file main.s
Comment: Breathe_Start used once
Breathe_Stop 0000013A

Symbol: Breathe_Stop
   Definitions
      At line 250 in file main.s
   Uses
      At line 216 in file main.s
Comment: Breathe_Stop used once
Breathe_Verse 00000106



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Breathe_Verse
   Definitions
      At line 227 in file main.s
   Uses
      At line 223 in file main.s
      At line 224 in file main.s

Breathe_ifPushed 000000EC

Symbol: Breathe_ifPushed
   Definitions
      At line 212 in file main.s
   Uses
      None
Comment: Breathe_ifPushed unused
Breathe_incrementDuty 000000F6

Symbol: Breathe_incrementDuty
   Definitions
      At line 218 in file main.s
   Uses
      At line 215 in file main.s
Comment: Breathe_incrementDuty used once
Breathe_loop 000000E8

Symbol: Breathe_loop
   Definitions
      At line 210 in file main.s
   Uses
      At line 248 in file main.s
Comment: Breathe_loop used once
Check_Breathe 0000018A

Symbol: Check_Breathe
   Definitions
      At line 296 in file main.s
   Uses
      At line 135 in file main.s
Comment: Check_Breathe used once
Check_Breathe_Leave 0000019E

Symbol: Check_Breathe_Leave
   Definitions
      At line 305 in file main.s
   Uses
      At line 303 in file main.s
Comment: Check_Breathe_Leave used once
Check_Debug 00000142

Symbol: Check_Debug
   Definitions
      At line 258 in file main.s
   Uses
      At line 133 in file main.s
Comment: Check_Debug used once
Check_Debug_Leave 0000015E

Symbol: Check_Debug_Leave



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 270 in file main.s
   Uses
      At line 266 in file main.s
Comment: Check_Debug_Leave used once
Check_Green 00000166

Symbol: Check_Green
   Definitions
      At line 277 in file main.s
   Uses
      At line 134 in file main.s
Comment: Check_Green used once
Check_Green_Leave 00000182

Symbol: Check_Green_Leave
   Definitions
      At line 289 in file main.s
   Uses
      At line 285 in file main.s
Comment: Check_Green_Leave used once
Configure 00000010

Symbol: Configure
   Definitions
      At line 102 in file main.s
   Uses
      None
Comment: Configure unused
DONE_C 00000236

Symbol: DONE_C
   Definitions
      At line 372 in file main.s
   Uses
      At line 354 in file main.s
Comment: DONE_C used once
Debug_Capture 000001FC

Symbol: Debug_Capture
   Definitions
      At line 349 in file main.s
   Uses
      At line 267 in file main.s
Comment: Debug_Capture used once
Debug_Init 000001A6

Symbol: Debug_Init
   Definitions
      At line 312 in file main.s
   Uses
      At line 93 in file main.s
Comment: Debug_Init used once
Ports_Init 0000025E

Symbol: Ports_Init
   Definitions
      At line 402 in file main.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 95 in file main.s
Comment: Ports_Init used once
Start 00000000

Symbol: Start
   Definitions
      At line 90 in file main.s
   Uses
      At line 85 in file main.s
Comment: Start used once
Toggle_Green 0000023A

Symbol: Toggle_Green
   Definitions
      At line 377 in file main.s
   Uses
      At line 286 in file main.s
Comment: Toggle_Green used once
delay 0000024A

Symbol: delay
   Definitions
      At line 387 in file main.s
   Uses
      At line 238 in file main.s
      At line 245 in file main.s

delayDone 0000025A

Symbol: delayDone
   Definitions
      At line 396 in file main.s
   Uses
      At line 393 in file main.s
Comment: delayDone used once
delayLoop 00000250

Symbol: delayLoop
   Definitions
      At line 391 in file main.s
   Uses
      At line 395 in file main.s
Comment: delayLoop used once
main_loop 0000004A

Symbol: main_loop
   Definitions
      At line 131 in file main.s
   Uses
      At line 193 in file main.s
Comment: main_loop used once
setting_data_capture 000001BA

Symbol: setting_data_capture
   Definitions
      At line 321 in file main.s
   Uses
      At line 327 in file main.s
Comment: setting_data_capture used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

setting_time_capture 000001D8

Symbol: setting_time_capture
   Definitions
      At line 332 in file main.s
   Uses
      At line 339 in file main.s
Comment: setting_time_capture used once
30 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BREATHE_DELAY_MAX 00005E00

Symbol: BREATHE_DELAY_MAX
   Definitions
      At line 59 in file main.s
   Uses
      At line 203 in file main.s
Comment: BREATHE_DELAY_MAX used once
GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 43 in file main.s
   Uses
      At line 427 in file main.s
Comment: GPIO_LOCK_KEY used once
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 417 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 139 in file main.s
      At line 177 in file main.s
      At line 185 in file main.s
      At line 201 in file main.s
      At line 355 in file main.s
      At line 358 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 421 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 412 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 435 in file main.s
Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 42 in file main.s
   Uses
      At line 429 in file main.s
Comment: GPIO_PORTF_CR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 202 in file main.s
      At line 299 in file main.s
      At line 379 in file main.s

GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 441 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 432 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 41 in file main.s
   Uses
      At line 426 in file main.s
Comment: GPIO_PORTF_LOCK_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 438 in file main.s
Comment: GPIO_PORTF_PUR_R used once
MAX_DELAY 0000000C

Symbol: MAX_DELAY
   Definitions
      At line 57 in file main.s
   Uses
      At line 103 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 169 in file main.s

NVIC_ST_CTRL_CLK_SRC 00000004

Symbol: NVIC_ST_CTRL_CLK_SRC
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_CLK_SRC unused
NVIC_ST_CTRL_COUNT 00010000

Symbol: NVIC_ST_CTRL_COUNT
   Definitions
      At line 50 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_COUNT unused
NVIC_ST_CTRL_ENABLE 00000001

Symbol: NVIC_ST_CTRL_ENABLE
   Definitions
      At line 53 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_ENABLE unused
NVIC_ST_CTRL_INTEN 00000002

Symbol: NVIC_ST_CTRL_INTEN
   Definitions
      At line 52 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_INTEN unused
NVIC_ST_CTRL_R E000E010

Symbol: NVIC_ST_CTRL_R
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_R unused
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 48 in file main.s
   Uses
      At line 361 in file main.s
Comment: NVIC_ST_CURRENT_R used once
NVIC_ST_RELOAD_M 00FFFFFF

Symbol: NVIC_ST_RELOAD_M
   Definitions
      At line 54 in file main.s
   Uses
      None
Comment: NVIC_ST_RELOAD_M unused
NVIC_ST_RELOAD_R E000E014



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols


Symbol: NVIC_ST_RELOAD_R
   Definitions
      At line 47 in file main.s
   Uses
      None
Comment: NVIC_ST_RELOAD_R unused
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 44 in file main.s
   Uses
      At line 405 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 62 in file main.s
   Uses
      At line 94 in file main.s
Comment: SysTick_Init used once
SysTick_Wait10ms 00000000

Symbol: SysTick_Wait10ms
   Definitions
      At line 63 in file main.s
   Uses
      At line 183 in file main.s
      At line 191 in file main.s

TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 61 in file main.s
   Uses
      At line 92 in file main.s
Comment: TExaS_Init used once
3 symbols
399 symbols in table
