


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Faiyaz Mostofa
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/14/2018
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ; Hardware connections (External: One button and one LED
                       )
    8 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
    9 00000000         ;  PE0 is LED output (1 activates external LED on protob
                       oard)
   10 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal)
   11 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   12 00000000         ; Overall functionality of this system is to operate lik
                       e this
   13 00000000         ;   1) Make PE0 an output and make PE1 and PF4 inputs.
   14 00000000         ;   2) The system starts with the the LED toggling at 8H
                       z,
   15 00000000         ;      which is 8 times per second with a duty-cycle of 
                       20%.
   16 00000000         ;      Therefore, the LED is ON for (0.2*1/8)th of a sec
                       ond
   17 00000000         ;      and OFF for (0.8*1/8)th of a second.
   18 00000000         ;   3) When the button on (PE1) is pressed-and-released 
                       increase
   19 00000000         ;      the duty cycle by 20% (modulo 100%). Therefore fo
                       r each
   20 00000000         ;      press-and-release the duty cycle changes from 20%
                        to 40% to 60%
   21 00000000         ;      to 80% to 100%(ON) to 0%(Off) to 20% to 40% so on
                       
   22 00000000         ;   4) Implement a "breathing LED" when SW1 (PF4) on the
                        Launchpad is pressed:
   23 00000000         ;      a) Be creative and play around with what "breathi
                       ng" means.
   24 00000000         ;         An example of "breathing" is most computers po
                       wer LED in sleep mode
   25 00000000         ;         (e.g., https://www.youtube.com/watch?v=ZT6siXy
                       IjvQ).
   26 00000000         ;      b) When (PF4) is released while in breathing mode
                       , resume blinking at 8Hz.
   27 00000000         ;         The duty cycle can either match the most recen
                       t duty-
   28 00000000         ;         cycle or reset to 20%.
   29 00000000         ;      TIP: debugging the breathing LED algorithm and fe
                       el on the simulator is impossible.
   30 00000000         ; PortE device registers
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 



ARM Macro Assembler    Page 2 


                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         ; PortF device registers
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   42 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   43 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   44 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   45 00000000         
   46 00000000         ;Variables that hold the maximum values 
   47 00000000 001864A8 
                       MAX_DELAY
                               EQU              0x1864A8    ;0x249700    ; The 
                                                            interval size of th
                                                            e delays
   48 00000000 00005E00 
                       BREATHE_DELAY_MAX
                               EQU              0x5E00      ; The delay require
                                                            d
   49 00000000         
   50 00000000                 IMPORT           TExaS_Init
   51 00000000                 IMPORT           SysTick_Init
   52 00000000                 IMPORT           SysTick_Wait
   53 00000000                 IMPORT           SysTick_Wait10ms
   54 00000000         
   55 00000000                 THUMB
   56 00000000         ;------------Global Variables---------------------------
                       ----------------------------------------
   57 00000000                 AREA             DATA, ALIGN=2
   58 00000000         
   59 00000000         ;Blinking variables
   60 00000000 00 00 00 
              00       delay_inc
                               SPACE            4           ; how to increment 
                                                            the delays when we 
                                                            need to change them



ARM Macro Assembler    Page 3 


                                                             (1/5 of MAX_DELAY)
                                                            
   61 00000004 00 00 00 
              00       delay_off
                               SPACE            4           ; how long the LED 
                                                            will stay off (in c
                                                            ycles)
   62 00000008 00 00 00 
              00       delay_on
                               SPACE            4           ; how long the LED 
                                                            will stay on (in cy
                                                            cles)
   63 0000000C 00      prev_button_state
                               SPACE            1           ; captures whether 
                                                            a button has been r
                                                            eleased or pushed
   64 0000000D         
   65 0000000D         ;Breathing variables
   66 0000000D 00 00 00 
              00       Breathe_delay_inc
                               SPACE            4           ; how much to incre
                                                            ment the delays whe
                                                            n we need to change
                                                             them (during breat
                                                            hing)
   67 00000011 00 00 00 
              00       Breathe_delay_off
                               SPACE            4           ; how long the LED 
                                                            will stay off (in c
                                                            ycles, during breat
                                                            hing)
   68 00000015 00 00 00 
              00       Breathe_delay_on
                               SPACE            4           ; how long the LED 
                                                            will stay on (in cy
                                                            cles, during breath
                                                            ing)
   69 00000019         
   70 00000019         ;Debuggin variables
   71 00000019 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    data_capture
                               SPACE            50          ; Array of 50 8-byt
                                                            e numbers
   72 0000004B 00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    time_capture
                               SPACE            200         ; Array of 50 32-by
                                                            te numbers
   73 00000113         
   74 00000113                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   75 00000000                 THUMB
   76 00000000                 EXPORT           Start
   77 00000000         
   78 00000000         ;R10 = data_capture pointer
   79 00000000         ;R11 = time_capture pointer
   80 00000000         
   81 00000000         ;---------Main Code-------------------------------------
                       ----------------------------------------
   82 00000000         Start
   83 00000000         ; SysTick_Init sets Systick for 12.5 ns
   84 00000000         ; disable SysTick during setup
   85 00000000 498A            LDR              R1, =NVIC_ST_CTRL_R
   86 00000002 F04F 0000       MOV              R0, #0      ; Clear Enable     
                                                                
   87 00000006 6008            STR              R0, [R1]
   88 00000008         ; set reload to maximum reload value
   89 00000008 4988            LDR              R1, =NVIC_ST_RELOAD_R
   90 0000000A 488A            LDR              R0, =0x00FFFFFF ;    ; Specify 
                                                            RELOAD value
   91 0000000C 6008            STR              R0, [R1]    ; reload at maximum
                                                                   
   92 0000000E         ; writing any value to CURRENT clears it
   93 0000000E 4987            LDR              R1, =NVIC_ST_CURRENT_R
   94 00000010 F04F 0000       MOV              R0, #0
   95 00000014 6008            STR              R0, [R1]    ; clear counter
   96 00000016         ; enable SysTick with core clock
   97 00000016 4985            LDR              R1, =NVIC_ST_CTRL_R
   98 00000018 F04F 0005       MOV              R0, #0x0005 ; Enable but no int
                                                            errupts (later)
   99 0000001C 6008            STR              R0, [R1]    ; ENABLE and CLK_SR
                                                            C bits set
  100 0000001E 4770            BX               LR
  101 00000020         
  102 00000020         ; TExaS_Init sets bus clock at 80 MHz
  103 00000020 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
  104 00000024         ;BL  Debug_Init ;
  105 00000024         
  106 00000024         ; Port Initialization
  107 00000024 4886            LDR              R0, =SYSCTL_RCGCGPIO_R ;
  108 00000026 6801            LDR              R1, [R0]    ;
  109 00000028 F041 0130       ORR              R1, R1, #0x30 ;   Start up Port
                                                             F and Port E
  110 0000002C 6001            STR              R1, [R0]    ;
  111 0000002E BF00            NOP                          ;
  112 00000030 BF00            NOP                          ;
  113 00000032         ; Configure Port E



ARM Macro Assembler    Page 6 


  114 00000032 4884            LDR              R0, =GPIO_PORTE_DIR_R ;
  115 00000034 6801            LDR              R1, [R0]    ;
  116 00000036 F041 0101       ORR              R1, R1, #0x01 ;    PE0 is set t
                                                            o output (LED)
  117 0000003A F021 0112       BIC              R1, R1, #0x12 ;    PE1,4 are se
                                                            t to input (buttons
                                                            )
  118 0000003E 6001            STR              R1, [R0]    ;
  119 00000040 4881            LDR              R0, =GPIO_PORTE_AFSEL_R ;
  120 00000042 6801            LDR              R1, [R0]    ;
  121 00000044 F04F 0100       MOV              R1, #0      ;      Disables the
                                                             "alternate functio
                                                            ns" in the port
  122 00000048 6001            STR              R1, [R0]    ;
  123 0000004A 4880            LDR              R0, =GPIO_PORTE_DEN_R ;
  124 0000004C 6801            LDR              R1, [R0]    ;
  125 0000004E F04F 01FF       MOV              R1, #0xFF   ;     1 means enabl
                                                            e digital I/O
  126 00000052 6001            STR              R1, [R0]    ;
  127 00000054         ; Configure Port F
  128 00000054 497E            LDR              R1, =GPIO_PORTF_LOCK_R ;  2) un
                                                            lock the lock regis
                                                            ter
  129 00000056 487F            LDR              R0, =GPIO_LOCK_KEY ;   unlock G
                                                            PIO Port F Commit R
                                                            egister
  130 00000058 6008            STR              R0, [R1]    ;
  131 0000005A 497F            LDR              R1, =GPIO_PORTF_CR_R ;    enabl
                                                            e commit for Port F
                                                            
  132 0000005C F04F 00FF       MOV              R0, #0xFF   ;               1 m
                                                            eans allow access
  133 00000060 6008            STR              R0, [R1]    ;
  134 00000062 497E            LDR              R1, =GPIO_PORTF_DIR_R ;   5) se
                                                            t direction registe
                                                            r
  135 00000064 F04F 000E       MOV              R0,#0x0E    ;
  136 00000068 6008            STR              R0, [R1]    ;
  137 0000006A 497D            LDR              R1, =GPIO_PORTF_AFSEL_R ; 6) re
                                                            gular port function
                                                            
  138 0000006C F04F 0000       MOV              R0, #0      ;                  
                                                              0 means disable a
                                                            lternate function
  139 00000070 6008            STR              R0, [R1]    ;
  140 00000072 497C            LDR              R1, =GPIO_PORTF_PUR_R ;     pul
                                                            l-up resistors for 
                                                            PF4,PF0
  141 00000074 F04F 0011       MOV              R0, #0x11   ;                 1
                                                            )enable for negativ
                                                            e logic
  142 00000078 6008            STR              R0, [R1]    ;
  143 0000007A 497B            LDR              R1, =GPIO_PORTF_DEN_R ;     7) 
                                                            enable Port F digit
                                                            al port
  144 0000007C F04F 00FF       MOV              R0, #0xFF   ;                 1
                                                             means enable digit
                                                            al I/O
  145 00000080 6008            STR              R0, [R1]    ;



ARM Macro Assembler    Page 7 


  146 00000082         ; Setting up variables
  147 00000082         Configure
  148 00000082 497A            LDR              R1, =MAX_DELAY ;  
  149 00000084 F04F 0205       MOV              R2, #5      ;     
  150 00000088 FBB1 F2F2       UDIV             R2, R1, R2  ;  split the max de
                                                            lay into 5 equal se
                                                            ctions
  151 0000008C 4978            LDR              R1, =delay_inc ;
  152 0000008E 600A            STR              R2, [R1]    ;   delay_inc = (MA
                                                            X_DELAY / 5)
  153 00000090         
  154 00000090 4977            LDR              R1, =delay_inc ;
  155 00000092 680A            LDR              R2, [R1]    ;
  156 00000094 F04F 0304       MOV              R3, #4      ;
  157 00000098 FB02 F203       MUL              R2, R2, R3  ; 
  158 0000009C 4975            LDR              R1, =delay_off ; 
  159 0000009E 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_off starts @ 4/
                                                            5 of the MAX_DELAY
  160 000000A0         
  161 000000A0 4973            LDR              R1, =delay_inc ;
  162 000000A2 680A            LDR              R2, [R1]    ;
  163 000000A4 4974            LDR              R1, =delay_on ;
  164 000000A6 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_on on starts @ 
                                                            1/5 of the MAX_DELA
                                                            Y
  165 000000A8         
  166 000000A8 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  167 000000AA         
  168 000000AA         main_loop
  169 000000AA         ; The main loop engine
  170 000000AA 4974            LDR              R1, =GPIO_PORTF_DATA_R ;
  171 000000AC 680A            LDR              R2, [R1]    ;
  172 000000AE         
  173 000000AE         ; If the button is pushed, Start breathing
  174 000000AE F002 0210       AND              R2, R2, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  175 000000B2 2A00            CMP              R2, #0x00   ;
  176 000000B4 D101            BNE              Blink_ifPushed ;  If SW1 is pus
                                                            hed, start the brea
                                                            thing
  177 000000B6 F000 F835       BL               Breathe_Start ;
  178 000000BA         
  179 000000BA         Blink_ifPushed
  180 000000BA 4971            LDR              R1, =GPIO_PORTE_DATA_R ;
  181 000000BC 4A71            LDR              R2, =prev_button_state ;
  182 000000BE 7812            LDRB             R2, [R2]    ;
  183 000000C0 680B            LDR              R3, [R1]    ;    <- R3 holds th
                                                            e data from the Por
                                                            tE data register
  184 000000C2 F003 0302       AND              R3, R3, #0x02 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  185 000000C6 4293            CMP              R3, R2      ;     <- Check if t
                                                            he button is in the



ARM Macro Assembler    Page 8 


                                                             same state as befo
                                                            re 
  186 000000C8 D01A            BEQ              Blink       ;
  187 000000CA 4A6E            LDR              R2, =prev_button_state ;
  188 000000CC 7013            STRB             R3, [R2]    ;
  189 000000CE         ; If the button is pushed, set PE4 to 1
  190 000000CE 2B00            CMP              R3, #0x00   ;   If the button i
                                                            s pushed
  191 000000D0 D100            BNE              Blink_incrementDuty ;
  192 000000D2 E015            B                Blink       ;
  193 000000D4         Blink_incrementDuty
  194 000000D4         ; Incrementing the duty time
  195 000000D4 4A66            LDR              R2, =delay_inc ;
  196 000000D6 6812            LDR              R2, [R2]    ;    
  197 000000D8 4966            LDR              R1, =delay_off ;   
  198 000000DA 680B            LDR              R3, [R1]    ;    
  199 000000DC EBA3 0302       SUB              R3, R3, R2  ;    Decrement the 
                                                            off time
  200 000000E0 600B            STR              R3, [R1]    ;
  201 000000E2 4965            LDR              R1, =delay_on ;
  202 000000E4 680B            LDR              R3, [R1]    ;
  203 000000E6 4413            ADD              R3, R3, R2  ;    Increment the 
                                                            on time
  204 000000E8 600B            STR              R3, [R1]    ;
  205 000000EA         
  206 000000EA 4962            LDR              R1, =delay_off ;
  207 000000EC 680A            LDR              R2, [R1]    ;
  208 000000EE 2A00            CMP              R2, #0      ;
  209 000000F0 D506            BPL              Blink       ;    If the the off
                                                             time is < 0 (off <
                                                             0%, on > 100%), re
                                                            set the values to o
                                                            ff = 100%, on = 0%
  210 000000F2 4A5E            LDR              R2, =MAX_DELAY ;
  211 000000F4 495F            LDR              R1, =delay_off ;
  212 000000F6 600A            STR              R2, [R1]    ;
  213 000000F8 495F            LDR              R1, =delay_on ;
  214 000000FA F04F 0200       MOV              R2, #0      ;     Reset the on 
                                                            time to 0 (light is
                                                             always off)
  215 000000FE 600A            STR              R2, [R1]    ;
  216 00000100         
  217 00000100         Blink
  218 00000100         ; Turn off the light and wait
  219 00000100 495F            LDR              R1, =GPIO_PORTE_DATA_R ;
  220 00000102 680A            LDR              R2, [R1]    ;
  221 00000104 F022 0201       BIC              R2, #0x01   ;
  222 00000108 600A            STR              R2, [R1]    ;
  223 0000010A 4A5A            LDR              R2, =delay_off ;
  224 0000010C 6810            LDR              R0, [R2]    ;
  225 0000010E F000 F848       BL               delay       ;   Delay the progr
                                                            am for a amount of 
                                                            time specified in R
                                                            7
  226 00000112         ; Turn on the light and wait
  227 00000112 680A            LDR              R2, [R1]    ;
  228 00000114 F042 0201       ORR              R2, #0x01   ;  
  229 00000118 600A            STR              R2, [R1]    ;
  230 0000011A 4A57            LDR              R2, =delay_on ;



ARM Macro Assembler    Page 9 


  231 0000011C 6810            LDR              R0, [R2]    ;
  232 0000011E F000 F840       BL               delay       ;
  233 00000122         
  234 00000122 E7C2            B                main_loop
  235 00000124         ;-------------------------------------------------------
                       ----------------------------------------
  236 00000124         Breathe_Start
  237 00000124         ; a subroutine that handles all the breathing functional
                       ity by completly reworking everything
  238 00000124 B4FF            PUSH             {R0-R7}     ;
  239 00000126 E92D 4100       PUSH             {R8, LR}    ;
  240 0000012A         
  241 0000012A         ; Setting up variables
  242 0000012A 4855            LDR              R0, =GPIO_PORTE_DATA_R ;
  243 0000012C F8DF 914C       LDR              R9, =GPIO_PORTF_DATA_R ;
  244 00000130 F44F 42BC       LDR              R2, =BREATHE_DELAY_MAX ;
  245 00000134 F44F 73FA       MOV              R3, #500    ;
  246 00000138 FBB2 F4F3       UDIV             R4, R2, R3  ;   The increments 
                                                            of the delay
  247 0000013C F102 0500       ADD              R5, R2, #0  ;    Default: off f
                                                            or 4/5 of 80Hz
  248 00000140 F04F 0600       MOV              R6, #0      ;    Default: on fo
                                                            r 1/5 of 80Hz
  249 00000144 F102 0700       ADD              R7, R2, #0  ;
  250 00000148         
  251 00000148         Breathe_loop
  252 00000148         ; The main loop engine
  253 00000148 F8D9 1000       LDR              R1, [R9]    ;    <- R1 holds th
                                                            e data from the dat
                                                            a register
  254 0000014C         Breathe_ifPushed
  255 0000014C         ; If the button is pushed, Stop breathing
  256 0000014C F001 0310       AND              R3, R1, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  257 00000150 2B10            CMP              R3, #0x10   ;
  258 00000152 D100            BNE              Breathe_incrementDuty ;
  259 00000154 E021            B                Breathe_Stop ;
  260 00000156         
  261 00000156         Breathe_incrementDuty
  262 00000156         ; Incrementing the duty time
  263 00000156 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  264 0000015A 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  265 0000015C 2D00            CMP              R5, #0      ;
  266 0000015E D402            BMI              Breathe_Verse ;
  267 00000160 D001            BEQ              Breathe_Verse ;     Check if we
                                                            've stopped or froz
                                                            e the delay of the 
                                                            light (either R5 or
                                                             R6 reach zero)
  268 00000162 2E00            CMP              R6, #0      ;
  269 00000164 D506            BPL              Breathe     ;
  270 00000166         Breathe_Verse
  271 00000166 F04F 33FF       MOV              R3, #-1     ;
  272 0000016A FB04 F403       MUL              R4, R4, R3  ;    Once we reach 
                                                            a maximum, down/up 
                                                            or up depending on 



ARM Macro Assembler    Page 10 


                                                            the scenario
  273 0000016E EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  274 00000172 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  275 00000174         Breathe
  276 00000174         ; Turn off the light and wait
  277 00000174 F021 0101       BIC              R1, #0x01   ;  
  278 00000178 6001            STR              R1, [R0]    ;
  279 0000017A B403            PUSH             {R0, R1}    ;
  280 0000017C F105 0000       ADD              R0, R5, #0  ;
  281 00000180 F000 F80F       BL               delay       ;     Delay the pro
                                                            gram for a amount o
                                                            f time specified in
                                                             R7
  282 00000184 BC03            POP              {R0, R1}    ;
  283 00000186         ; Turn on the light and wait
  284 00000186 F041 0101       ORR              R1, #0x01   ;  
  285 0000018A 6001            STR              R1, [R0]    ;
  286 0000018C B403            PUSH             {R0, R1}    ;
  287 0000018E F106 0000       ADD              R0, R6, #0  ;
  288 00000192 F000 F806       BL               delay       ;
  289 00000196 BC03            POP              {R0, R1}    ;
  290 00000198         
  291 00000198 E7D6            B                Breathe_loop
  292 0000019A         
  293 0000019A         Breathe_Stop
  294 0000019A E8BD 4100       POP              {R8,LR}     ;
  295 0000019E BCFF            POP              {R0-R7}     ;
  296 000001A0         
  297 000001A0 4770            BX               LR          ;
  298 000001A2         ;-------------------------------------------------------
                       ----------------------------------------
  299 000001A2         delay
  300 000001A2         ; a subroutine that loops using the value at R0
  301 000001A2 B403            PUSH             {R0, R1}    ;
  302 000001A4 F04F 0100       MOV              R1, #0      ;
  303 000001A8         delayLoop
  304 000001A8 4288            CMP              R0, R1      ;   Loop until temp
                                                            orary value R1 reac
                                                            hes R0
  305 000001AA D002            BEQ              delayDone   ;
  306 000001AC F101 0101       ADD              R1, R1, #1  ; 
  307 000001B0 E7FA            B                delayLoop   ;
  308 000001B2         delayDone
  309 000001B2 BC03            POP              {R0, R1}    ;
  310 000001B4 4770            BX               LR          ;
  311 000001B6         
  312 000001B6         ;-------DEBUG_Init--------------------------------------
                       ----------------------------------------
  313 000001B6         ;Initiliazing Debug Dump
  314 000001B6         Debug_Init
  315 000001B6 F8DF A0D0       LDR              R10, =data_capture
  316 000001BA F8DF B0D0       LDR              R11, =time_capture 
                                                            ;  Created pointers
                                                            
  317 000001BE B403            PUSH             {R0, R1}
  318 000001C0 B40C            PUSH             {R2, R3}
  319 000001C2 F04F 0008       MOV              R0, #0x08   ;  8 bits in data_c



ARM Macro Assembler    Page 11 


                                                            apture
  320 000001C6 F04F 0132       MOV              R1, #50     ;
  321 000001CA         
  322 000001CA         setting_data_capture
  323 000001CA F1A1 0101       SUB              R1,R1, #0x01
  324 000001CE F04F 02FF       MOV              R2, #0xFF   ;
  325 000001D2 F8CA 2000       STR              R2, [R10]
  326 000001D6 4482            ADD              R10, R10, R0
  327 000001D8 2900            CMP              R1, #0x0    ;
  328 000001DA D1F6            BNE              setting_data_capture
  329 000001DC         
  330 000001DC F04F 0132       MOV              R1, #50     ;
  331 000001E0 F04F 0204       MOV              R2, #0x04   ;
  332 000001E4 FB00 F002       MUL              R0,R0, R2   ;
  333 000001E8         setting_time_capture
  334 000001E8 F04F 0201       MOV              R2, #0x01   ;
  335 000001EC EBA1 0102       SUB              R1,R1, R2   ;
  336 000001F0 F04F 02FF       MOV              R2, #0xFF   ;
  337 000001F4 F8CA 2000       STR              R2, [R10]
  338 000001F8 4482            ADD              R10, R10, R0
  339 000001FA 2900            CMP              R1, #0x0    ;
  340 000001FC D1F4            BNE              setting_time_capture
  341 000001FE         
  342 000001FE F8DF A088       LDR              R10, =data_capture
  343 00000202 F8DF B088       LDR              R11,=time_capture
  344 00000206 BC0C            POP              {R2, R3}
  345 00000208 BC03            POP              {R0, R1}
  346 0000020A 4770            BX               LR
  347 0000020C         
  348 0000020C         ;-------DEBUG_CAPTURE-----------------------------------
                       ----------------------------------------
  349 0000020C         ;saves one data point
  350 0000020C         Debug_Capture
  351 0000020C B403            PUSH             {R0,R1}
  352 0000020E 481C            LDR              R0, =GPIO_PORTE_DATA_R
  353 00000210 F000 0003       AND              R0, R0, #0x03 ;  Capturing Pins
                                                             E0 and E1
  354 00000214 4905            LDR              R1, =NVIC_ST_CURRENT_R 
                                                            ; Capturing Time
  355 00000216 F8CA 0000       STR              R0, [R10]
  356 0000021A F8CB 1000       STR              R1, [R11]
  357 0000021E F10A 0A01       ADD              R10, R10, #0x01
  358 00000222 F10B 0B01       ADD              R11, R11, #0x01
  359 00000226 BC03            POP              {R0,R1}
  360 00000228 4770            BX               LR
  361 0000022A         
  362 0000022A         ;-------------------------------------------------------
                       ----------------------------------------
  363 0000022A 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  364 0000022C                 END                          ; end of file
              00000000 
              00000000 
              00FFFFFF 
              00000000 
              00000000 
              400FE608 
              40024400 



ARM Macro Assembler    Page 12 


              40024420 
              4002451C 
              40025520 
              4C4F434B 
              40025524 
              40025400 
              40025420 
              40025510 
              4002551C 
              001864A8 
              00000000 
              00000000 
              00000000 
              400253FC 
              400243FC 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s
