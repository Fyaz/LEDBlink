


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Faiyaz Mostofa & Zaine
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/28/2018
    5 00000000         ; Brief description of the program:
    6 00000000         ;   A collection of operations are done in this program 
                       (at once):
    7 00000000         ; - A Green LED blinks repeatedly indicating that the pr
                       ogram is running
    8 00000000         ; - A Red LED blinks on and off based on different patte
                       rns which can be changed by a switch (8Hz).
    9 00000000         ;   The LED will cycle through different patterns as spe
                       cified below:
   10 00000000         ;     :on for (1/40s) -> on for (1/20s) -> on for (3/40s
                       ) -> on for (1/10s) -> always on -> always off -> loop:
   11 00000000         ;   The delays for the blinking is handled by SysTick.s
   12 00000000         ; - The Red LED also has a breathing function can be act
                       ivated by holding the internal button @ PF4 on the micro
                       -controller.
   13 00000000         ;   The delays for the breathing is handled by the delay
                        function @ the end of this file.
   14 00000000         ;   - A debugging capture tool that runs 3rd time the lo
                       op finishes.
   15 00000000         ; Hardware connections (External: One button and one LED
                       )
   16 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
   17 00000000         ;  PE0 is a Red LED output (1 activates external LED on 
                       protoboard)
   18 00000000         ;  PF2 is a Green LED output (1 activates external LED o
                       n protoboard)
   19 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal)
   20 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   21 00000000         
   22 00000000         ; PortE device registers
   23 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   24 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   25 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   26 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   27 00000000         ; PortF device registers
   28 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   29 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   30 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   31 00000000 40025510 



ARM Macro Assembler    Page 2 


                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   32 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   33 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   34 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   35 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   36 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   37 00000000         ; System Clock reigsters
   38 00000000 E000E010 
                       NVIC_ST_CTRL_R
                               EQU              0xE000E010
   39 00000000 E000E014 
                       NVIC_ST_RELOAD_R
                               EQU              0xE000E014
   40 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   41 00000000         
   42 00000000 00010000 
                       NVIC_ST_CTRL_COUNT
                               EQU              0x00010000  ; Count flag
   43 00000000 00000004 
                       NVIC_ST_CTRL_CLK_SRC
                               EQU              0x00000004  ; Clock Source
   44 00000000 00000002 
                       NVIC_ST_CTRL_INTEN
                               EQU              0x00000002  ; Interrupt enable
   45 00000000 00000001 
                       NVIC_ST_CTRL_ENABLE
                               EQU              0x00000001  ; Counter mode
   46 00000000 00FFFFFF 
                       NVIC_ST_RELOAD_M
                               EQU              0x00FFFFFF  ; Counter load valu
                                                            e
   47 00000000         
   48 00000000         ;Variables that hold the maximum values 
   49 00000000 0000000C 
                       MAX_DELAY
                               EQU              0x0C        ; The interval size
                                                             of the delays (in 
                                                            10ms)
   50 00000000         ; 0x1864A8 (in cycles)
   51 00000000 00005E00 
                       BREATHE_DELAY_MAX
                               EQU              0x5E00      ; The delay require
                                                            d
   52 00000000         
   53 00000000                 IMPORT           TExaS_Init



ARM Macro Assembler    Page 3 


   54 00000000                 IMPORT           SysTick_Init
   55 00000000                 IMPORT           SysTick_Wait10ms
   56 00000000         
   57 00000000                 THUMB
   58 00000000         ;------------Global Variables---------------------------
                       ----------------------------------------
   59 00000000                 AREA             DATA, ALIGN=2
   60 00000000         
   61 00000000         ;Blinking variables
   62 00000000 00 00 00 
              00       delay_inc
                               SPACE            4           ; how to increment 
                                                            the delays when we 
                                                            need to change them
                                                             (1/5 of MAX_DELAY)
                                                            
   63 00000004 00 00 00 
              00       delay_off
                               SPACE            4           ; how long the LED 
                                                            will stay off (in c
                                                            ycles)
   64 00000008 00 00 00 
              00       delay_on
                               SPACE            4           ; how long the LED 
                                                            will stay on (in cy
                                                            cles)
   65 0000000C 00      prev_button_state
                               SPACE            1           ; captures whether 
                                                            a button has been r
                                                            eleased or pushed
   66 0000000D 00      green_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and toggles th
                                                            e blue LED after a 
                                                            certain time is met
                                                            .
   67 0000000E         
   68 0000000E         ;Debuggin variables
   69 0000000E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    data_capture
                               SPACE            50          ; Array of 50 8-byt
                                                            e numbers
   70 00000040 00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    time_capture
                               SPACE            200         ; Array of 50 32-by
                                                            te numbers
   71 00000108 00      debug_capture_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and captures d
                                                            ebugging data after
                                                             a certain amount o
                                                            f loops
   72 00000109         
   73 00000109 00      NEntries
                               SPACE            1           ; Number of entries
                                                             in either array 
   74 0000010A         
   75 0000010A                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   76 00000000                 THUMB
   77 00000000                 EXPORT           Start
   78 00000000         
   79 00000000         ;---------Main Code-------------------------------------
                       ----------------------------------------
   80 00000000         Start
   81 00000000         ; TExaS_Init sets bus clock at 80 MHz
   82 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   83 00000004 F000 F8CF       BL               Debug_Init  ; Initializes the D
                                                            ebugging Tools
   84 00000008 F7FF FFFE       BL               SysTick_Init ; Initializes the 
                                                            SysTick (method in 
                                                            SysTick.s)
   85 0000000C F000 F927       BL               Ports_Init  ;  Initializes Port
                                                            s E,F
   86 00000010         ; PE0 = Red LED output
   87 00000010         ; PE1 = positive logic Input (Switch)
   88 00000010         ; PF2 = Green LED output
   89 00000010         ; PF4 = Hold switch for breathing functionality
   90 00000010         
   91 00000010         ; Setting up variables
   92 00000010         Configure
   93 00000010 F04F 010C       LDR              R1, =MAX_DELAY ;  
   94 00000014 F04F 0205       MOV              R2, #5      ;     
   95 00000018 FBB1 F2F2       UDIV             R2, R1, R2  ;  split the max de
                                                            lay into 5 equal se
                                                            ctions
   96 0000001C 49AA            LDR              R1, =delay_inc ;
   97 0000001E 600A            STR              R2, [R1]    ;   delay_inc = (MA
                                                            X_DELAY / 5)
   98 00000020         
   99 00000020 49A9            LDR              R1, =delay_inc ;
  100 00000022 680A            LDR              R2, [R1]    ;
  101 00000024 F04F 0304       MOV              R3, #4      ;
  102 00000028 FB02 F203       MUL              R2, R2, R3  ; 



ARM Macro Assembler    Page 6 


  103 0000002C 49A7            LDR              R1, =delay_off ; 
  104 0000002E 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_off starts @ 4/
                                                            5 of the MAX_DELAY
  105 00000030         
  106 00000030 49A5            LDR              R1, =delay_inc ;
  107 00000032 680A            LDR              R2, [R1]    ;
  108 00000034 49A6            LDR              R1, =delay_on ;
  109 00000036 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_on on starts @ 
                                                            1/5 of the MAX_DELA
                                                            Y
  110 00000038         
  111 00000038 49A6            LDR              R1, =green_counter ;
  112 0000003A F04F 0200       MOV              R2, #0      ;
  113 0000003E 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he green_counter to
                                                             0
  114 00000040 49A5            LDR              R1, =debug_capture_counter ;
  115 00000042 F04F 0200       MOV              R2, #0      ;
  116 00000046 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he debug_counter to
                                                             0
  117 00000048         
  118 00000048 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  119 0000004A         
  120 0000004A         ; The main loop engine
  121 0000004A         main_loop
  122 0000004A         
  123 0000004A F000 F87A       BL               Check_Debug ; ; Check if we nee
                                                            d to record debuggi
                                                            ng statistics
  124 0000004E F000 F88A       BL               Check_Green ; Check whether to 
                                                            toggle the green LE
                                                            D on or not
  125 00000052 F000 F89A       BL               Check_Breathe ; Check if whethe
                                                            r we need to make t
                                                            he LED Breathe
  126 00000056         
  127 00000056         ;If a button @ PE1 is pushed, increment the blinking pat
                       tern
  128 00000056         Blink_ifPushed
  129 00000056 49A1            LDR              R1, =GPIO_PORTE_DATA_R ;
  130 00000058 4AA1            LDR              R2, =prev_button_state ;
  131 0000005A 7812            LDRB             R2, [R2]    ;
  132 0000005C 680B            LDR              R3, [R1]    ;    <- R3 holds th
                                                            e data from the Por
                                                            tE data register
  133 0000005E F003 0302       AND              R3, R3, #0x02 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  134 00000062 4293            CMP              R3, R2      ;     <- Check if t
                                                            he button is in the
                                                             same state as befo
                                                            re 
  135 00000064 D01B            BEQ              Blink       ;
  136 00000066 4A9E            LDR              R2, =prev_button_state ;



ARM Macro Assembler    Page 7 


  137 00000068 7013            STRB             R3, [R2]    ;
  138 0000006A         ; If the button is pushed, set PE4 to 1
  139 0000006A 2B00            CMP              R3, #0x00   ;   If the button i
                                                            s pushed
  140 0000006C D100            BNE              Blink_incrementDuty ;
  141 0000006E E016            B                Blink       ;
  142 00000070         Blink_incrementDuty
  143 00000070         ; Incrementing the duty time
  144 00000070 4A95            LDR              R2, =delay_inc ;
  145 00000072 6812            LDR              R2, [R2]    ;    
  146 00000074 4995            LDR              R1, =delay_off ;   
  147 00000076 680B            LDR              R3, [R1]    ;    
  148 00000078 EBA3 0302       SUB              R3, R3, R2  ;    Decrement the 
                                                            off time
  149 0000007C 600B            STR              R3, [R1]    ;
  150 0000007E 4994            LDR              R1, =delay_on ;
  151 00000080 680B            LDR              R3, [R1]    ;
  152 00000082 4413            ADD              R3, R3, R2  ;    Increment the 
                                                            on time
  153 00000084 600B            STR              R3, [R1]    ;
  154 00000086         ;Check if the duty time needs to be reset (always on -> 
                       always off)
  155 00000086 4991            LDR              R1, =delay_off ;
  156 00000088 680A            LDR              R2, [R1]    ;
  157 0000008A 2A00            CMP              R2, #0      ;
  158 0000008C D507            BPL              Blink       ;    If the the off
                                                             time is < 0 (off <
                                                             0%, on > 100%), re
                                                            set the values to o
                                                            ff = 100%, on = 0%
  159 0000008E F04F 020C       LDR              R2, =MAX_DELAY ;
  160 00000092 498E            LDR              R1, =delay_off ;
  161 00000094 600A            STR              R2, [R1]    ;
  162 00000096 498E            LDR              R1, =delay_on ;
  163 00000098 F04F 0200       MOV              R2, #0      ;     Reset the on 
                                                            time to 0 (light is
                                                             always off)
  164 0000009C 600A            STR              R2, [R1]    ;
  165 0000009E         Blink
  166 0000009E         ; Turn off the light and wait
  167 0000009E 498F            LDR              R1, =GPIO_PORTE_DATA_R ;
  168 000000A0 680A            LDR              R2, [R1]    ;
  169 000000A2 F022 0201       BIC              R2, #0x01   ;
  170 000000A6 600A            STR              R2, [R1]    ;
  171 000000A8 4A88            LDR              R2, =delay_off ;
  172 000000AA 6810            LDR              R0, [R2]    ;
  173 000000AC F7FF FFFE       BL               SysTick_Wait10ms ;BL delay; Del
                                                            ay the program for 
                                                            a amount of time sp
                                                            ecified in R0
  174 000000B0         ; Turn on the light and wait
  175 000000B0 498A            LDR              R1, =GPIO_PORTE_DATA_R ;
  176 000000B2 680A            LDR              R2, [R1]    ;
  177 000000B4 F042 0201       ORR              R2, #0x01   ;  
  178 000000B8 600A            STR              R2, [R1]    ;
  179 000000BA 4A85            LDR              R2, =delay_on ;
  180 000000BC 6810            LDR              R0, [R2]    ;
  181 000000BE F7FF FFFE       BL               SysTick_Wait10ms ;BL delay
  182 000000C2         



ARM Macro Assembler    Page 8 


  183 000000C2 E7C2            B                main_loop
  184 000000C4         ;-------------------------------------------------------
                       ----------------------------------------
  185 000000C4         Breathe_Start
  186 000000C4         ; a subroutine that handles all the breathing functional
                       ity by completly reworking everything
  187 000000C4 B4FF            PUSH             {R0-R7}     ;
  188 000000C6 E92D 4100       PUSH             {R8, LR}    ;
  189 000000CA         
  190 000000CA         ; Setting up variables
  191 000000CA 4884            LDR              R0, =GPIO_PORTE_DATA_R ;
  192 000000CC F8DF 9214       LDR              R9, =GPIO_PORTF_DATA_R ;
  193 000000D0 F44F 42BC       LDR              R2, =BREATHE_DELAY_MAX ;
  194 000000D4 F44F 73FA       MOV              R3, #500    ;
  195 000000D8 FBB2 F4F3       UDIV             R4, R2, R3  ;   The increments 
                                                            of the delay
  196 000000DC F102 0500       ADD              R5, R2, #0  ;    Default: off f
                                                            or 4/5 of 80Hz
  197 000000E0 F04F 0600       MOV              R6, #0      ;     Default: on f
                                                            or 1/5 of 80Hz
  198 000000E4 F102 0700       ADD              R7, R2, #0  ;
  199 000000E8         
  200 000000E8         Breathe_loop
  201 000000E8 F8D9 1000       LDR              R1, [R9]    ;    <- R1 holds th
                                                            e data from the dat
                                                            a register
  202 000000EC         Breathe_ifPushed
  203 000000EC F001 0310       AND              R3, R1, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  204 000000F0 2B10            CMP              R3, #0x10   ;    Keep Breathing
                                                             until the button i
                                                            s released.
  205 000000F2 D100            BNE              Breathe_incrementDuty ;
  206 000000F4 E021            B                Breathe_Stop ;
  207 000000F6         
  208 000000F6         Breathe_incrementDuty
  209 000000F6         ; Incrementing the duty time
  210 000000F6 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  211 000000FA 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  212 000000FC 2D00            CMP              R5, #0      ;
  213 000000FE D402            BMI              Breathe_Verse ;
  214 00000100 D001            BEQ              Breathe_Verse ;   Check if we'v
                                                            e stopped or froze 
                                                            the delay of the li
                                                            ght (either R5 or R
                                                            6 reach zero)
  215 00000102 2E00            CMP              R6, #0      ;
  216 00000104 D506            BPL              Breathe     ;
  217 00000106         Breathe_Verse
  218 00000106 F04F 33FF       MOV              R3, #-1     ;
  219 0000010A FB04 F403       MUL              R4, R4, R3  ;    Once we reach 
                                                            a maximum, down/up 
                                                            or up depending on 
                                                            the scenario
  220 0000010E EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time



ARM Macro Assembler    Page 9 


  221 00000112 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  222 00000114         Breathe
  223 00000114         ; Turn off the light and wait
  224 00000114 F021 0101       BIC              R1, #0x01   ;  
  225 00000118 6001            STR              R1, [R0]    ;
  226 0000011A B403            PUSH             {R0, R1}    ;
  227 0000011C F105 0000       ADD              R0, R5, #0  ;
  228 00000120 F000 F893       BL               delay       ;     Delay the pro
                                                            gram for a amount o
                                                            f time specified in
                                                             R7
  229 00000124 BC03            POP              {R0, R1}    ;
  230 00000126         ; Turn on the light and wait
  231 00000126 F041 0101       ORR              R1, #0x01   ;  
  232 0000012A 6001            STR              R1, [R0]    ;
  233 0000012C B403            PUSH             {R0, R1}    ;
  234 0000012E F106 0000       ADD              R0, R6, #0  ;
  235 00000132 F000 F88A       BL               delay       ;
  236 00000136 BC03            POP              {R0, R1}    ;
  237 00000138         
  238 00000138 E7D6            B                Breathe_loop
  239 0000013A         
  240 0000013A         Breathe_Stop
  241 0000013A E8BD 4100       POP              {R8,LR}     ;
  242 0000013E BCFF            POP              {R0-R7}     ;
  243 00000140         
  244 00000140 4770            BX               LR          ;
  245 00000142         
  246 00000142         ;-------CHECK_debug-------------------------------------
                       ----------------------------------------
  247 00000142         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  248 00000142         Check_Debug
  249 00000142 B403            PUSH             {R0, R1}    ;
  250 00000144 B504            PUSH             {R2, LR}    ;
  251 00000146 4964            LDR              R1, =debug_capture_counter ;
  252 00000148 780A            LDRB             R2, [R1]    ; 
  253 0000014A F102 0201       ADD              R2, R2, #1  ;   debug_capture_c
                                                            ounter++;
  254 0000014E 700A            STRB             R2, [R1]    ;
  255 00000150 2A03            CMP              R2, #3      ;
  256 00000152 D104            BNE              Check_Debug_Leave ;
  257 00000154 F000 F852       BL               Debug_Capture ;  if(debug_captu
                                                            re_counter == 3) ca
                                                            pture data
  258 00000158 F04F 0200       MOV              R2, #0      ;
  259 0000015C 700A            STRB             R2, [R1]    ;
  260 0000015E         Check_Debug_Leave
  261 0000015E E8BD 4004       POP              {R2, LR}    ;
  262 00000162 BC03            POP              {R0, R1}    ;
  263 00000164 4770            BX               LR          ;     
  264 00000166         
  265 00000166         ;-------CHECK_Green-------------------------------------
                       ----------------------------------------
  266 00000166         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  267 00000166         Check_Green
  268 00000166 B403            PUSH             {R0, R1}    ;



ARM Macro Assembler    Page 10 


  269 00000168 B504            PUSH             {R2, LR}    ;
  270 0000016A 495A            LDR              R1, =green_counter ;
  271 0000016C 780A            LDRB             R2, [R1]    ;
  272 0000016E F102 0201       ADD              R2, R2, #1  ;   green_counter++
                                                            
  273 00000172 700A            STRB             R2, [R1]    ;
  274 00000174 2A03            CMP              R2, #3      ;
  275 00000176 D104            BNE              Check_Green_Leave ; 
  276 00000178 F000 F85F       BL               Toggle_Green ;  if(green_counte
                                                            r == 3) toggle Gree
                                                            n LED
  277 0000017C F04F 0200       MOV              R2, #0      ;
  278 00000180 700A            STRB             R2, [R1]    ;
  279 00000182         Check_Green_Leave
  280 00000182 E8BD 4004       POP              {R2, LR}    ;
  281 00000186 BC03            POP              {R0, R1}    ;
  282 00000188 4770            BX               LR          ;  
  283 0000018A         
  284 0000018A         ;-------CHECK_Breathe-----------------------------------
                       ------------------------------------------
  285 0000018A         ; If the button @ PF4 is pushed, Start breathing
  286 0000018A         Check_Breathe
  287 0000018A B403            PUSH             {R0, R1}    ;
  288 0000018C B504            PUSH             {R2, LR}    ;
  289 0000018E 4955            LDR              R1, =GPIO_PORTF_DATA_R ;
  290 00000190 680A            LDR              R2, [R1]    ;
  291 00000192 F002 0210       AND              R2, R2, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  292 00000196 2A00            CMP              R2, #0x00   ;
  293 00000198 D101            BNE              Check_Breathe_Leave ; If SW1 is
                                                             pushed, start the 
                                                            breathing
  294 0000019A F7FF FF93       BL               Breathe_Start ;
  295 0000019E         Check_Breathe_Leave
  296 0000019E E8BD 4004       POP              {R2, LR}    ;
  297 000001A2 BC03            POP              {R0, R1}    ;
  298 000001A4 4770            BX               LR          ;
  299 000001A6         
  300 000001A6         ;-------DEBUG_Init--------------------------------------
                       ----------------------------------------
  301 000001A6         ;Initiliazing Debug Dump
  302 000001A6         ;R10 = data_capture pointer
  303 000001A6         ;R11 = time_capture pointer
  304 000001A6         Debug_Init
  305 000001A6 F8DF A140       LDR              R10, =data_capture
  306 000001AA F8DF B140       LDR              R11, =time_capture 
                                                            ;  Created pointers
                                                            
  307 000001AE         
  308 000001AE B403            PUSH             {R0, R1}
  309 000001B0 B40C            PUSH             {R2, R3}
  310 000001B2 F04F 0008       MOV              R0, #0x08   ;  8 bits in data_c
                                                            apture
  311 000001B6 F04F 0132       MOV              R1, #50     ;
  312 000001BA         
  313 000001BA         setting_data_capture
  314 000001BA F1A1 0101       SUB              R1,R1, #0x01
  315 000001BE F04F 02FF       MOV              R2, #0xFF   ;  ; Fill the data 



ARM Macro Assembler    Page 11 


                                                            array with 0xFF (si
                                                            gnifying empty)
  316 000001C2 F88A 2000       STRB             R2, [R10]
  317 000001C6 4482            ADD              R10, R10, R0
  318 000001C8 2900            CMP              R1, #0x0    ;
  319 000001CA D1F6            BNE              setting_data_capture
  320 000001CC         
  321 000001CC F04F 0132       MOV              R1, #50     ;
  322 000001D0 F04F 0204       MOV              R2, #0x04   ;
  323 000001D4 FB00 F002       MUL              R0,R0, R2   ;
  324 000001D8         setting_time_capture
  325 000001D8 F04F 0201       MOV              R2, #0x01   ;
  326 000001DC EBA1 0102       SUB              R1,R1, R2   ;
  327 000001E0 F04F 32FF       MOV              R2, #0xFFFFFFFF ; ; Fill the ti
                                                            me array with 0xFFF
                                                            FFFFF (signifying e
                                                            mpty)
  328 000001E4 F8CA 2000       STR              R2, [R10]
  329 000001E8 4482            ADD              R10, R10, R0
  330 000001EA 2900            CMP              R1, #0x0    ;
  331 000001EC D1F4            BNE              setting_time_capture
  332 000001EE         
  333 000001EE F8DF A0F8       LDR              R10, =data_capture
  334 000001F2 F8DF B0F8       LDR              R11,=time_capture
  335 000001F6 BC0C            POP              {R2, R3}
  336 000001F8 BC03            POP              {R0, R1}
  337 000001FA 4770            BX               LR
  338 000001FC         
  339 000001FC         ;-------DEBUG_CAPTURE-----------------------------------
                       ----------------------------------------
  340 000001FC         ;saves one data point
  341 000001FC         Debug_Capture
  342 000001FC B403            PUSH             {R0,R1}
  343 000001FE 483C            LDR              R0 , =NEntries
  344 00000200 6800            LDR              R0, [R0]
  345 00000202 2832            CMP              R0 , #50
  346 00000204 D017            BEQ              DONE_C
  347 00000206 4835            LDR              R0, =GPIO_PORTE_DATA_R
  348 00000208 F000 0002       AND              R0, R0, #0x02 ;  Capturing Pins
                                                             E0 and E1
  349 0000020C EA4F 00D0       LSR              R0, R0, #0x03 ;
  350 00000210 4932            LDR              R1, =GPIO_PORTE_DATA_R
  351 00000212 F001 0101       AND              R1,R1,#0x01 ;
  352 00000216 EA00 0001       AND              R0,R0,R1    ;
  353 0000021A 4936            LDR              R1, =NVIC_ST_CURRENT_R 
                                                            ; Capturing Time
  354 0000021C F88A 0000       STRB             R0, [R10]   ;   Finished Storin
                                                            g Data
  355 00000220         
  356 00000220 F8CB 1000       STR              R1, [R11]
  357 00000224 F10A 0A01       ADD              R10, R10, #0x01
  358 00000228 F10B 0B04       ADD              R11, R11, #0x04
  359 0000022C 4830            LDR              R0, =NEntries
  360 0000022E 6801            LDR              R1, [R0]
  361 00000230 F101 0101       ADD              R1,R1, #0x01
  362 00000234 6001            STR              R1, [R0]
  363 00000236         
  364 00000236 BC03    DONE_C  POP              {R0,R1}
  365 00000238 4770            BX               LR          ;



ARM Macro Assembler    Page 12 


  366 0000023A         
  367 0000023A         ;-------Toggle Green LED (PF2)--------------------------
                       ----------------------------------------
  368 0000023A         ;Toggles the Green LED on and off (PF2)
  369 0000023A         Toggle_Green
  370 0000023A B403            PUSH             {R0, R1}    ;
  371 0000023C 4829            LDR              R0, =GPIO_PORTF_DATA_R ;
  372 0000023E 6801            LDR              R1, [R0]    ;
  373 00000240 F081 0104       EOR              R1, #0x04   ;
  374 00000244 6001            STR              R1, [R0]    ;
  375 00000246 BC03            POP              {R0, R1}    ;
  376 00000248 4770            BX               LR          ;
  377 0000024A         
  378 0000024A         ;-------------------------------------------------------
                       ----------------------------------------
  379 0000024A         delay
  380 0000024A         ; a subroutine that loops using the value at R0
  381 0000024A B403            PUSH             {R0, R1}    ;
  382 0000024C F04F 0100       MOV              R1, #0      ;
  383 00000250         delayLoop
  384 00000250 4288            CMP              R0, R1      ;   Loop until temp
                                                            orary value, R1, re
                                                            aches R0
  385 00000252 D002            BEQ              delayDone   ;
  386 00000254 F101 0101       ADD              R1, R1, #1  ; 
  387 00000258 E7FA            B                delayLoop   ;
  388 0000025A         delayDone
  389 0000025A BC03            POP              {R0, R1}    ;
  390 0000025C 4770            BX               LR          ;
  391 0000025E         
  392 0000025E         ;-------------------------------------------------------
                       ----------------------------------------
  393 0000025E         ; Port Initialization
  394 0000025E         Ports_Init
  395 0000025E B403            PUSH             {R0, R1}    ;
  396 00000260 B504            PUSH             {R2, LR}    ;
  397 00000262 4825            LDR              R0, =SYSCTL_RCGCGPIO_R ;
  398 00000264 6801            LDR              R1, [R0]    ;
  399 00000266 F041 0130       ORR              R1, R1, #0x30 ;   Start up Port
                                                             F and Port E
  400 0000026A 6001            STR              R1, [R0]    ;
  401 0000026C BF00            NOP                          ;
  402 0000026E BF00            NOP                          ;
  403 00000270         ; Configure Port E
  404 00000270 4822            LDR              R0, =GPIO_PORTE_DIR_R ;
  405 00000272 6801            LDR              R1, [R0]    ;
  406 00000274 F041 0101       ORR              R1, R1, #0x01 ;    PE0 is set t
                                                            o output (LED)
  407 00000278 F021 0112       BIC              R1, R1, #0x12 ;    PE1,4 are se
                                                            t to input (buttons
                                                            )
  408 0000027C 6001            STR              R1, [R0]    ;
  409 0000027E 4820            LDR              R0, =GPIO_PORTE_AFSEL_R ;
  410 00000280 6801            LDR              R1, [R0]    ;
  411 00000282 F04F 0100       MOV              R1, #0      ;      Disables the
                                                             "alternate functio
                                                            ns" in the port
  412 00000286 6001            STR              R1, [R0]    ;
  413 00000288 481E            LDR              R0, =GPIO_PORTE_DEN_R ;



ARM Macro Assembler    Page 13 


  414 0000028A 6801            LDR              R1, [R0]    ;
  415 0000028C F04F 01FF       MOV              R1, #0xFF   ;     1 means enabl
                                                            e digital I/O
  416 00000290 6001            STR              R1, [R0]    ;
  417 00000292         ; Configure Port F
  418 00000292 491D            LDR              R1, =GPIO_PORTF_LOCK_R ;  2) un
                                                            lock the lock regis
                                                            ter
  419 00000294 481D            LDR              R0, =GPIO_LOCK_KEY ;   unlock G
                                                            PIO Port F Commit R
                                                            egister
  420 00000296 6008            STR              R0, [R1]    ;
  421 00000298 491D            LDR              R1, =GPIO_PORTF_CR_R ;    enabl
                                                            e commit for Port F
                                                            
  422 0000029A F04F 00FF       MOV              R0, #0xFF   ;               1 m
                                                            eans allow access
  423 0000029E 6008            STR              R0, [R1]    ;
  424 000002A0 491C            LDR              R1, =GPIO_PORTF_DIR_R ;   5) se
                                                            t direction registe
                                                            r
  425 000002A2 F04F 000E       MOV              R0,#0x0E    ;
  426 000002A6 6008            STR              R0, [R1]    ;
  427 000002A8 491B            LDR              R1, =GPIO_PORTF_AFSEL_R ; 6) re
                                                            gular port function
                                                            
  428 000002AA F04F 0000       MOV              R0, #0      ;                  
                                                              0 means disable a
                                                            lternate function
  429 000002AE 6008            STR              R0, [R1]    ;
  430 000002B0 491A            LDR              R1, =GPIO_PORTF_PUR_R ;     pul
                                                            l-up resistors for 
                                                            PF4,PF0
  431 000002B2 F04F 0011       MOV              R0, #0x11   ;                 1
                                                            )enable for negativ
                                                            e logic
  432 000002B6 6008            STR              R0, [R1]    ;
  433 000002B8 4919            LDR              R1, =GPIO_PORTF_DEN_R ;     7) 
                                                            enable Port F digit
                                                            al port
  434 000002BA F04F 00FF       MOV              R0, #0xFF   ;                 1
                                                             means enable digit
                                                            al I/O
  435 000002BE 6008            STR              R0, [R1]    ;
  436 000002C0 E8BD 4004       POP              {R2, LR}    ;
  437 000002C4 BC03            POP              {R0, R1}    ;
  438 000002C6 4770            BX               LR          ;
  439 000002C8         ;-------------------------------------------------------
                       ----------------------------------------
  440 000002C8                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  441 000002C8                 END                          ; end of file
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              400243FC 



ARM Macro Assembler    Page 14 


              00000000 
              400253FC 
              00000000 
              00000000 
              00000000 
              E000E018 
              400FE608 
              40024400 
              40024420 
              4002451C 
              40025520 
              4C4F434B 
              40025524 
              40025400 
              40025420 
              40025510 
              4002551C 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 59 in file main.s
   Uses
      None
Comment: DATA unused
NEntries 00000109

Symbol: NEntries
   Definitions
      At line 73 in file main.s
   Uses
      At line 343 in file main.s
      At line 359 in file main.s

data_capture 0000000E

Symbol: data_capture
   Definitions
      At line 69 in file main.s
   Uses
      At line 305 in file main.s
      At line 333 in file main.s

debug_capture_counter 00000108

Symbol: debug_capture_counter
   Definitions
      At line 71 in file main.s
   Uses
      At line 114 in file main.s
      At line 251 in file main.s

delay_inc 00000000

Symbol: delay_inc
   Definitions
      At line 62 in file main.s
   Uses
      At line 96 in file main.s
      At line 99 in file main.s
      At line 106 in file main.s
      At line 144 in file main.s

delay_off 00000004

Symbol: delay_off
   Definitions
      At line 63 in file main.s
   Uses
      At line 103 in file main.s
      At line 146 in file main.s
      At line 155 in file main.s
      At line 160 in file main.s
      At line 171 in file main.s

delay_on 00000008



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: delay_on
   Definitions
      At line 64 in file main.s
   Uses
      At line 108 in file main.s
      At line 150 in file main.s
      At line 162 in file main.s
      At line 179 in file main.s

green_counter 0000000D

Symbol: green_counter
   Definitions
      At line 66 in file main.s
   Uses
      At line 111 in file main.s
      At line 270 in file main.s

prev_button_state 0000000C

Symbol: prev_button_state
   Definitions
      At line 65 in file main.s
   Uses
      At line 130 in file main.s
      At line 136 in file main.s

time_capture 00000040

Symbol: time_capture
   Definitions
      At line 70 in file main.s
   Uses
      At line 306 in file main.s
      At line 334 in file main.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 75 in file main.s
   Uses
      None
Comment: .text unused
Blink 0000009E

Symbol: Blink
   Definitions
      At line 165 in file main.s
   Uses
      At line 135 in file main.s
      At line 141 in file main.s
      At line 158 in file main.s

Blink_ifPushed 00000056

Symbol: Blink_ifPushed
   Definitions
      At line 128 in file main.s
   Uses
      None
Comment: Blink_ifPushed unused
Blink_incrementDuty 00000070

Symbol: Blink_incrementDuty
   Definitions
      At line 142 in file main.s
   Uses
      At line 140 in file main.s
Comment: Blink_incrementDuty used once
Breathe 00000114

Symbol: Breathe
   Definitions
      At line 222 in file main.s
   Uses
      At line 216 in file main.s
Comment: Breathe used once
Breathe_Start 000000C4

Symbol: Breathe_Start
   Definitions
      At line 185 in file main.s
   Uses
      At line 294 in file main.s
Comment: Breathe_Start used once
Breathe_Stop 0000013A

Symbol: Breathe_Stop
   Definitions
      At line 240 in file main.s
   Uses
      At line 206 in file main.s
Comment: Breathe_Stop used once
Breathe_Verse 00000106



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Breathe_Verse
   Definitions
      At line 217 in file main.s
   Uses
      At line 213 in file main.s
      At line 214 in file main.s

Breathe_ifPushed 000000EC

Symbol: Breathe_ifPushed
   Definitions
      At line 202 in file main.s
   Uses
      None
Comment: Breathe_ifPushed unused
Breathe_incrementDuty 000000F6

Symbol: Breathe_incrementDuty
   Definitions
      At line 208 in file main.s
   Uses
      At line 205 in file main.s
Comment: Breathe_incrementDuty used once
Breathe_loop 000000E8

Symbol: Breathe_loop
   Definitions
      At line 200 in file main.s
   Uses
      At line 238 in file main.s
Comment: Breathe_loop used once
Check_Breathe 0000018A

Symbol: Check_Breathe
   Definitions
      At line 286 in file main.s
   Uses
      At line 125 in file main.s
Comment: Check_Breathe used once
Check_Breathe_Leave 0000019E

Symbol: Check_Breathe_Leave
   Definitions
      At line 295 in file main.s
   Uses
      At line 293 in file main.s
Comment: Check_Breathe_Leave used once
Check_Debug 00000142

Symbol: Check_Debug
   Definitions
      At line 248 in file main.s
   Uses
      At line 123 in file main.s
Comment: Check_Debug used once
Check_Debug_Leave 0000015E

Symbol: Check_Debug_Leave



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 260 in file main.s
   Uses
      At line 256 in file main.s
Comment: Check_Debug_Leave used once
Check_Green 00000166

Symbol: Check_Green
   Definitions
      At line 267 in file main.s
   Uses
      At line 124 in file main.s
Comment: Check_Green used once
Check_Green_Leave 00000182

Symbol: Check_Green_Leave
   Definitions
      At line 279 in file main.s
   Uses
      At line 275 in file main.s
Comment: Check_Green_Leave used once
Configure 00000010

Symbol: Configure
   Definitions
      At line 92 in file main.s
   Uses
      None
Comment: Configure unused
DONE_C 00000236

Symbol: DONE_C
   Definitions
      At line 364 in file main.s
   Uses
      At line 346 in file main.s
Comment: DONE_C used once
Debug_Capture 000001FC

Symbol: Debug_Capture
   Definitions
      At line 341 in file main.s
   Uses
      At line 257 in file main.s
Comment: Debug_Capture used once
Debug_Init 000001A6

Symbol: Debug_Init
   Definitions
      At line 304 in file main.s
   Uses
      At line 83 in file main.s
Comment: Debug_Init used once
Ports_Init 0000025E

Symbol: Ports_Init
   Definitions
      At line 394 in file main.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 85 in file main.s
Comment: Ports_Init used once
Start 00000000

Symbol: Start
   Definitions
      At line 80 in file main.s
   Uses
      At line 77 in file main.s
Comment: Start used once
Toggle_Green 0000023A

Symbol: Toggle_Green
   Definitions
      At line 369 in file main.s
   Uses
      At line 276 in file main.s
Comment: Toggle_Green used once
delay 0000024A

Symbol: delay
   Definitions
      At line 379 in file main.s
   Uses
      At line 228 in file main.s
      At line 235 in file main.s

delayDone 0000025A

Symbol: delayDone
   Definitions
      At line 388 in file main.s
   Uses
      At line 385 in file main.s
Comment: delayDone used once
delayLoop 00000250

Symbol: delayLoop
   Definitions
      At line 383 in file main.s
   Uses
      At line 387 in file main.s
Comment: delayLoop used once
main_loop 0000004A

Symbol: main_loop
   Definitions
      At line 121 in file main.s
   Uses
      At line 183 in file main.s
Comment: main_loop used once
setting_data_capture 000001BA

Symbol: setting_data_capture
   Definitions
      At line 313 in file main.s
   Uses
      At line 319 in file main.s
Comment: setting_data_capture used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

setting_time_capture 000001D8

Symbol: setting_time_capture
   Definitions
      At line 324 in file main.s
   Uses
      At line 331 in file main.s
Comment: setting_time_capture used once
30 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BREATHE_DELAY_MAX 00005E00

Symbol: BREATHE_DELAY_MAX
   Definitions
      At line 51 in file main.s
   Uses
      At line 193 in file main.s
Comment: BREATHE_DELAY_MAX used once
GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 35 in file main.s
   Uses
      At line 419 in file main.s
Comment: GPIO_LOCK_KEY used once
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 25 in file main.s
   Uses
      At line 409 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 23 in file main.s
   Uses
      At line 129 in file main.s
      At line 167 in file main.s
      At line 175 in file main.s
      At line 191 in file main.s
      At line 347 in file main.s
      At line 350 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 26 in file main.s
   Uses
      At line 413 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 24 in file main.s
   Uses
      At line 404 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 30 in file main.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 427 in file main.s
Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 421 in file main.s
Comment: GPIO_PORTF_CR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 28 in file main.s
   Uses
      At line 192 in file main.s
      At line 289 in file main.s
      At line 371 in file main.s

GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 433 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 29 in file main.s
   Uses
      At line 424 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 418 in file main.s
Comment: GPIO_PORTF_LOCK_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 430 in file main.s
Comment: GPIO_PORTF_PUR_R used once
MAX_DELAY 0000000C

Symbol: MAX_DELAY
   Definitions
      At line 49 in file main.s
   Uses
      At line 93 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 159 in file main.s

NVIC_ST_CTRL_CLK_SRC 00000004

Symbol: NVIC_ST_CTRL_CLK_SRC
   Definitions
      At line 43 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_CLK_SRC unused
NVIC_ST_CTRL_COUNT 00010000

Symbol: NVIC_ST_CTRL_COUNT
   Definitions
      At line 42 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_COUNT unused
NVIC_ST_CTRL_ENABLE 00000001

Symbol: NVIC_ST_CTRL_ENABLE
   Definitions
      At line 45 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_ENABLE unused
NVIC_ST_CTRL_INTEN 00000002

Symbol: NVIC_ST_CTRL_INTEN
   Definitions
      At line 44 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_INTEN unused
NVIC_ST_CTRL_R E000E010

Symbol: NVIC_ST_CTRL_R
   Definitions
      At line 38 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_R unused
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 353 in file main.s
Comment: NVIC_ST_CURRENT_R used once
NVIC_ST_RELOAD_M 00FFFFFF

Symbol: NVIC_ST_RELOAD_M
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: NVIC_ST_RELOAD_M unused
NVIC_ST_RELOAD_R E000E014



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols


Symbol: NVIC_ST_RELOAD_R
   Definitions
      At line 39 in file main.s
   Uses
      None
Comment: NVIC_ST_RELOAD_R unused
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 397 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 54 in file main.s
   Uses
      At line 84 in file main.s
Comment: SysTick_Init used once
SysTick_Wait10ms 00000000

Symbol: SysTick_Wait10ms
   Definitions
      At line 55 in file main.s
   Uses
      At line 173 in file main.s
      At line 181 in file main.s

TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 53 in file main.s
   Uses
      At line 82 in file main.s
Comment: TExaS_Init used once
3 symbols
399 symbols in table
