


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Faiyaz Mostofa
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/14/2018
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ; Hardware connections (External: One button and one LED
                       )
    8 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
    9 00000000         ;  PE0 is LED output (1 activates external LED on protob
                       oard)
   10 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal)
   11 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   12 00000000         ; Overall functionality of this system is to operate lik
                       e this
   13 00000000         ;   1) Make PE0 an output and make PE1 and PF4 inputs.
   14 00000000         ;   2) The system starts with the the LED toggling at 8H
                       z,
   15 00000000         ;      which is 8 times per second with a duty-cycle of 
                       20%.
   16 00000000         ;      Therefore, the LED is ON for (0.2*1/8)th of a sec
                       ond
   17 00000000         ;      and OFF for (0.8*1/8)th of a second.
   18 00000000         ;   3) When the button on (PE1) is pressed-and-released 
                       increase
   19 00000000         ;      the duty cycle by 20% (modulo 100%). Therefore fo
                       r each
   20 00000000         ;      press-and-release the duty cycle changes from 20%
                        to 40% to 60%
   21 00000000         ;      to 80% to 100%(ON) to 0%(Off) to 20% to 40% so on
                       
   22 00000000         ;   4) Implement a "breathing LED" when SW1 (PF4) on the
                        Launchpad is pressed:
   23 00000000         ;      a) Be creative and play around with what "breathi
                       ng" means.
   24 00000000         ;         An example of "breathing" is most computers po
                       wer LED in sleep mode
   25 00000000         ;         (e.g., https://www.youtube.com/watch?v=ZT6siXy
                       IjvQ).
   26 00000000         ;      b) When (PF4) is released while in breathing mode
                       , resume blinking at 8Hz.
   27 00000000         ;         The duty cycle can either match the most recen
                       t duty-
   28 00000000         ;         cycle or reset to 20%.
   29 00000000         ;      TIP: debugging the breathing LED algorithm and fe
                       el on the simulator is impossible.
   30 00000000         ; PortE device registers
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 



ARM Macro Assembler    Page 2 


                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         ; PortF device registers
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   42 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   43 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   44 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   45 00000000         ;System Clock reigsters
   46 00000000 E000E010 
                       NVIC_ST_CTRL_R
                               EQU              0xE000E010
   47 00000000 E000E014 
                       NVIC_ST_RELOAD_R
                               EQU              0xE000E014
   48 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   49 00000000         
   50 00000000 00010000 
                       NVIC_ST_CTRL_COUNT
                               EQU              0x00010000  ; Count flag
   51 00000000 00000004 
                       NVIC_ST_CTRL_CLK_SRC
                               EQU              0x00000004  ; Clock Source
   52 00000000 00000002 
                       NVIC_ST_CTRL_INTEN
                               EQU              0x00000002  ; Interrupt enable
   53 00000000 00000001 
                       NVIC_ST_CTRL_ENABLE
                               EQU              0x00000001  ; Counter mode
   54 00000000 00FFFFFF 
                       NVIC_ST_RELOAD_M
                               EQU              0x00FFFFFF  ; Counter load valu
                                                            e
   55 00000000         



ARM Macro Assembler    Page 3 


   56 00000000         ;Variables that hold the maximum values 
   57 00000000 001864A8 
                       MAX_DELAY
                               EQU              0x1864A8    ;0x249700    ; The 
                                                            interval size of th
                                                            e delays
   58 00000000 00005E00 
                       BREATHE_DELAY_MAX
                               EQU              0x5E00      ; The delay require
                                                            d
   59 00000000         
   60 00000000                 IMPORT           TExaS_Init
   61 00000000                 IMPORT           SysTick_Init
   62 00000000         
   63 00000000                 THUMB
   64 00000000         ;------------Global Variables---------------------------
                       ----------------------------------------
   65 00000000                 AREA             DATA, ALIGN=2
   66 00000000         
   67 00000000         ;Blinking variables
   68 00000000 00 00 00 
              00       delay_inc
                               SPACE            4           ; how to increment 
                                                            the delays when we 
                                                            need to change them
                                                             (1/5 of MAX_DELAY)
                                                            
   69 00000004 00 00 00 
              00       delay_off
                               SPACE            4           ; how long the LED 
                                                            will stay off (in c
                                                            ycles)
   70 00000008 00 00 00 
              00       delay_on
                               SPACE            4           ; how long the LED 
                                                            will stay on (in cy
                                                            cles)
   71 0000000C 00      prev_button_state
                               SPACE            1           ; captures whether 
                                                            a button has been r
                                                            eleased or pushed
   72 0000000D 00      green_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and toggles th
                                                            e blue LED after a 
                                                            certain time is met
                                                            .
   73 0000000E         ;Debuggin variables
   74 0000000E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    data_capture
                               SPACE            50          ; Array of 50 8-byt
                                                            e numbers
   75 00000040 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    time_capture
                               SPACE            200         ; Array of 50 32-by
                                                            te numbers
   76 00000108 00      NEntries
                               SPACE            1           ; Number of entries
                                                             in either array 
   77 00000109                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   78 00000000                 THUMB
   79 00000000                 EXPORT           Start
   80 00000000         
   81 00000000         ;R10 = data_capture pointer
   82 00000000         ;R11 = time_capture pointer
   83 00000000         ;---------Main Code-------------------------------------
                       ----------------------------------------
   84 00000000         Start
   85 00000000         ; TExaS_Init sets bus clock at 80 MHz
   86 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   87 00000004 F000 F8DB       BL               Debug_Init  ; Initializes the D
                                                            ebugging Tools
   88 00000008 F7FF FFFE       BL               SysTick_Init ; Initializes the 
                                                            SysTick
   89 0000000C         
   90 0000000C         ; Port Initialization
   91 0000000C 4895            LDR              R0, =SYSCTL_RCGCGPIO_R ;
   92 0000000E 6801            LDR              R1, [R0]    ;
   93 00000010 F041 0130       ORR              R1, R1, #0x30 ;   Start up Port
                                                             F and Port E
   94 00000014 6001            STR              R1, [R0]    ;
   95 00000016 BF00            NOP                          ;
   96 00000018 BF00            NOP                          ;
   97 0000001A         ; Configure Port E
   98 0000001A 4893            LDR              R0, =GPIO_PORTE_DIR_R ;
   99 0000001C 6801            LDR              R1, [R0]    ;
  100 0000001E F041 0101       ORR              R1, R1, #0x01 ;    PE0 is set t
                                                            o output (LED)
  101 00000022 F021 0112       BIC              R1, R1, #0x12 ;    PE1,4 are se
                                                            t to input (buttons
                                                            )
  102 00000026 6001            STR              R1, [R0]    ;
  103 00000028 4890            LDR              R0, =GPIO_PORTE_AFSEL_R ;
  104 0000002A 6801            LDR              R1, [R0]    ;



ARM Macro Assembler    Page 6 


  105 0000002C F04F 0100       MOV              R1, #0      ;      Disables the
                                                             "alternate functio
                                                            ns" in the port
  106 00000030 6001            STR              R1, [R0]    ;
  107 00000032 488F            LDR              R0, =GPIO_PORTE_DEN_R ;
  108 00000034 6801            LDR              R1, [R0]    ;
  109 00000036 F04F 01FF       MOV              R1, #0xFF   ;     1 means enabl
                                                            e digital I/O
  110 0000003A 6001            STR              R1, [R0]    ;
  111 0000003C         ; Configure Port F
  112 0000003C 498D            LDR              R1, =GPIO_PORTF_LOCK_R ;  2) un
                                                            lock the lock regis
                                                            ter
  113 0000003E 488E            LDR              R0, =GPIO_LOCK_KEY ;   unlock G
                                                            PIO Port F Commit R
                                                            egister
  114 00000040 6008            STR              R0, [R1]    ;
  115 00000042 498E            LDR              R1, =GPIO_PORTF_CR_R ;    enabl
                                                            e commit for Port F
                                                            
  116 00000044 F04F 00FF       MOV              R0, #0xFF   ;               1 m
                                                            eans allow access
  117 00000048 6008            STR              R0, [R1]    ;
  118 0000004A 498D            LDR              R1, =GPIO_PORTF_DIR_R ;   5) se
                                                            t direction registe
                                                            r
  119 0000004C F04F 000E       MOV              R0,#0x0E    ;
  120 00000050 6008            STR              R0, [R1]    ;
  121 00000052 498C            LDR              R1, =GPIO_PORTF_AFSEL_R ; 6) re
                                                            gular port function
                                                            
  122 00000054 F04F 0000       MOV              R0, #0      ;                  
                                                              0 means disable a
                                                            lternate function
  123 00000058 6008            STR              R0, [R1]    ;
  124 0000005A 498B            LDR              R1, =GPIO_PORTF_PUR_R ;     pul
                                                            l-up resistors for 
                                                            PF4,PF0
  125 0000005C F04F 0011       MOV              R0, #0x11   ;                 1
                                                            )enable for negativ
                                                            e logic
  126 00000060 6008            STR              R0, [R1]    ;
  127 00000062 498A            LDR              R1, =GPIO_PORTF_DEN_R ;     7) 
                                                            enable Port F digit
                                                            al port
  128 00000064 F04F 00FF       MOV              R0, #0xFF   ;                 1
                                                             means enable digit
                                                            al I/O
  129 00000068 6008            STR              R0, [R1]    ;
  130 0000006A         ; Setting up variables
  131 0000006A         Configure
  132 0000006A 4989            LDR              R1, =MAX_DELAY ;  
  133 0000006C F04F 0205       MOV              R2, #5      ;     
  134 00000070 FBB1 F2F2       UDIV             R2, R1, R2  ;  split the max de
                                                            lay into 5 equal se
                                                            ctions
  135 00000074 4987            LDR              R1, =delay_inc ;
  136 00000076 600A            STR              R2, [R1]    ;   delay_inc = (MA
                                                            X_DELAY / 5)



ARM Macro Assembler    Page 7 


  137 00000078         
  138 00000078 4986            LDR              R1, =delay_inc ;
  139 0000007A 680A            LDR              R2, [R1]    ;
  140 0000007C F04F 0304       MOV              R3, #4      ;
  141 00000080 FB02 F203       MUL              R2, R2, R3  ; 
  142 00000084 4984            LDR              R1, =delay_off ; 
  143 00000086 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_off starts @ 4/
                                                            5 of the MAX_DELAY
  144 00000088         
  145 00000088 4982            LDR              R1, =delay_inc ;
  146 0000008A 680A            LDR              R2, [R1]    ;
  147 0000008C 4983            LDR              R1, =delay_on ;
  148 0000008E 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_on on starts @ 
                                                            1/5 of the MAX_DELA
                                                            Y
  149 00000090         
  150 00000090 4983            LDR              R1, =green_counter ;
  151 00000092 F04F 0200       MOV              R2, #0      ;
  152 00000096 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he green_counter to
                                                             0
  153 00000098         
  154 00000098 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  155 0000009A         
  156 0000009A         main_loop
  157 0000009A         ; The main loop engine
  158 0000009A         ;Check whether to toggle the green LED or not
  159 0000009A 4981            LDR              R1, =green_counter ;
  160 0000009C 780A            LDRB             R2, [R1]    ;
  161 0000009E F102 0201       ADD              R2, R2, #1  ;   green_counter++
                                                            
  162 000000A2 700A            STRB             R2, [R1]    ;
  163 000000A4 2A0A            CMP              R2, #10     ;
  164 000000A6 D104            BNE              Breathe_status ;  if(green_coun
                                                            ter == 3) toggle Gr
                                                            een LED
  165 000000A8 F000 F8D3       BL               Toggle_Green ;
  166 000000AC F04F 0200       MOV              R2, #0      ;
  167 000000B0 700A            STRB             R2, [R1]    ;
  168 000000B2         
  169 000000B2         
  170 000000B2         ; If the button is pushed, Start breathing
  171 000000B2         Breathe_status
  172 000000B2 497C            LDR              R1, =GPIO_PORTF_DATA_R ;
  173 000000B4 680A            LDR              R2, [R1]    ;
  174 000000B6 F002 0210       AND              R2, R2, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  175 000000BA 2A00            CMP              R2, #0x00   ;
  176 000000BC D101            BNE              Blink_ifPushed ;  If SW1 is pus
                                                            hed, start the brea
                                                            thing
  177 000000BE F000 F835       BL               Breathe_Start ;
  178 000000C2         
  179 000000C2         Blink_ifPushed



ARM Macro Assembler    Page 8 


  180 000000C2 4979            LDR              R1, =GPIO_PORTE_DATA_R ;
  181 000000C4 4A79            LDR              R2, =prev_button_state ;
  182 000000C6 7812            LDRB             R2, [R2]    ;
  183 000000C8 680B            LDR              R3, [R1]    ;    <- R3 holds th
                                                            e data from the Por
                                                            tE data register
  184 000000CA F003 0302       AND              R3, R3, #0x02 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  185 000000CE 4293            CMP              R3, R2      ;     <- Check if t
                                                            he button is in the
                                                             same state as befo
                                                            re 
  186 000000D0 D01A            BEQ              Blink       ;
  187 000000D2 4A76            LDR              R2, =prev_button_state ;
  188 000000D4 7013            STRB             R3, [R2]    ;
  189 000000D6         ; If the button is pushed, set PE4 to 1
  190 000000D6 2B00            CMP              R3, #0x00   ;   If the button i
                                                            s pushed
  191 000000D8 D100            BNE              Blink_incrementDuty ;
  192 000000DA E015            B                Blink       ;
  193 000000DC         Blink_incrementDuty
  194 000000DC         ; Incrementing the duty time
  195 000000DC 4A6D            LDR              R2, =delay_inc ;
  196 000000DE 6812            LDR              R2, [R2]    ;    
  197 000000E0 496D            LDR              R1, =delay_off ;   
  198 000000E2 680B            LDR              R3, [R1]    ;    
  199 000000E4 EBA3 0302       SUB              R3, R3, R2  ;    Decrement the 
                                                            off time
  200 000000E8 600B            STR              R3, [R1]    ;
  201 000000EA 496C            LDR              R1, =delay_on ;
  202 000000EC 680B            LDR              R3, [R1]    ;
  203 000000EE 4413            ADD              R3, R3, R2  ;    Increment the 
                                                            on time
  204 000000F0 600B            STR              R3, [R1]    ;
  205 000000F2         
  206 000000F2 4969            LDR              R1, =delay_off ;
  207 000000F4 680A            LDR              R2, [R1]    ;
  208 000000F6 2A00            CMP              R2, #0      ;
  209 000000F8 D506            BPL              Blink       ;    If the the off
                                                             time is < 0 (off <
                                                             0%, on > 100%), re
                                                            set the values to o
                                                            ff = 100%, on = 0%
  210 000000FA 4A65            LDR              R2, =MAX_DELAY ;
  211 000000FC 4966            LDR              R1, =delay_off ;
  212 000000FE 600A            STR              R2, [R1]    ;
  213 00000100 4966            LDR              R1, =delay_on ;
  214 00000102 F04F 0200       MOV              R2, #0      ;     Reset the on 
                                                            time to 0 (light is
                                                             always off)
  215 00000106 600A            STR              R2, [R1]    ;
  216 00000108         
  217 00000108         Blink
  218 00000108         ; Turn off the light and wait
  219 00000108 4967            LDR              R1, =GPIO_PORTE_DATA_R ;
  220 0000010A 680A            LDR              R2, [R1]    ;
  221 0000010C F022 0201       BIC              R2, #0x01   ;
  222 00000110 600A            STR              R2, [R1]    ;



ARM Macro Assembler    Page 9 


  223 00000112 4A61            LDR              R2, =delay_off ;
  224 00000114 6810            LDR              R0, [R2]    ;
  225 00000116 F000 F848       BL               delay       ;   Delay the progr
                                                            am for a amount of 
                                                            time specified in R
                                                            7
  226 0000011A         ; Turn on the light and wait
  227 0000011A 680A            LDR              R2, [R1]    ;
  228 0000011C F042 0201       ORR              R2, #0x01   ;  
  229 00000120 600A            STR              R2, [R1]    ;
  230 00000122 4A5E            LDR              R2, =delay_on ;
  231 00000124 6810            LDR              R0, [R2]    ;
  232 00000126 F000 F840       BL               delay       ;
  233 0000012A         
  234 0000012A E7B6            B                main_loop
  235 0000012C         ;-------------------------------------------------------
                       ----------------------------------------
  236 0000012C         Breathe_Start
  237 0000012C         ; a subroutine that handles all the breathing functional
                       ity by completly reworking everything
  238 0000012C B4FF            PUSH             {R0-R7}     ;
  239 0000012E E92D 4100       PUSH             {R8, LR}    ;
  240 00000132         
  241 00000132         ; Setting up variables
  242 00000132 485D            LDR              R0, =GPIO_PORTE_DATA_R ;
  243 00000134 F8DF 916C       LDR              R9, =GPIO_PORTF_DATA_R ;
  244 00000138 F44F 42BC       LDR              R2, =BREATHE_DELAY_MAX ;
  245 0000013C F44F 73FA       MOV              R3, #500    ;
  246 00000140 FBB2 F4F3       UDIV             R4, R2, R3  ;   The increments 
                                                            of the delay
  247 00000144 F102 0500       ADD              R5, R2, #0  ;    Default: off f
                                                            or 4/5 of 80Hz
  248 00000148 F04F 0600       MOV              R6, #0      ;    Default: on fo
                                                            r 1/5 of 80Hz
  249 0000014C F102 0700       ADD              R7, R2, #0  ;
  250 00000150         
  251 00000150         Breathe_loop
  252 00000150         ; The main loop engine
  253 00000150 F8D9 1000       LDR              R1, [R9]    ;    <- R1 holds th
                                                            e data from the dat
                                                            a register
  254 00000154         Breathe_ifPushed
  255 00000154         ; If the button is pushed, Stop breathing
  256 00000154 F001 0310       AND              R3, R1, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  257 00000158 2B10            CMP              R3, #0x10   ;
  258 0000015A D100            BNE              Breathe_incrementDuty ;
  259 0000015C E021            B                Breathe_Stop ;
  260 0000015E         
  261 0000015E         Breathe_incrementDuty
  262 0000015E         ; Incrementing the duty time
  263 0000015E EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  264 00000162 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  265 00000164 2D00            CMP              R5, #0      ;
  266 00000166 D402            BMI              Breathe_Verse ;
  267 00000168 D001            BEQ              Breathe_Verse ;     Check if we



ARM Macro Assembler    Page 10 


                                                            've stopped or froz
                                                            e the delay of the 
                                                            light (either R5 or
                                                             R6 reach zero)
  268 0000016A 2E00            CMP              R6, #0      ;
  269 0000016C D506            BPL              Breathe     ;
  270 0000016E         Breathe_Verse
  271 0000016E F04F 33FF       MOV              R3, #-1     ;
  272 00000172 FB04 F403       MUL              R4, R4, R3  ;    Once we reach 
                                                            a maximum, down/up 
                                                            or up depending on 
                                                            the scenario
  273 00000176 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  274 0000017A 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  275 0000017C         Breathe
  276 0000017C         ; Turn off the light and wait
  277 0000017C F021 0101       BIC              R1, #0x01   ;  
  278 00000180 6001            STR              R1, [R0]    ;
  279 00000182 B403            PUSH             {R0, R1}    ;
  280 00000184 F105 0000       ADD              R0, R5, #0  ;
  281 00000188 F000 F80F       BL               delay       ;     Delay the pro
                                                            gram for a amount o
                                                            f time specified in
                                                             R7
  282 0000018C BC03            POP              {R0, R1}    ;
  283 0000018E         ; Turn on the light and wait
  284 0000018E F041 0101       ORR              R1, #0x01   ;  
  285 00000192 6001            STR              R1, [R0]    ;
  286 00000194 B403            PUSH             {R0, R1}    ;
  287 00000196 F106 0000       ADD              R0, R6, #0  ;
  288 0000019A F000 F806       BL               delay       ;
  289 0000019E BC03            POP              {R0, R1}    ;
  290 000001A0         
  291 000001A0 E7D6            B                Breathe_loop
  292 000001A2         
  293 000001A2         Breathe_Stop
  294 000001A2 E8BD 4100       POP              {R8,LR}     ;
  295 000001A6 BCFF            POP              {R0-R7}     ;
  296 000001A8         
  297 000001A8 4770            BX               LR          ;
  298 000001AA         ;-------------------------------------------------------
                       ----------------------------------------
  299 000001AA         delay
  300 000001AA         ; a subroutine that loops using the value at R0
  301 000001AA B403            PUSH             {R0, R1}    ;
  302 000001AC F04F 0100       MOV              R1, #0      ;
  303 000001B0         delayLoop
  304 000001B0 4288            CMP              R0, R1      ;   Loop until temp
                                                            orary value R1 reac
                                                            hes R0
  305 000001B2 D002            BEQ              delayDone   ;
  306 000001B4 F101 0101       ADD              R1, R1, #1  ; 
  307 000001B8 E7FA            B                delayLoop   ;
  308 000001BA         delayDone
  309 000001BA BC03            POP              {R0, R1}    ;
  310 000001BC 4770            BX               LR          ;
  311 000001BE         



ARM Macro Assembler    Page 11 


  312 000001BE         ;-------DEBUG_Init--------------------------------------
                       ----------------------------------------
  313 000001BE         ;Initiliazing Debug Dump
  314 000001BE         Debug_Init
  315 000001BE F8DF A0F0       LDR              R10, =data_capture
  316 000001C2 F8DF B0F0       LDR              R11, =time_capture 
                                                            ;  Created pointers
                                                            
  317 000001C6         
  318 000001C6 B403            PUSH             {R0, R1}
  319 000001C8 B40C            PUSH             {R2, R3}
  320 000001CA F04F 0008       MOV              R0, #0x08   ;  8 bits in data_c
                                                            apture
  321 000001CE F04F 0132       MOV              R1, #50     ;
  322 000001D2         
  323 000001D2         setting_data_capture
  324 000001D2 F1A1 0101       SUB              R1,R1, #0x01
  325 000001D6 F04F 02FF       MOV              R2, #0xFF   ;
  326 000001DA F88A 2000       STRB             R2, [R10]
  327 000001DE 4482            ADD              R10, R10, R0
  328 000001E0 2900            CMP              R1, #0x0    ;
  329 000001E2 D1F6            BNE              setting_data_capture
  330 000001E4         
  331 000001E4 F04F 0132       MOV              R1, #50     ;
  332 000001E8 F04F 0204       MOV              R2, #0x04   ;
  333 000001EC FB00 F002       MUL              R0,R0, R2   ;
  334 000001F0         setting_time_capture
  335 000001F0 F04F 0201       MOV              R2, #0x01   ;
  336 000001F4 EBA1 0102       SUB              R1,R1, R2   ;
  337 000001F8 F04F 32FF       MOV              R2, #0xFFFFFFFF ;
  338 000001FC F8CA 2000       STR              R2, [R10]
  339 00000200 4482            ADD              R10, R10, R0
  340 00000202 2900            CMP              R1, #0x0    ;
  341 00000204 D1F4            BNE              setting_time_capture
  342 00000206         
  343 00000206 F8DF A0A8       LDR              R10, =data_capture
  344 0000020A F8DF B0A8       LDR              R11,=time_capture
  345 0000020E BC0C            POP              {R2, R3}
  346 00000210 BC03            POP              {R0, R1}
  347 00000212 4770            BX               LR
  348 00000214         
  349 00000214         ;-------DEBUG_CAPTURE-----------------------------------
                       ----------------------------------------
  350 00000214         ;saves one data point
  351 00000214         Debug_Capture
  352 00000214 B403            PUSH             {R0,R1}
  353 00000216 4828            LDR              R0 , =NEntries
  354 00000218 6800            LDR              R0, [R0]
  355 0000021A 2832            CMP              R0 , #50
  356 0000021C D017            BEQ              DONE_C
  357 0000021E 4822            LDR              R0, =GPIO_PORTE_DATA_R
  358 00000220 F000 0002       AND              R0, R0, #0x02 ;  Capturing Pins
                                                             E0 and E1
  359 00000224 EA4F 00D0       LSR              R0, R0, #0x03 ;
  360 00000228 491F            LDR              R1, =GPIO_PORTE_DATA_R
  361 0000022A F001 0101       AND              R1,R1,#0x01 ;
  362 0000022E EA00 0001       AND              R0,R0,R1    ;
  363 00000232 4922            LDR              R1, =NVIC_ST_CURRENT_R 
                                                            ; Capturing Time



ARM Macro Assembler    Page 12 


  364 00000234 F88A 0000       STRB             R0, [R10]   ;   Finished Storin
                                                            g Data
  365 00000238         
  366 00000238         
  367 00000238         
  368 00000238 F8CB 1000       STR              R1, [R11]
  369 0000023C F10A 0A01       ADD              R10, R10, #0x01
  370 00000240 F10B 0B04       ADD              R11, R11, #0x04
  371 00000244 481C            LDR              R0, =NEntries
  372 00000246 6801            LDR              R1, [R0]
  373 00000248 F101 0101       ADD              R1,R1, #0x01
  374 0000024C 6001            STR              R1, [R0]
  375 0000024E         
  376 0000024E BC03    DONE_C  POP              {R0,R1}
  377 00000250 4770            BX               LR          ;
  378 00000252         
  379 00000252         ;-------Toggle Green LED (PF2)--------------------------
                       ----------------------------------------
  380 00000252         ;Toggles the Green LED on and off (PF2)
  381 00000252         Toggle_Green
  382 00000252 B403            PUSH             {R0, R1}    ;
  383 00000254 4813            LDR              R0, =GPIO_PORTF_DATA_R ;
  384 00000256 6801            LDR              R1, [R0]    ;
  385 00000258 F081 0104       EOR              R1, #0x04   ;
  386 0000025C 6001            STR              R1, [R0]    ;
  387 0000025E BC03            POP              {R0, R1}    ;
  388 00000260 4770            BX               LR          ;
  389 00000262         
  390 00000262         ;-------------------------------------------------------
                       ----------------------------------------
  391 00000262 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  392 00000264                 END                          ; end of file
              400FE608 
              40024400 
              40024420 
              4002451C 
              40025520 
              4C4F434B 
              40025524 
              40025400 
              40025420 
              40025510 
              4002551C 
              001864A8 
              00000000 
              00000000 
              00000000 
              00000000 
              400253FC 
              400243FC 
              00000000 
              00000000 
              00000000 
              00000000 
              E000E018 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In



ARM Macro Assembler    Page 13 


c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 65 in file main.s
   Uses
      None
Comment: DATA unused
NEntries 00000108

Symbol: NEntries
   Definitions
      At line 76 in file main.s
   Uses
      At line 353 in file main.s
      At line 371 in file main.s

data_capture 0000000E

Symbol: data_capture
   Definitions
      At line 74 in file main.s
   Uses
      At line 315 in file main.s
      At line 343 in file main.s

delay_inc 00000000

Symbol: delay_inc
   Definitions
      At line 68 in file main.s
   Uses
      At line 135 in file main.s
      At line 138 in file main.s
      At line 145 in file main.s
      At line 195 in file main.s

delay_off 00000004

Symbol: delay_off
   Definitions
      At line 69 in file main.s
   Uses
      At line 142 in file main.s
      At line 197 in file main.s
      At line 206 in file main.s
      At line 211 in file main.s
      At line 223 in file main.s

delay_on 00000008

Symbol: delay_on
   Definitions
      At line 70 in file main.s
   Uses
      At line 147 in file main.s
      At line 201 in file main.s
      At line 213 in file main.s
      At line 230 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


green_counter 0000000D

Symbol: green_counter
   Definitions
      At line 72 in file main.s
   Uses
      At line 150 in file main.s
      At line 159 in file main.s

prev_button_state 0000000C

Symbol: prev_button_state
   Definitions
      At line 71 in file main.s
   Uses
      At line 181 in file main.s
      At line 187 in file main.s

time_capture 00000040

Symbol: time_capture
   Definitions
      At line 75 in file main.s
   Uses
      At line 316 in file main.s
      At line 344 in file main.s

9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 77 in file main.s
   Uses
      None
Comment: .text unused
Blink 00000108

Symbol: Blink
   Definitions
      At line 217 in file main.s
   Uses
      At line 186 in file main.s
      At line 192 in file main.s
      At line 209 in file main.s

Blink_ifPushed 000000C2

Symbol: Blink_ifPushed
   Definitions
      At line 179 in file main.s
   Uses
      At line 176 in file main.s
Comment: Blink_ifPushed used once
Blink_incrementDuty 000000DC

Symbol: Blink_incrementDuty
   Definitions
      At line 193 in file main.s
   Uses
      At line 191 in file main.s
Comment: Blink_incrementDuty used once
Breathe 0000017C

Symbol: Breathe
   Definitions
      At line 275 in file main.s
   Uses
      At line 269 in file main.s
Comment: Breathe used once
Breathe_Start 0000012C

Symbol: Breathe_Start
   Definitions
      At line 236 in file main.s
   Uses
      At line 177 in file main.s
Comment: Breathe_Start used once
Breathe_Stop 000001A2

Symbol: Breathe_Stop
   Definitions
      At line 293 in file main.s
   Uses
      At line 259 in file main.s
Comment: Breathe_Stop used once
Breathe_Verse 0000016E



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Breathe_Verse
   Definitions
      At line 270 in file main.s
   Uses
      At line 266 in file main.s
      At line 267 in file main.s

Breathe_ifPushed 00000154

Symbol: Breathe_ifPushed
   Definitions
      At line 254 in file main.s
   Uses
      None
Comment: Breathe_ifPushed unused
Breathe_incrementDuty 0000015E

Symbol: Breathe_incrementDuty
   Definitions
      At line 261 in file main.s
   Uses
      At line 258 in file main.s
Comment: Breathe_incrementDuty used once
Breathe_loop 00000150

Symbol: Breathe_loop
   Definitions
      At line 251 in file main.s
   Uses
      At line 291 in file main.s
Comment: Breathe_loop used once
Breathe_status 000000B2

Symbol: Breathe_status
   Definitions
      At line 171 in file main.s
   Uses
      At line 164 in file main.s
Comment: Breathe_status used once
Configure 0000006A

Symbol: Configure
   Definitions
      At line 131 in file main.s
   Uses
      None
Comment: Configure unused
DONE_C 0000024E

Symbol: DONE_C
   Definitions
      At line 376 in file main.s
   Uses
      At line 356 in file main.s
Comment: DONE_C used once
Debug_Capture 00000214

Symbol: Debug_Capture



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 351 in file main.s
   Uses
      None
Comment: Debug_Capture unused
Debug_Init 000001BE

Symbol: Debug_Init
   Definitions
      At line 314 in file main.s
   Uses
      At line 87 in file main.s
Comment: Debug_Init used once
Start 00000000

Symbol: Start
   Definitions
      At line 84 in file main.s
   Uses
      At line 79 in file main.s
Comment: Start used once
Toggle_Green 00000252

Symbol: Toggle_Green
   Definitions
      At line 381 in file main.s
   Uses
      At line 165 in file main.s
Comment: Toggle_Green used once
delay 000001AA

Symbol: delay
   Definitions
      At line 299 in file main.s
   Uses
      At line 225 in file main.s
      At line 232 in file main.s
      At line 281 in file main.s
      At line 288 in file main.s

delayDone 000001BA

Symbol: delayDone
   Definitions
      At line 308 in file main.s
   Uses
      At line 305 in file main.s
Comment: delayDone used once
delayLoop 000001B0

Symbol: delayLoop
   Definitions
      At line 303 in file main.s
   Uses
      At line 307 in file main.s
Comment: delayLoop used once
main_loop 0000009A

Symbol: main_loop



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 156 in file main.s
   Uses
      At line 234 in file main.s
Comment: main_loop used once
setting_data_capture 000001D2

Symbol: setting_data_capture
   Definitions
      At line 323 in file main.s
   Uses
      At line 329 in file main.s
Comment: setting_data_capture used once
setting_time_capture 000001F0

Symbol: setting_time_capture
   Definitions
      At line 334 in file main.s
   Uses
      At line 341 in file main.s
Comment: setting_time_capture used once
24 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BREATHE_DELAY_MAX 00005E00

Symbol: BREATHE_DELAY_MAX
   Definitions
      At line 58 in file main.s
   Uses
      At line 244 in file main.s
Comment: BREATHE_DELAY_MAX used once
GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 43 in file main.s
   Uses
      At line 113 in file main.s
Comment: GPIO_LOCK_KEY used once
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 103 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 180 in file main.s
      At line 219 in file main.s
      At line 242 in file main.s
      At line 357 in file main.s
      At line 360 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 107 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 98 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 121 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 42 in file main.s
   Uses
      At line 115 in file main.s
Comment: GPIO_PORTF_CR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 172 in file main.s
      At line 243 in file main.s
      At line 383 in file main.s

GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 127 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 118 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 41 in file main.s
   Uses
      At line 112 in file main.s
Comment: GPIO_PORTF_LOCK_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 124 in file main.s
Comment: GPIO_PORTF_PUR_R used once
MAX_DELAY 001864A8

Symbol: MAX_DELAY
   Definitions
      At line 57 in file main.s
   Uses
      At line 132 in file main.s
      At line 210 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


NVIC_ST_CTRL_CLK_SRC 00000004

Symbol: NVIC_ST_CTRL_CLK_SRC
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_CLK_SRC unused
NVIC_ST_CTRL_COUNT 00010000

Symbol: NVIC_ST_CTRL_COUNT
   Definitions
      At line 50 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_COUNT unused
NVIC_ST_CTRL_ENABLE 00000001

Symbol: NVIC_ST_CTRL_ENABLE
   Definitions
      At line 53 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_ENABLE unused
NVIC_ST_CTRL_INTEN 00000002

Symbol: NVIC_ST_CTRL_INTEN
   Definitions
      At line 52 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_INTEN unused
NVIC_ST_CTRL_R E000E010

Symbol: NVIC_ST_CTRL_R
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_R unused
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 48 in file main.s
   Uses
      At line 363 in file main.s
Comment: NVIC_ST_CURRENT_R used once
NVIC_ST_RELOAD_M 00FFFFFF

Symbol: NVIC_ST_RELOAD_M
   Definitions
      At line 54 in file main.s
   Uses
      None
Comment: NVIC_ST_RELOAD_M unused
NVIC_ST_RELOAD_R E000E014




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

Symbol: NVIC_ST_RELOAD_R
   Definitions
      At line 47 in file main.s
   Uses
      None
Comment: NVIC_ST_RELOAD_R unused
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 44 in file main.s
   Uses
      At line 91 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 61 in file main.s
   Uses
      At line 88 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 60 in file main.s
   Uses
      At line 86 in file main.s
Comment: TExaS_Init used once
2 symbols
391 symbols in table
