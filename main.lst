


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Faiyaz Mostofa & Zaine
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/14/2018
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ; Hardware connections (External: One button and one LED
                       )
    8 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
    9 00000000         ;  PE0 is LED output (1 activates external LED on protob
                       oard)
   10 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal)
   11 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   12 00000000         ; Overall functionality of this system is to operate lik
                       e this
   13 00000000         ;   1) Make PE0 an output and make PE1 and PF4 inputs.
   14 00000000         ;   2) The system starts with the the LED toggling at 8H
                       z,
   15 00000000         ;      which is 8 times per second with a duty-cycle of 
                       20%.
   16 00000000         ;      Therefore, the LED is ON for (0.2*1/8)th of a sec
                       ond
   17 00000000         ;      and OFF for (0.8*1/8)th of a second.
   18 00000000         ;   3) When the button on (PE1) is pressed-and-released 
                       increase
   19 00000000         ;      the duty cycle by 20% (modulo 100%). Therefore fo
                       r each
   20 00000000         ;      press-and-release the duty cycle changes from 20%
                        to 40% to 60%
   21 00000000         ;      to 80% to 100%(ON) to 0%(Off) to 20% to 40% so on
                       
   22 00000000         ;   4) Implement a "breathing LED" when SW1 (PF4) on the
                        Launchpad is pressed:
   23 00000000         ;      a) Be creative and play around with what "breathi
                       ng" means.
   24 00000000         ;         An example of "breathing" is most computers po
                       wer LED in sleep mode
   25 00000000         ;         (e.g., https://www.youtube.com/watch?v=ZT6siXy
                       IjvQ).
   26 00000000         ;      b) When (PF4) is released while in breathing mode
                       , resume blinking at 8Hz.
   27 00000000         ;         The duty cycle can either match the most recen
                       t duty-
   28 00000000         ;         cycle or reset to 20%.
   29 00000000         ;      TIP: debugging the breathing LED algorithm and fe
                       el on the simulator is impossible.
   30 00000000         ; PortE device registers
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 



ARM Macro Assembler    Page 2 


                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         ; PortF device registers
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   42 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   43 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   44 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   45 00000000         ; System Clock reigsters
   46 00000000 E000E010 
                       NVIC_ST_CTRL_R
                               EQU              0xE000E010
   47 00000000 E000E014 
                       NVIC_ST_RELOAD_R
                               EQU              0xE000E014
   48 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   49 00000000         
   50 00000000 00010000 
                       NVIC_ST_CTRL_COUNT
                               EQU              0x00010000  ; Count flag
   51 00000000 00000004 
                       NVIC_ST_CTRL_CLK_SRC
                               EQU              0x00000004  ; Clock Source
   52 00000000 00000002 
                       NVIC_ST_CTRL_INTEN
                               EQU              0x00000002  ; Interrupt enable
   53 00000000 00000001 
                       NVIC_ST_CTRL_ENABLE
                               EQU              0x00000001  ; Counter mode
   54 00000000 00FFFFFF 
                       NVIC_ST_RELOAD_M
                               EQU              0x00FFFFFF  ; Counter load valu
                                                            e
   55 00000000         



ARM Macro Assembler    Page 3 


   56 00000000         ;Variables that hold the maximum values 
   57 00000000 0000007D 
                       MAX_DELAY
                               EQU              0x7D        ; 0x1864A8 
   58 00000000         ; The interval size of the delays
   59 00000000 00005E00 
                       BREATHE_DELAY_MAX
                               EQU              0x5E00      ; The delay require
                                                            d
   60 00000000         
   61 00000000                 IMPORT           TExaS_Init
   62 00000000                 IMPORT           SysTick_Init
   63 00000000                 IMPORT           SysTick_Wait
   64 00000000         
   65 00000000                 THUMB
   66 00000000         ;------------Global Variables---------------------------
                       ----------------------------------------
   67 00000000                 AREA             DATA, ALIGN=2
   68 00000000         
   69 00000000         ;Blinking variables
   70 00000000 00 00 00 
              00       delay_inc
                               SPACE            4           ; how to increment 
                                                            the delays when we 
                                                            need to change them
                                                             (1/5 of MAX_DELAY)
                                                            
   71 00000004 00 00 00 
              00       delay_off
                               SPACE            4           ; how long the LED 
                                                            will stay off (in c
                                                            ycles)
   72 00000008 00 00 00 
              00       delay_on
                               SPACE            4           ; how long the LED 
                                                            will stay on (in cy
                                                            cles)
   73 0000000C 00      prev_button_state
                               SPACE            1           ; captures whether 
                                                            a button has been r
                                                            eleased or pushed
   74 0000000D 00      green_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and toggles th
                                                            e blue LED after a 
                                                            certain time is met
                                                            .
   75 0000000E         
   76 0000000E         ;Debuggin variables
   77 0000000E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    data_capture
                               SPACE            50          ; Array of 50 8-byt
                                                            e numbers
   78 00000040 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    time_capture
                               SPACE            200         ; Array of 50 32-by
                                                            te numbers
   79 00000108 00      debug_capture_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and captures d
                                                            ebugging data after
                                                             a certain amount o
                                                            f loops
   80 00000109         
   81 00000109 00      NEntries
                               SPACE            1           ; Number of entries
                                                             in either array 
   82 0000010A         
   83 0000010A                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   84 00000000                 THUMB
   85 00000000                 EXPORT           Start
   86 00000000         
   87 00000000         ;R10 = data_capture pointer
   88 00000000         ;R11 = time_capture pointer
   89 00000000         ;---------Main Code-------------------------------------
                       ----------------------------------------
   90 00000000         Start
   91 00000000         ; TExaS_Init sets bus clock at 80 MHz
   92 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   93 00000004 F000 F8FC       BL               Debug_Init  ; Initializes the D
                                                            ebugging Tools
   94 00000008 F7FF FFFE       BL               SysTick_Init ; Initializes the 
                                                            SysTick
   95 0000000C         
   96 0000000C         ; Port Initialization
   97 0000000C 48AA            LDR              R0, =SYSCTL_RCGCGPIO_R ;
   98 0000000E 6801            LDR              R1, [R0]    ;
   99 00000010 F041 0130       ORR              R1, R1, #0x30 ;   Start up Port
                                                             F and Port E
  100 00000014 6001            STR              R1, [R0]    ;
  101 00000016 BF00            NOP                          ;
  102 00000018 BF00            NOP                          ;
  103 0000001A         ; Configure Port E



ARM Macro Assembler    Page 6 


  104 0000001A 48A8            LDR              R0, =GPIO_PORTE_DIR_R ;
  105 0000001C 6801            LDR              R1, [R0]    ;
  106 0000001E F041 0101       ORR              R1, R1, #0x01 ;    PE0 is set t
                                                            o output (LED)
  107 00000022 F021 0112       BIC              R1, R1, #0x12 ;    PE1,4 are se
                                                            t to input (buttons
                                                            )
  108 00000026 6001            STR              R1, [R0]    ;
  109 00000028 48A5            LDR              R0, =GPIO_PORTE_AFSEL_R ;
  110 0000002A 6801            LDR              R1, [R0]    ;
  111 0000002C F04F 0100       MOV              R1, #0      ;      Disables the
                                                             "alternate functio
                                                            ns" in the port
  112 00000030 6001            STR              R1, [R0]    ;
  113 00000032 48A4            LDR              R0, =GPIO_PORTE_DEN_R ;
  114 00000034 6801            LDR              R1, [R0]    ;
  115 00000036 F04F 01FF       MOV              R1, #0xFF   ;     1 means enabl
                                                            e digital I/O
  116 0000003A 6001            STR              R1, [R0]    ;
  117 0000003C         ; Configure Port F
  118 0000003C 49A2            LDR              R1, =GPIO_PORTF_LOCK_R ;  2) un
                                                            lock the lock regis
                                                            ter
  119 0000003E 48A3            LDR              R0, =GPIO_LOCK_KEY ;   unlock G
                                                            PIO Port F Commit R
                                                            egister
  120 00000040 6008            STR              R0, [R1]    ;
  121 00000042 49A3            LDR              R1, =GPIO_PORTF_CR_R ;    enabl
                                                            e commit for Port F
                                                            
  122 00000044 F04F 00FF       MOV              R0, #0xFF   ;               1 m
                                                            eans allow access
  123 00000048 6008            STR              R0, [R1]    ;
  124 0000004A 49A2            LDR              R1, =GPIO_PORTF_DIR_R ;   5) se
                                                            t direction registe
                                                            r
  125 0000004C F04F 000E       MOV              R0,#0x0E    ;
  126 00000050 6008            STR              R0, [R1]    ;
  127 00000052 49A1            LDR              R1, =GPIO_PORTF_AFSEL_R ; 6) re
                                                            gular port function
                                                            
  128 00000054 F04F 0000       MOV              R0, #0      ;                  
                                                              0 means disable a
                                                            lternate function
  129 00000058 6008            STR              R0, [R1]    ;
  130 0000005A 49A0            LDR              R1, =GPIO_PORTF_PUR_R ;     pul
                                                            l-up resistors for 
                                                            PF4,PF0
  131 0000005C F04F 0011       MOV              R0, #0x11   ;                 1
                                                            )enable for negativ
                                                            e logic
  132 00000060 6008            STR              R0, [R1]    ;
  133 00000062 499F            LDR              R1, =GPIO_PORTF_DEN_R ;     7) 
                                                            enable Port F digit
                                                            al port
  134 00000064 F04F 00FF       MOV              R0, #0xFF   ;                 1
                                                             means enable digit
                                                            al I/O
  135 00000068 6008            STR              R0, [R1]    ;



ARM Macro Assembler    Page 7 


  136 0000006A         ; Setting up variables
  137 0000006A         Configure
  138 0000006A F04F 017D       LDR              R1, =MAX_DELAY ;  
  139 0000006E F04F 0205       MOV              R2, #5      ;     
  140 00000072 FBB1 F2F2       UDIV             R2, R1, R2  ;  split the max de
                                                            lay into 5 equal se
                                                            ctions
  141 00000076 499B            LDR              R1, =delay_inc ;
  142 00000078 600A            STR              R2, [R1]    ;   delay_inc = (MA
                                                            X_DELAY / 5)
  143 0000007A         
  144 0000007A 499A            LDR              R1, =delay_inc ;
  145 0000007C 680A            LDR              R2, [R1]    ;
  146 0000007E F04F 0304       MOV              R3, #4      ;
  147 00000082 FB02 F203       MUL              R2, R2, R3  ; 
  148 00000086 4998            LDR              R1, =delay_off ; 
  149 00000088 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_off starts @ 4/
                                                            5 of the MAX_DELAY
  150 0000008A         
  151 0000008A 4996            LDR              R1, =delay_inc ;
  152 0000008C 680A            LDR              R2, [R1]    ;
  153 0000008E 4997            LDR              R1, =delay_on ;
  154 00000090 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_on on starts @ 
                                                            1/5 of the MAX_DELA
                                                            Y
  155 00000092         
  156 00000092 4997            LDR              R1, =green_counter ;
  157 00000094 F04F 0200       MOV              R2, #0      ;
  158 00000098 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he green_counter to
                                                             0
  159 0000009A 4996            LDR              R1, =debug_capture_counter ;
  160 0000009C F04F 0200       MOV              R2, #0      ;
  161 000000A0 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he debug_counter to
                                                             0
  162 000000A2         
  163 000000A2 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  164 000000A4         
  165 000000A4         ; The main loop engine
  166 000000A4         main_loop
  167 000000A4         
  168 000000A4 F000 F87A       BL               Check_Debug ; ; Check if we nee
                                                            d to record debuggi
                                                            ng statistics
  169 000000A8 F000 F88A       BL               Check_Green ; Check whether to 
                                                            toggle the green LE
                                                            D on or not
  170 000000AC F000 F89A       BL               Check_Breathe ; Check if whethe
                                                            r we need to make t
                                                            he LED Breathe
  171 000000B0         
  172 000000B0         ;If a button @ PE1 is pushed, increment the blinking pat
                       tern
  173 000000B0         Blink_ifPushed



ARM Macro Assembler    Page 8 


  174 000000B0 4991            LDR              R1, =GPIO_PORTE_DATA_R ;
  175 000000B2 4A92            LDR              R2, =prev_button_state ;
  176 000000B4 7812            LDRB             R2, [R2]    ;
  177 000000B6 680B            LDR              R3, [R1]    ;    <- R3 holds th
                                                            e data from the Por
                                                            tE data register
  178 000000B8 F003 0302       AND              R3, R3, #0x02 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  179 000000BC 4293            CMP              R3, R2      ;     <- Check if t
                                                            he button is in the
                                                             same state as befo
                                                            re 
  180 000000BE D01B            BEQ              Blink       ;
  181 000000C0 4A8E            LDR              R2, =prev_button_state ;
  182 000000C2 7013            STRB             R3, [R2]    ;
  183 000000C4         ; If the button is pushed, set PE4 to 1
  184 000000C4 2B00            CMP              R3, #0x00   ;   If the button i
                                                            s pushed
  185 000000C6 D100            BNE              Blink_incrementDuty ;
  186 000000C8 E016            B                Blink       ;
  187 000000CA         Blink_incrementDuty
  188 000000CA         ; Incrementing the duty time
  189 000000CA 4A86            LDR              R2, =delay_inc ;
  190 000000CC 6812            LDR              R2, [R2]    ;    
  191 000000CE 4986            LDR              R1, =delay_off ;   
  192 000000D0 680B            LDR              R3, [R1]    ;    
  193 000000D2 EBA3 0302       SUB              R3, R3, R2  ;    Decrement the 
                                                            off time
  194 000000D6 600B            STR              R3, [R1]    ;
  195 000000D8 4984            LDR              R1, =delay_on ;
  196 000000DA 680B            LDR              R3, [R1]    ;
  197 000000DC 4413            ADD              R3, R3, R2  ;    Increment the 
                                                            on time
  198 000000DE 600B            STR              R3, [R1]    ;
  199 000000E0         ;Check if the duty time needs to be reset (always on -> 
                       always off)
  200 000000E0 4981            LDR              R1, =delay_off ;
  201 000000E2 680A            LDR              R2, [R1]    ;
  202 000000E4 2A00            CMP              R2, #0      ;
  203 000000E6 D507            BPL              Blink       ;    If the the off
                                                             time is < 0 (off <
                                                             0%, on > 100%), re
                                                            set the values to o
                                                            ff = 100%, on = 0%
  204 000000E8 F04F 027D       LDR              R2, =MAX_DELAY ;
  205 000000EC 497E            LDR              R1, =delay_off ;
  206 000000EE 600A            STR              R2, [R1]    ;
  207 000000F0 497E            LDR              R1, =delay_on ;
  208 000000F2 F04F 0200       MOV              R2, #0      ;     Reset the on 
                                                            time to 0 (light is
                                                             always off)
  209 000000F6 600A            STR              R2, [R1]    ;
  210 000000F8         Blink
  211 000000F8         ; Turn off the light and wait
  212 000000F8 497F            LDR              R1, =GPIO_PORTE_DATA_R ;
  213 000000FA 680A            LDR              R2, [R1]    ;
  214 000000FC F022 0201       BIC              R2, #0x01   ;
  215 00000100 600A            STR              R2, [R1]    ;



ARM Macro Assembler    Page 9 


  216 00000102 4A79            LDR              R2, =delay_off ;
  217 00000104 6810            LDR              R0, [R2]    ;
  218 00000106 F7FF FFFE       BL               SysTick_Wait ;BL delay;   Delay
                                                             the program for a 
                                                            amount of time spec
                                                            ified in R0
  219 0000010A         ; Turn on the light and wait
  220 0000010A 497B            LDR              R1, =GPIO_PORTE_DATA_R ;
  221 0000010C 680A            LDR              R2, [R1]    ;
  222 0000010E F042 0201       ORR              R2, #0x01   ;  
  223 00000112 600A            STR              R2, [R1]    ;
  224 00000114 4A75            LDR              R2, =delay_on ;
  225 00000116 6810            LDR              R0, [R2]    ;
  226 00000118 F7FF FFFE       BL               SysTick_Wait ;BL delay
  227 0000011C         
  228 0000011C E7C2            B                main_loop
  229 0000011E         ;-------------------------------------------------------
                       ----------------------------------------
  230 0000011E         Breathe_Start
  231 0000011E         ; a subroutine that handles all the breathing functional
                       ity by completly reworking everything
  232 0000011E B4FF            PUSH             {R0-R7}     ;
  233 00000120 E92D 4100       PUSH             {R8, LR}    ;
  234 00000124         
  235 00000124         ; Setting up variables
  236 00000124 4874            LDR              R0, =GPIO_PORTE_DATA_R ;
  237 00000126 F8DF 91D8       LDR              R9, =GPIO_PORTF_DATA_R ;
  238 0000012A F44F 42BC       LDR              R2, =BREATHE_DELAY_MAX ;
  239 0000012E F44F 73FA       MOV              R3, #500    ;
  240 00000132 FBB2 F4F3       UDIV             R4, R2, R3  ;   The increments 
                                                            of the delay
  241 00000136 F102 0500       ADD              R5, R2, #0  ;    Default: off f
                                                            or 4/5 of 80Hz
  242 0000013A F04F 0600       MOV              R6, #0      ;     Default: on f
                                                            or 1/5 of 80Hz
  243 0000013E F102 0700       ADD              R7, R2, #0  ;
  244 00000142         
  245 00000142         Breathe_loop
  246 00000142 F8D9 1000       LDR              R1, [R9]    ;    <- R1 holds th
                                                            e data from the dat
                                                            a register
  247 00000146         Breathe_ifPushed
  248 00000146 F001 0310       AND              R3, R1, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  249 0000014A 2B10            CMP              R3, #0x10   ;    ; Keep Breathi
                                                            ng until the button
                                                             is released.
  250 0000014C D100            BNE              Breathe_incrementDuty ;
  251 0000014E E021            B                Breathe_Stop ;
  252 00000150         
  253 00000150         Breathe_incrementDuty
  254 00000150         ; Incrementing the duty time
  255 00000150 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  256 00000154 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  257 00000156 2D00            CMP              R5, #0      ;
  258 00000158 D402            BMI              Breathe_Verse ;



ARM Macro Assembler    Page 10 


  259 0000015A D001            BEQ              Breathe_Verse ;   Check if we'v
                                                            e stopped or froze 
                                                            the delay of the li
                                                            ght (either R5 or R
                                                            6 reach zero)
  260 0000015C 2E00            CMP              R6, #0      ;
  261 0000015E D506            BPL              Breathe     ;
  262 00000160         Breathe_Verse
  263 00000160 F04F 33FF       MOV              R3, #-1     ;
  264 00000164 FB04 F403       MUL              R4, R4, R3  ;    Once we reach 
                                                            a maximum, down/up 
                                                            or up depending on 
                                                            the scenario
  265 00000168 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  266 0000016C 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  267 0000016E         Breathe
  268 0000016E         ; Turn off the light and wait
  269 0000016E F021 0101       BIC              R1, #0x01   ;  
  270 00000172 6001            STR              R1, [R0]    ;
  271 00000174 B403            PUSH             {R0, R1}    ;
  272 00000176 F105 0000       ADD              R0, R5, #0  ;
  273 0000017A F000 F893       BL               delay       ;     Delay the pro
                                                            gram for a amount o
                                                            f time specified in
                                                             R7
  274 0000017E BC03            POP              {R0, R1}    ;
  275 00000180         ; Turn on the light and wait
  276 00000180 F041 0101       ORR              R1, #0x01   ;  
  277 00000184 6001            STR              R1, [R0]    ;
  278 00000186 B403            PUSH             {R0, R1}    ;
  279 00000188 F106 0000       ADD              R0, R6, #0  ;
  280 0000018C F000 F88A       BL               delay       ;
  281 00000190 BC03            POP              {R0, R1}    ;
  282 00000192         
  283 00000192 E7D6            B                Breathe_loop
  284 00000194         
  285 00000194         Breathe_Stop
  286 00000194 E8BD 4100       POP              {R8,LR}     ;
  287 00000198 BCFF            POP              {R0-R7}     ;
  288 0000019A         
  289 0000019A 4770            BX               LR          ;
  290 0000019C         
  291 0000019C         ;-------CHECK_debug-------------------------------------
                       ----------------------------------------
  292 0000019C         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  293 0000019C         Check_Debug
  294 0000019C B403            PUSH             {R0, R1}    ;
  295 0000019E B504            PUSH             {R2, LR}    ;
  296 000001A0 4954            LDR              R1, =debug_capture_counter ;
  297 000001A2 780A            LDRB             R2, [R1]    ; 
  298 000001A4 F102 0201       ADD              R2, R2, #1  ;   debug_capture_c
                                                            ounter++;
  299 000001A8 700A            STRB             R2, [R1]    ;
  300 000001AA 2A03            CMP              R2, #3      ;
  301 000001AC D104            BNE              Check_Debug_Leave ;
  302 000001AE F000 F852       BL               Debug_Capture ;



ARM Macro Assembler    Page 11 


  303 000001B2 F04F 0200       MOV              R2, #0      ;
  304 000001B6 700A            STRB             R2, [R1]    ;
  305 000001B8         Check_Debug_Leave
  306 000001B8 E8BD 4004       POP              {R2, LR}    ;
  307 000001BC BC03            POP              {R0, R1}    ;
  308 000001BE 4770            BX               LR          ;     if(debug_capt
                                                            ure_counter == 3) c
                                                            apture data
  309 000001C0         
  310 000001C0         ;-------CHECK_Green-------------------------------------
                       ----------------------------------------
  311 000001C0         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  312 000001C0         Check_Green
  313 000001C0 B403            PUSH             {R0, R1}    ;
  314 000001C2 B504            PUSH             {R2, LR}    ;
  315 000001C4 494A            LDR              R1, =green_counter ;
  316 000001C6 780A            LDRB             R2, [R1]    ;
  317 000001C8 F102 0201       ADD              R2, R2, #1  ;   green_counter++
                                                            
  318 000001CC 700A            STRB             R2, [R1]    ;
  319 000001CE 2A03            CMP              R2, #3      ;
  320 000001D0 D104            BNE              Check_Green_Leave ; if(green_co
                                                            unter == 3) toggle 
                                                            Green LED
  321 000001D2 F000 F85F       BL               Toggle_Green ;
  322 000001D6 F04F 0200       MOV              R2, #0      ;
  323 000001DA 700A            STRB             R2, [R1]    ;
  324 000001DC         Check_Green_Leave
  325 000001DC E8BD 4004       POP              {R2, LR}    ;
  326 000001E0 BC03            POP              {R0, R1}    ;
  327 000001E2 4770            BX               LR          ;  
  328 000001E4         
  329 000001E4         ;-------CHECK_Breathe-----------------------------------
                       ------------------------------------------
  330 000001E4         ; If the button @ PF4 is pushed, Start breathing
  331 000001E4         Check_Breathe
  332 000001E4 B403            PUSH             {R0, R1}    ;
  333 000001E6 B504            PUSH             {R2, LR}    ;
  334 000001E8 4945            LDR              R1, =GPIO_PORTF_DATA_R ;
  335 000001EA 680A            LDR              R2, [R1]    ;
  336 000001EC F002 0210       AND              R2, R2, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  337 000001F0 2A00            CMP              R2, #0x00   ;
  338 000001F2 D101            BNE              Check_Breathe_Leave ;  If SW1 i
                                                            s pushed, start the
                                                             breathing
  339 000001F4 F7FF FF93       BL               Breathe_Start ;
  340 000001F8         Check_Breathe_Leave
  341 000001F8 E8BD 4004       POP              {R2, LR}    ;
  342 000001FC BC03            POP              {R0, R1}    ;
  343 000001FE 4770            BX               LR          ;
  344 00000200         
  345 00000200         ;-------DEBUG_Init--------------------------------------
                       ----------------------------------------
  346 00000200         ;Initiliazing Debug Dump
  347 00000200         Debug_Init
  348 00000200 F8DF A100       LDR              R10, =data_capture



ARM Macro Assembler    Page 12 


  349 00000204 F8DF B100       LDR              R11, =time_capture 
                                                            ;  Created pointers
                                                            
  350 00000208         
  351 00000208 B403            PUSH             {R0, R1}
  352 0000020A B40C            PUSH             {R2, R3}
  353 0000020C F04F 0008       MOV              R0, #0x08   ;  8 bits in data_c
                                                            apture
  354 00000210 F04F 0132       MOV              R1, #50     ;
  355 00000214         
  356 00000214         setting_data_capture
  357 00000214 F1A1 0101       SUB              R1,R1, #0x01
  358 00000218 F04F 02FF       MOV              R2, #0xFF   ;
  359 0000021C F88A 2000       STRB             R2, [R10]
  360 00000220 4482            ADD              R10, R10, R0
  361 00000222 2900            CMP              R1, #0x0    ;
  362 00000224 D1F6            BNE              setting_data_capture
  363 00000226         
  364 00000226 F04F 0132       MOV              R1, #50     ;
  365 0000022A F04F 0204       MOV              R2, #0x04   ;
  366 0000022E FB00 F002       MUL              R0,R0, R2   ;
  367 00000232         setting_time_capture
  368 00000232 F04F 0201       MOV              R2, #0x01   ;
  369 00000236 EBA1 0102       SUB              R1,R1, R2   ;
  370 0000023A F04F 32FF       MOV              R2, #0xFFFFFFFF ;
  371 0000023E F8CA 2000       STR              R2, [R10]
  372 00000242 4482            ADD              R10, R10, R0
  373 00000244 2900            CMP              R1, #0x0    ;
  374 00000246 D1F4            BNE              setting_time_capture
  375 00000248         
  376 00000248 F8DF A0B8       LDR              R10, =data_capture
  377 0000024C F8DF B0B8       LDR              R11,=time_capture
  378 00000250 BC0C            POP              {R2, R3}
  379 00000252 BC03            POP              {R0, R1}
  380 00000254 4770            BX               LR
  381 00000256         
  382 00000256         ;-------DEBUG_CAPTURE-----------------------------------
                       ----------------------------------------
  383 00000256         ;saves one data point
  384 00000256         Debug_Capture
  385 00000256 B403            PUSH             {R0,R1}
  386 00000258 482C            LDR              R0 , =NEntries
  387 0000025A 6800            LDR              R0, [R0]
  388 0000025C 2832            CMP              R0 , #50
  389 0000025E D017            BEQ              DONE_C
  390 00000260 4825            LDR              R0, =GPIO_PORTE_DATA_R
  391 00000262 F000 0002       AND              R0, R0, #0x02 ;  Capturing Pins
                                                             E0 and E1
  392 00000266 EA4F 00D0       LSR              R0, R0, #0x03 ;
  393 0000026A 4923            LDR              R1, =GPIO_PORTE_DATA_R
  394 0000026C F001 0101       AND              R1,R1,#0x01 ;
  395 00000270 EA00 0001       AND              R0,R0,R1    ;
  396 00000274 4926            LDR              R1, =NVIC_ST_CURRENT_R 
                                                            ; Capturing Time
  397 00000276 F88A 0000       STRB             R0, [R10]   ;   Finished Storin
                                                            g Data
  398 0000027A         
  399 0000027A F8CB 1000       STR              R1, [R11]
  400 0000027E F10A 0A01       ADD              R10, R10, #0x01



ARM Macro Assembler    Page 13 


  401 00000282 F10B 0B04       ADD              R11, R11, #0x04
  402 00000286 4821            LDR              R0, =NEntries
  403 00000288 6801            LDR              R1, [R0]
  404 0000028A F101 0101       ADD              R1,R1, #0x01
  405 0000028E 6001            STR              R1, [R0]
  406 00000290         
  407 00000290 BC03    DONE_C  POP              {R0,R1}
  408 00000292 4770            BX               LR          ;
  409 00000294         
  410 00000294         ;-------Toggle Green LED (PF2)--------------------------
                       ----------------------------------------
  411 00000294         ;Toggles the Green LED on and off (PF2)
  412 00000294         Toggle_Green
  413 00000294 B403            PUSH             {R0, R1}    ;
  414 00000296 481A            LDR              R0, =GPIO_PORTF_DATA_R ;
  415 00000298 6801            LDR              R1, [R0]    ;
  416 0000029A F081 0104       EOR              R1, #0x04   ;
  417 0000029E 6001            STR              R1, [R0]    ;
  418 000002A0 BC03            POP              {R0, R1}    ;
  419 000002A2 4770            BX               LR          ;
  420 000002A4         
  421 000002A4         ;-------------------------------------------------------
                       ----------------------------------------
  422 000002A4         delay
  423 000002A4         ; a subroutine that loops using the value at R0
  424 000002A4 B403            PUSH             {R0, R1}    ;
  425 000002A6 F04F 0100       MOV              R1, #0      ;
  426 000002AA         delayLoop
  427 000002AA 4288            CMP              R0, R1      ;   Loop until temp
                                                            orary value R1 reac
                                                            hes R0
  428 000002AC D002            BEQ              delayDone   ;
  429 000002AE F101 0101       ADD              R1, R1, #1  ; 
  430 000002B2 E7FA            B                delayLoop   ;
  431 000002B4         delayDone
  432 000002B4 BC03            POP              {R0, R1}    ;
  433 000002B6 4770            BX               LR          ;
  434 000002B8         
  435 000002B8         ;-------------------------------------------------------
                       ----------------------------------------
  436 000002B8                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  437 000002B8                 END                          ; end of file
              400FE608 
              40024400 
              40024420 
              4002451C 
              40025520 
              4C4F434B 
              40025524 
              40025400 
              40025420 
              40025510 
              4002551C 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 14 


              00000000 
              400243FC 
              00000000 
              400253FC 
              00000000 
              00000000 
              00000000 
              E000E018 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 67 in file main.s
   Uses
      None
Comment: DATA unused
NEntries 00000109

Symbol: NEntries
   Definitions
      At line 81 in file main.s
   Uses
      At line 386 in file main.s
      At line 402 in file main.s

data_capture 0000000E

Symbol: data_capture
   Definitions
      At line 77 in file main.s
   Uses
      At line 348 in file main.s
      At line 376 in file main.s

debug_capture_counter 00000108

Symbol: debug_capture_counter
   Definitions
      At line 79 in file main.s
   Uses
      At line 159 in file main.s
      At line 296 in file main.s

delay_inc 00000000

Symbol: delay_inc
   Definitions
      At line 70 in file main.s
   Uses
      At line 141 in file main.s
      At line 144 in file main.s
      At line 151 in file main.s
      At line 189 in file main.s

delay_off 00000004

Symbol: delay_off
   Definitions
      At line 71 in file main.s
   Uses
      At line 148 in file main.s
      At line 191 in file main.s
      At line 200 in file main.s
      At line 205 in file main.s
      At line 216 in file main.s

delay_on 00000008



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: delay_on
   Definitions
      At line 72 in file main.s
   Uses
      At line 153 in file main.s
      At line 195 in file main.s
      At line 207 in file main.s
      At line 224 in file main.s

green_counter 0000000D

Symbol: green_counter
   Definitions
      At line 74 in file main.s
   Uses
      At line 156 in file main.s
      At line 315 in file main.s

prev_button_state 0000000C

Symbol: prev_button_state
   Definitions
      At line 73 in file main.s
   Uses
      At line 175 in file main.s
      At line 181 in file main.s

time_capture 00000040

Symbol: time_capture
   Definitions
      At line 78 in file main.s
   Uses
      At line 349 in file main.s
      At line 377 in file main.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 83 in file main.s
   Uses
      None
Comment: .text unused
Blink 000000F8

Symbol: Blink
   Definitions
      At line 210 in file main.s
   Uses
      At line 180 in file main.s
      At line 186 in file main.s
      At line 203 in file main.s

Blink_ifPushed 000000B0

Symbol: Blink_ifPushed
   Definitions
      At line 173 in file main.s
   Uses
      None
Comment: Blink_ifPushed unused
Blink_incrementDuty 000000CA

Symbol: Blink_incrementDuty
   Definitions
      At line 187 in file main.s
   Uses
      At line 185 in file main.s
Comment: Blink_incrementDuty used once
Breathe 0000016E

Symbol: Breathe
   Definitions
      At line 267 in file main.s
   Uses
      At line 261 in file main.s
Comment: Breathe used once
Breathe_Start 0000011E

Symbol: Breathe_Start
   Definitions
      At line 230 in file main.s
   Uses
      At line 339 in file main.s
Comment: Breathe_Start used once
Breathe_Stop 00000194

Symbol: Breathe_Stop
   Definitions
      At line 285 in file main.s
   Uses
      At line 251 in file main.s
Comment: Breathe_Stop used once
Breathe_Verse 00000160



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Breathe_Verse
   Definitions
      At line 262 in file main.s
   Uses
      At line 258 in file main.s
      At line 259 in file main.s

Breathe_ifPushed 00000146

Symbol: Breathe_ifPushed
   Definitions
      At line 247 in file main.s
   Uses
      None
Comment: Breathe_ifPushed unused
Breathe_incrementDuty 00000150

Symbol: Breathe_incrementDuty
   Definitions
      At line 253 in file main.s
   Uses
      At line 250 in file main.s
Comment: Breathe_incrementDuty used once
Breathe_loop 00000142

Symbol: Breathe_loop
   Definitions
      At line 245 in file main.s
   Uses
      At line 283 in file main.s
Comment: Breathe_loop used once
Check_Breathe 000001E4

Symbol: Check_Breathe
   Definitions
      At line 331 in file main.s
   Uses
      At line 170 in file main.s
Comment: Check_Breathe used once
Check_Breathe_Leave 000001F8

Symbol: Check_Breathe_Leave
   Definitions
      At line 340 in file main.s
   Uses
      At line 338 in file main.s
Comment: Check_Breathe_Leave used once
Check_Debug 0000019C

Symbol: Check_Debug
   Definitions
      At line 293 in file main.s
   Uses
      At line 168 in file main.s
Comment: Check_Debug used once
Check_Debug_Leave 000001B8

Symbol: Check_Debug_Leave



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 305 in file main.s
   Uses
      At line 301 in file main.s
Comment: Check_Debug_Leave used once
Check_Green 000001C0

Symbol: Check_Green
   Definitions
      At line 312 in file main.s
   Uses
      At line 169 in file main.s
Comment: Check_Green used once
Check_Green_Leave 000001DC

Symbol: Check_Green_Leave
   Definitions
      At line 324 in file main.s
   Uses
      At line 320 in file main.s
Comment: Check_Green_Leave used once
Configure 0000006A

Symbol: Configure
   Definitions
      At line 137 in file main.s
   Uses
      None
Comment: Configure unused
DONE_C 00000290

Symbol: DONE_C
   Definitions
      At line 407 in file main.s
   Uses
      At line 389 in file main.s
Comment: DONE_C used once
Debug_Capture 00000256

Symbol: Debug_Capture
   Definitions
      At line 384 in file main.s
   Uses
      At line 302 in file main.s
Comment: Debug_Capture used once
Debug_Init 00000200

Symbol: Debug_Init
   Definitions
      At line 347 in file main.s
   Uses
      At line 93 in file main.s
Comment: Debug_Init used once
Start 00000000

Symbol: Start
   Definitions
      At line 90 in file main.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 85 in file main.s
Comment: Start used once
Toggle_Green 00000294

Symbol: Toggle_Green
   Definitions
      At line 412 in file main.s
   Uses
      At line 321 in file main.s
Comment: Toggle_Green used once
delay 000002A4

Symbol: delay
   Definitions
      At line 422 in file main.s
   Uses
      At line 273 in file main.s
      At line 280 in file main.s

delayDone 000002B4

Symbol: delayDone
   Definitions
      At line 431 in file main.s
   Uses
      At line 428 in file main.s
Comment: delayDone used once
delayLoop 000002AA

Symbol: delayLoop
   Definitions
      At line 426 in file main.s
   Uses
      At line 430 in file main.s
Comment: delayLoop used once
main_loop 000000A4

Symbol: main_loop
   Definitions
      At line 166 in file main.s
   Uses
      At line 228 in file main.s
Comment: main_loop used once
setting_data_capture 00000214

Symbol: setting_data_capture
   Definitions
      At line 356 in file main.s
   Uses
      At line 362 in file main.s
Comment: setting_data_capture used once
setting_time_capture 00000232

Symbol: setting_time_capture
   Definitions
      At line 367 in file main.s
   Uses
      At line 374 in file main.s
Comment: setting_time_capture used once



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

29 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BREATHE_DELAY_MAX 00005E00

Symbol: BREATHE_DELAY_MAX
   Definitions
      At line 59 in file main.s
   Uses
      At line 238 in file main.s
Comment: BREATHE_DELAY_MAX used once
GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 43 in file main.s
   Uses
      At line 119 in file main.s
Comment: GPIO_LOCK_KEY used once
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 109 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 174 in file main.s
      At line 212 in file main.s
      At line 220 in file main.s
      At line 236 in file main.s
      At line 390 in file main.s
      At line 393 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 113 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 104 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 127 in file main.s
Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 42 in file main.s
   Uses
      At line 121 in file main.s
Comment: GPIO_PORTF_CR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 237 in file main.s
      At line 334 in file main.s
      At line 414 in file main.s

GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 133 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 124 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 41 in file main.s
   Uses
      At line 118 in file main.s
Comment: GPIO_PORTF_LOCK_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 130 in file main.s
Comment: GPIO_PORTF_PUR_R used once
MAX_DELAY 0000007D

Symbol: MAX_DELAY
   Definitions
      At line 57 in file main.s
   Uses
      At line 138 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      At line 204 in file main.s

NVIC_ST_CTRL_CLK_SRC 00000004

Symbol: NVIC_ST_CTRL_CLK_SRC
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_CLK_SRC unused
NVIC_ST_CTRL_COUNT 00010000

Symbol: NVIC_ST_CTRL_COUNT
   Definitions
      At line 50 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_COUNT unused
NVIC_ST_CTRL_ENABLE 00000001

Symbol: NVIC_ST_CTRL_ENABLE
   Definitions
      At line 53 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_ENABLE unused
NVIC_ST_CTRL_INTEN 00000002

Symbol: NVIC_ST_CTRL_INTEN
   Definitions
      At line 52 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_INTEN unused
NVIC_ST_CTRL_R E000E010

Symbol: NVIC_ST_CTRL_R
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_R unused
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 48 in file main.s
   Uses
      At line 396 in file main.s
Comment: NVIC_ST_CURRENT_R used once
NVIC_ST_RELOAD_M 00FFFFFF

Symbol: NVIC_ST_RELOAD_M
   Definitions
      At line 54 in file main.s
   Uses
      None
Comment: NVIC_ST_RELOAD_M unused
NVIC_ST_RELOAD_R E000E014



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols


Symbol: NVIC_ST_RELOAD_R
   Definitions
      At line 47 in file main.s
   Uses
      None
Comment: NVIC_ST_RELOAD_R unused
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 44 in file main.s
   Uses
      At line 97 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 62 in file main.s
   Uses
      At line 94 in file main.s
Comment: SysTick_Init used once
SysTick_Wait 00000000

Symbol: SysTick_Wait
   Definitions
      At line 63 in file main.s
   Uses
      At line 218 in file main.s
      At line 226 in file main.s

TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 61 in file main.s
   Uses
      At line 92 in file main.s
Comment: TExaS_Init used once
3 symbols
398 symbols in table
