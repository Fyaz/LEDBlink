


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Faiyaz Mostofa & Zain Ahmed
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/28/2018
    5 00000000         ; Brief description of the program:
    6 00000000         ;   A collection of operations are done in this program 
                       (at once):
    7 00000000         ; - An internal Blue LED blinks repeatedly indicating th
                       at the program is running
    8 00000000         ; - A Red LED blinks on and off based on different patte
                       rns which can be changed by a switch (8Hz).
    9 00000000         ;   The LED will cycle through different patterns as spe
                       cified below:
   10 00000000         ;     :on for (1/40s) -> on for (1/20s) -> on for (3/40s
                       ) -> on for (1/10s) -> always on -> always off -> loop:
   11 00000000         ;   The delays for the blinking is handled by SysTick.s
   12 00000000         ; - The Red LED also has a breathing function can be act
                       ivated by holding the internal button @ PF4 on the micro
                       -controller.
   13 00000000         ;   The delays for the breathing is handled by the delay
                        function @ the end of this file.
   14 00000000         ;   - A debugging capture tool that runs 3rd time the lo
                       op finishes.
   15 00000000         ; Hardware connections (External: One button and one LED
                       )
   16 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
   17 00000000         ;  PE0 is a Red LED output (1 activates external LED on 
                       protoboard)
   18 00000000         ;  PF2 is a Green LED output (1 activates external LED o
                       n protoboard)
   19 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal)
   20 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   21 00000000         ;  Main Loop takes 925 cycles before debug_capture takes
                        22 cycles, for mere 2.3% intrusiveness
   22 00000000         
   23 00000000         ; PortE device registers
   24 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   25 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   26 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   27 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   28 00000000         ; PortF device registers
   29 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   30 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   31 00000000 40025420 
                       GPIO_PORTF_AFSEL_R



ARM Macro Assembler    Page 2 


                               EQU              0x40025420
   32 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   33 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   34 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   35 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   36 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   37 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   38 00000000         ; System Clock reigsters
   39 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   40 00000000         
   41 00000000         ;Variables that hold the maximum values 
   42 00000000 001864A8 
                       MAX_DELAY
                               EQU              0x1864A8    ; The interval size
                                                             of the delays (in 
                                                            cycles)
   43 00000000         ; 0x0c (in 10ms)
   44 00000000 00005E00 
                       BREATHE_DELAY_MAX
                               EQU              0x5E00      ; The delay require
                                                            d
   45 00000000         
   46 00000000                 IMPORT           TExaS_Init
   47 00000000                 IMPORT           SysTick_Init
   48 00000000         
   49 00000000                 THUMB
   50 00000000         ;------------Global Variables---------------------------
                       ----------------------------------------
   51 00000000                 AREA             DATA, ALIGN=2
   52 00000000         
   53 00000000         ;Blinking variables
   54 00000000 00 00 00 
              00       delay_inc
                               SPACE            4           ; how to increment 
                                                            the delays when we 
                                                            need to change them
                                                             (1/5 of MAX_DELAY)
                                                            
   55 00000004 00 00 00 
              00       delay_off
                               SPACE            4           ; how long the LED 
                                                            will stay off (in c
                                                            ycles)
   56 00000008 00 00 00 



ARM Macro Assembler    Page 3 


              00       delay_on
                               SPACE            4           ; how long the LED 
                                                            will stay on (in cy
                                                            cles)
   57 0000000C 00      prev_button_state
                               SPACE            1           ; captures whether 
                                                            a button has been r
                                                            eleased or pushed
   58 0000000D 00      green_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and toggles th
                                                            e blue LED after a 
                                                            certain time is met
                                                            .
   59 0000000E         
   60 0000000E         ;Debugging arrays
   61 0000000E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    data_capture
                               SPACE            50          ; Array of 50 8-byt
                                                            e numbers
   62 00000040         ; 0x2000003e
   63 00000040         ; 0x20000090
   64 00000040 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    time_capture
                               SPACE            200         ; Array of 50 32-by
                                                            te numbers
   65 00000108         ; 0x20000070
   66 00000108         ; 0x20000138
   67 00000108 00      debug_capture_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and captures d
                                                            ebugging data after
                                                             a certain amount o
                                                            f loops
   68 00000109         
   69 00000109 00      NEntries



ARM Macro Assembler    Page 5 


                               SPACE            1           ; Number of entries
                                                             in either array
   70 0000010A         
   71 0000010A                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   72 00000000                 THUMB
   73 00000000                 EXPORT           Start
   74 00000000         
   75 00000000         ;---------Main Code-------------------------------------
                       ----------------------------------------
   76 00000000         Start
   77 00000000         ; TExaS_Init sets bus clock at 80 MHz
   78 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   79 00000004 F000 F8CF       BL               Debug_Init  ; Initializes the D
                                                            ebugging Tools
   80 00000008 F7FF FFFE       BL               SysTick_Init ; Initializes the 
                                                            SysTick (method in 
                                                            SysTick.s)
   81 0000000C F000 F92B       BL               Ports_Init  ;  Initializes Port
                                                            s E,F
   82 00000010         ; PE0 = Red LED output
   83 00000010         ; PE1 = positive logic Input (Switch)
   84 00000010         ; PF2 = Blue LED output
   85 00000010         ; PF4 = Hold switch for breathing functionality
   86 00000010         
   87 00000010         ; Setting up variables
   88 00000010         Configure
   89 00000010 49AF            LDR              R1, =MAX_DELAY ;  
   90 00000012 F04F 0205       MOV              R2, #5      ;     
   91 00000016 FBB1 F2F2       UDIV             R2, R1, R2  ;  split the max de
                                                            lay into 5 equal se
                                                            ctions
   92 0000001A 49AE            LDR              R1, =delay_inc ;
   93 0000001C 600A            STR              R2, [R1]    ;   delay_inc = (MA
                                                            X_DELAY / 5)
   94 0000001E         
   95 0000001E 49AD            LDR              R1, =delay_inc ;
   96 00000020 680A            LDR              R2, [R1]    ;
   97 00000022 F04F 0304       MOV              R3, #4      ;
   98 00000026 FB02 F203       MUL              R2, R2, R3  ; 
   99 0000002A 49AB            LDR              R1, =delay_off ; 
  100 0000002C 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_off starts @ 4/
                                                            5 of the MAX_DELAY
  101 0000002E         
  102 0000002E 49A9            LDR              R1, =delay_inc ;
  103 00000030 680A            LDR              R2, [R1]    ;
  104 00000032 49AA            LDR              R1, =delay_on ;
  105 00000034 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_on on starts @ 
                                                            1/5 of the MAX_DELA
                                                            Y
  106 00000036         
  107 00000036 49AA            LDR              R1, =green_counter ;
  108 00000038 F04F 0200       MOV              R2, #0      ;
  109 0000003C 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he green_counter to
                                                             0



ARM Macro Assembler    Page 6 


  110 0000003E 49A9            LDR              R1, =debug_capture_counter ;
  111 00000040 F04F 0200       MOV              R2, #0      ;
  112 00000044 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he debug_counter to
                                                             0
  113 00000046         
  114 00000046 F04F 0900       MOV              R9, #0      ;
  115 0000004A         
  116 0000004A B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  117 0000004C         
  118 0000004C         ; The main loop engine
  119 0000004C         main_loop
  120 0000004C         
  121 0000004C         ;BL Check_Debug; ; Check if we need to record debugging 
                       statistics
  122 0000004C F000 F88B       BL               Check_Green ; Check whether to 
                                                            toggle the green LE
                                                            D on or not
  123 00000050 F000 F89B       BL               Check_Breathe ; Check if whethe
                                                            r we need to make t
                                                            he LED Breathe
  124 00000054         
  125 00000054         ;If a button @ PE1 is pushed, increment the blinking pat
                       tern
  126 00000054         Blink_ifPushed
  127 00000054 49A4            LDR              R1, =GPIO_PORTE_DATA_R ;
  128 00000056 4AA5            LDR              R2, =prev_button_state ;
  129 00000058 7812            LDRB             R2, [R2]    ;
  130 0000005A 680B            LDR              R3, [R1]    ;    <- R3 holds th
                                                            e data from the Por
                                                            tE data register
  131 0000005C F003 0302       AND              R3, R3, #0x02 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  132 00000060 4293            CMP              R3, R2      ;     <- Check if t
                                                            he button is in the
                                                             same state as befo
                                                            re 
  133 00000062 D01C            BEQ              Blink       ;
  134 00000064 F000 F8C4       BL               Debug_Capture ;
  135 00000068 4AA0            LDR              R2, =prev_button_state ;
  136 0000006A 7013            STRB             R3, [R2]    ;
  137 0000006C         ; If the button is pushed, set PE4 to 1
  138 0000006C 2B00            CMP              R3, #0x00   ;   If the button i
                                                            s pushed
  139 0000006E D100            BNE              Blink_incrementDuty ;
  140 00000070 E015            B                Blink       ;
  141 00000072         Blink_incrementDuty
  142 00000072         ; Incrementing the duty time
  143 00000072 4A98            LDR              R2, =delay_inc ;
  144 00000074 6812            LDR              R2, [R2]    ;    
  145 00000076 4998            LDR              R1, =delay_off ;   
  146 00000078 680B            LDR              R3, [R1]    ;    
  147 0000007A EBA3 0302       SUB              R3, R3, R2  ;    Decrement the 
                                                            off time
  148 0000007E 600B            STR              R3, [R1]    ;
  149 00000080 4996            LDR              R1, =delay_on ;



ARM Macro Assembler    Page 7 


  150 00000082 680B            LDR              R3, [R1]    ;
  151 00000084 4413            ADD              R3, R3, R2  ;    Increment the 
                                                            on time
  152 00000086 600B            STR              R3, [R1]    ;
  153 00000088         ;Check if the duty time needs to be reset (always on -> 
                       always off)
  154 00000088 4993            LDR              R1, =delay_off ;
  155 0000008A 680A            LDR              R2, [R1]    ;
  156 0000008C 2A00            CMP              R2, #0      ;
  157 0000008E D506            BPL              Blink       ;    If the the off
                                                             time is < 0 (off <
                                                             0%, on > 100%), re
                                                            set the values to o
                                                            ff = 100%, on = 0%
  158 00000090 4A8F            LDR              R2, =MAX_DELAY ;
  159 00000092 4991            LDR              R1, =delay_off ;
  160 00000094 600A            STR              R2, [R1]    ;
  161 00000096 4991            LDR              R1, =delay_on ;
  162 00000098 F04F 0200       MOV              R2, #0      ;     Reset the on 
                                                            time to 0 (light is
                                                             always off)
  163 0000009C 600A            STR              R2, [R1]    ;
  164 0000009E         Blink
  165 0000009E         ; Turn off the light and wait
  166 0000009E 4992            LDR              R1, =GPIO_PORTE_DATA_R ;
  167 000000A0 680A            LDR              R2, [R1]    ;
  168 000000A2 F022 0201       BIC              R2, #0x01   ;
  169 000000A6 600A            STR              R2, [R1]    ;
  170 000000A8 4A8B            LDR              R2, =delay_off ;
  171 000000AA 6810            LDR              R0, [R2]    ;
  172 000000AC F000 F8D1       BL               delay       ; ;BL delay; Delay 
                                                            the program for a a
                                                            mount of time speci
                                                            fied in R0
  173 000000B0         ; Turn on the light and wait
  174 000000B0 498D            LDR              R1, =GPIO_PORTE_DATA_R ;
  175 000000B2 680A            LDR              R2, [R1]    ;
  176 000000B4 F042 0201       ORR              R2, #0x01   ;  
  177 000000B8 600A            STR              R2, [R1]    ;
  178 000000BA 4A88            LDR              R2, =delay_on ;
  179 000000BC 6810            LDR              R0, [R2]    ;
  180 000000BE F000 F8C8       BL               delay       ;BL delay
  181 000000C2         
  182 000000C2 E7C3            B                main_loop
  183 000000C4         ;-------------------------------------------------------
                       ----------------------------------------
  184 000000C4         Breathe_Start
  185 000000C4         ; a subroutine that handles all the breathing functional
                       ity by completly reworking everything
  186 000000C4 B4FF            PUSH             {R0-R7}     ;
  187 000000C6 E92D 4100       PUSH             {R8, LR}    ;
  188 000000CA         
  189 000000CA         ; Setting up variables
  190 000000CA 4887            LDR              R0, =GPIO_PORTE_DATA_R ;
  191 000000CC F8DF 9220       LDR              R9, =GPIO_PORTF_DATA_R ;
  192 000000D0 F44F 42BC       LDR              R2, =BREATHE_DELAY_MAX ;
  193 000000D4 F44F 73FA       MOV              R3, #500    ;
  194 000000D8 FBB2 F4F3       UDIV             R4, R2, R3  ;   The increments 
                                                            of the delay



ARM Macro Assembler    Page 8 


  195 000000DC F102 0500       ADD              R5, R2, #0  ;    Default: off f
                                                            or 4/5 of 80Hz
  196 000000E0 F04F 0600       MOV              R6, #0      ;     Default: on f
                                                            or 1/5 of 80Hz
  197 000000E4 F102 0700       ADD              R7, R2, #0  ;
  198 000000E8         
  199 000000E8         Breathe_loop
  200 000000E8 F8D9 1000       LDR              R1, [R9]    ;    <- R1 holds th
                                                            e data from the dat
                                                            a register
  201 000000EC         Breathe_ifPushed
  202 000000EC F001 0310       AND              R3, R1, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  203 000000F0 2B10            CMP              R3, #0x10   ;    Keep Breathing
                                                             until the button i
                                                            s released.
  204 000000F2 D100            BNE              Breathe_incrementDuty ;
  205 000000F4 E021            B                Breathe_Stop ;
  206 000000F6         
  207 000000F6         Breathe_incrementDuty
  208 000000F6         ; Incrementing the duty time
  209 000000F6 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  210 000000FA 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  211 000000FC 2D00            CMP              R5, #0      ;
  212 000000FE D402            BMI              Breathe_Verse ;
  213 00000100 D001            BEQ              Breathe_Verse ;   Check if we'v
                                                            e stopped or froze 
                                                            the delay of the li
                                                            ght (either R5 or R
                                                            6 reach zero)
  214 00000102 2E00            CMP              R6, #0      ;
  215 00000104 D506            BPL              Breathe     ;
  216 00000106         Breathe_Verse
  217 00000106 F04F 33FF       MOV              R3, #-1     ;
  218 0000010A FB04 F403       MUL              R4, R4, R3  ;    Once we reach 
                                                            a maximum, down/up 
                                                            or up depending on 
                                                            the scenario
  219 0000010E EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  220 00000112 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  221 00000114         Breathe
  222 00000114         ; Turn off the light and wait
  223 00000114 F021 0101       BIC              R1, #0x01   ;  
  224 00000118 6001            STR              R1, [R0]    ;
  225 0000011A B403            PUSH             {R0, R1}    ;
  226 0000011C F105 0000       ADD              R0, R5, #0  ;
  227 00000120 F000 F897       BL               delay       ;     Delay the pro
                                                            gram for a amount o
                                                            f time specified in
                                                             R7
  228 00000124 BC03            POP              {R0, R1}    ;
  229 00000126         ; Turn on the light and wait
  230 00000126 F041 0101       ORR              R1, #0x01   ;  
  231 0000012A 6001            STR              R1, [R0]    ;



ARM Macro Assembler    Page 9 


  232 0000012C B403            PUSH             {R0, R1}    ;
  233 0000012E F106 0000       ADD              R0, R6, #0  ;
  234 00000132 F000 F88E       BL               delay       ;
  235 00000136 BC03            POP              {R0, R1}    ;
  236 00000138         
  237 00000138 E7D6            B                Breathe_loop
  238 0000013A         
  239 0000013A         Breathe_Stop
  240 0000013A E8BD 4100       POP              {R8,LR}     ;
  241 0000013E BCFF            POP              {R0-R7}     ;
  242 00000140         
  243 00000140 4770            BX               LR          ;
  244 00000142         
  245 00000142         ;-------CHECK_debug-------------------------------------
                       ----------------------------------------
  246 00000142         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  247 00000142         Check_Debug
  248 00000142 B403            PUSH             {R0, R1}    ;
  249 00000144 B504            PUSH             {R2, LR}    ;
  250 00000146 4967            LDR              R1, =debug_capture_counter ;
  251 00000148 780A            LDRB             R2, [R1]    ; 
  252 0000014A F102 0201       ADD              R2, R2, #1  ;   debug_capture_c
                                                            ounter++;
  253 0000014E 700A            STRB             R2, [R1]    ;
  254 00000150 2A06            CMP              R2, #6      ;
  255 00000152 D104            BNE              Check_Debug_Leave ;
  256 00000154 F000 F84C       BL               Debug_Capture ;  if(debug_captu
                                                            re_counter == 3) ca
                                                            pture data
  257 00000158 F04F 0200       MOV              R2, #0      ;
  258 0000015C 700A            STRB             R2, [R1]    ;
  259 0000015E         Check_Debug_Leave
  260 0000015E E8BD 4004       POP              {R2, LR}    ;
  261 00000162 BC03            POP              {R0, R1}    ;
  262 00000164 4770            BX               LR          ;  
  263 00000166         
  264 00000166         ;-------CHECK_Green-------------------------------------
                       ----------------------------------------
  265 00000166         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  266 00000166         Check_Green
  267 00000166 B403            PUSH             {R0, R1}    ;
  268 00000168 B504            PUSH             {R2, LR}    ;
  269 0000016A 495D            LDR              R1, =green_counter ;
  270 0000016C 780A            LDRB             R2, [R1]    ;
  271 0000016E F102 0201       ADD              R2, R2, #1  ;   green_counter++
                                                            
  272 00000172 700A            STRB             R2, [R1]    ;
  273 00000174 2A03            CMP              R2, #3      ;
  274 00000176 D104            BNE              Check_Green_Leave ; 
  275 00000178 F000 F863       BL               Toggle_Green ;  if(green_counte
                                                            r == 3) toggle Gree
                                                            n LED
  276 0000017C F04F 0200       MOV              R2, #0      ;
  277 00000180 700A            STRB             R2, [R1]    ;
  278 00000182         Check_Green_Leave
  279 00000182 E8BD 4004       POP              {R2, LR}    ;
  280 00000186 BC03            POP              {R0, R1}    ;



ARM Macro Assembler    Page 10 


  281 00000188 4770            BX               LR          ;  
  282 0000018A         
  283 0000018A         ;-------CHECK_Breathe-----------------------------------
                       ------------------------------------------
  284 0000018A         ; If the button @ PF4 is pushed, Start breathing
  285 0000018A         Check_Breathe
  286 0000018A B403            PUSH             {R0, R1}    ;
  287 0000018C B504            PUSH             {R2, LR}    ;
  288 0000018E 4958            LDR              R1, =GPIO_PORTF_DATA_R ;
  289 00000190 680A            LDR              R2, [R1]    ;
  290 00000192 F002 0210       AND              R2, R2, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  291 00000196 2A00            CMP              R2, #0x00   ;
  292 00000198 D101            BNE              Check_Breathe_Leave ; If SW1 is
                                                             pushed, start the 
                                                            breathing
  293 0000019A F7FF FF93       BL               Breathe_Start ;
  294 0000019E         Check_Breathe_Leave
  295 0000019E E8BD 4004       POP              {R2, LR}    ;
  296 000001A2 BC03            POP              {R0, R1}    ;
  297 000001A4 4770            BX               LR          ;
  298 000001A6         
  299 000001A6         ;-------DEBUG_Init--------------------------------------
                       ----------------------------------------
  300 000001A6         ;Initiliazing Debug Dump
  301 000001A6         Debug_Init
  302 000001A6 B403            PUSH             {R0, R1}
  303 000001A8 B40C            PUSH             {R2, R3}
  304 000001AA 4A52            LDR              R2, =data_capture ;
  305 000001AC 4B52            LDR              R3, =time_capture 
                                                            ;  Created pointers
                                                            
  306 000001AE F8DF A144       LDR              R10, =data_capture ;
  307 000001B2 F8DF B144       LDR              R11, =time_capture ;
  308 000001B6         ; Fill the data array with 0xFF (signifying empty)
  309 000001B6 F04F 0032       MOV              R0, #50     ;
  310 000001BA         setting_data_capture
  311 000001BA F1A0 0001       SUB              R0,R0, #0x01
  312 000001BE F04F 01FF       MOV              R1, #0xFF   ;  
  313 000001C2 7011            STRB             R1, [R2]
  314 000001C4 F102 0201       ADD              R2, R2, #1  ;
  315 000001C8 2800            CMP              R0, #0x0    ;
  316 000001CA D1F6            BNE              setting_data_capture
  317 000001CC         ; Fill the time array with 0xFFFFFFFF (signifying empty)
                        
  318 000001CC F04F 0032       MOV              R0, #50     ;
  319 000001D0         setting_time_capture
  320 000001D0 F1A0 0001       SUB              R0,R0, #1   ;
  321 000001D4 F04F 31FF       MOV              R1, #0xFFFFFFFF ;
  322 000001D8 6019            STR              R1, [R3]
  323 000001DA F103 0304       ADD              R3, R3, #4  ;
  324 000001DE 2800            CMP              R0, #0x0    ;
  325 000001E0 D1F6            BNE              setting_time_capture
  326 000001E2         RestNEntries
  327 000001E2 4846            LDR              R0, =NEntries ;
  328 000001E4 F04F 0200       MOV              R2, #0      ;
  329 000001E8 7002            STRB             R2, [R0]    ;
  330 000001EA         



ARM Macro Assembler    Page 11 


  331 000001EA BC0C            POP              {R2, R3}
  332 000001EC BC03            POP              {R0, R1}
  333 000001EE 4770            BX               LR
  334 000001F0         
  335 000001F0         ;-------DEBUG_CAPTURE-----------------------------------
                       ----------------------------------------
  336 000001F0         ; saves one data point
  337 000001F0         Debug_Capture
  338 000001F0 B403            PUSH             {R0,R1}
  339 000001F2 B504            PUSH             {R2,LR}
  340 000001F4 4841            LDR              R0 , =NEntries
  341 000001F6 7801            LDRB             R1, [R0]
  342 000001F8 2932            CMP              R1 , #50
  343 000001FA D21E            BHS              DONE_C      ;   if (the array i
                                                            s not full)
  344 000001FC F101 0101       ADD              R1, R1, #1  ;   Add a new entry
                                                            
  345 00000200 7001            STRB             R1, [R0]    ;   NEntries++;
  346 00000202 F109 0901       ADD              R9, R9, #1  ;
  347 00000206         
  348 00000206         ; Record the current data entries
  349 00000206 4838            LDR              R0, =GPIO_PORTE_DATA_R ; 
  350 00000208 6800            LDR              R0, [R0]    ;
  351 0000020A F100 0100       ADD              R1, R0, #0  ;
  352 0000020E F000 0001       AND              R0, R0, #0x01 ;  R0 holds the d
                                                            ata for PE0
  353 00000212 F001 0102       AND              R1, R1, #0x02 ;  R1 holds the d
                                                            ata for PE1
  354 00000216 EA4F 01C1       LSL              R1, R1, #3  ;   Move PE1 to PE4
                                                             
  355 0000021A EA41 0100       ORR              R1, R1, R0  ;   Merge the two b
                                                            its (PE0 | PE4)
  356 0000021E 4835            LDR              R0, =data_capture ;
  357 00000220 4A36            LDR              R2, =NEntries ;
  358 00000222 7812            LDRB             R2, [R2]    ;
  359 00000224 4410            ADD              R0, R0, R2  ;
  360 00000226 7001            STRB             R1, [R0]    ;   Store the value
                                                             in the correct spo
                                                            t on the data array
                                                            
  361 00000228         ; Record the current time
  362 00000228 F04F 0004       MOV              R0, #4      ;
  363 0000022C FB02 F200       MUL              R2, R2, R0  ;   Increment in th
                                                            e time array by 4 b
                                                            ytes
  364 00000230 4931            LDR              R1, =time_capture ;
  365 00000232 4411            ADD              R1, R1, R2  ;
  366 00000234 4832            LDR              R0, =NVIC_ST_CURRENT_R
  367 00000236 6800            LDR              R0, [R0]    ;
  368 00000238 6008            STR              R0, [R1]    ;   Store the curre
                                                            nt time in the corr
                                                            ect spot on the tim
                                                            e array
  369 0000023A         ; Restore the registers and leave
  370 0000023A         DONE_C
  371 0000023A E8BD 4004       POP              {R2, LR}    ;   
  372 0000023E BC03            POP              {R0,R1}
  373 00000240 4770            BX               LR          ;
  374 00000242         



ARM Macro Assembler    Page 12 


  375 00000242         ;-------Toggle Green LED (PF2)--------------------------
                       ----------------------------------------
  376 00000242         ;Toggles the Green LED on and off (PF2)
  377 00000242         Toggle_Green
  378 00000242 B403            PUSH             {R0, R1}    ;
  379 00000244 482A            LDR              R0, =GPIO_PORTF_DATA_R ;
  380 00000246 6801            LDR              R1, [R0]    ;
  381 00000248 F081 0104       EOR              R1, #0x04   ;
  382 0000024C 6001            STR              R1, [R0]    ;
  383 0000024E BC03            POP              {R0, R1}    ;
  384 00000250 4770            BX               LR          ;
  385 00000252         
  386 00000252         ;-------------------------------------------------------
                       ----------------------------------------
  387 00000252         delay
  388 00000252         ; a subroutine that loops using the value at R0
  389 00000252 B403            PUSH             {R0, R1}    ;
  390 00000254 F04F 0100       MOV              R1, #0      ;
  391 00000258         delayLoop
  392 00000258 4288            CMP              R0, R1      ;   Loop until temp
                                                            orary value, R1, re
                                                            aches R0
  393 0000025A D002            BEQ              delayDone   ;
  394 0000025C F101 0101       ADD              R1, R1, #1  ; 
  395 00000260 E7FA            B                delayLoop   ;
  396 00000262         delayDone
  397 00000262 BC03            POP              {R0, R1}    ;
  398 00000264 4770            BX               LR          ;
  399 00000266         
  400 00000266         ;-------------------------------------------------------
                       ----------------------------------------
  401 00000266         ; Port Initialization
  402 00000266         Ports_Init
  403 00000266 B403            PUSH             {R0, R1}    ;
  404 00000268 B504            PUSH             {R2, LR}    ;
  405 0000026A 4826            LDR              R0, =SYSCTL_RCGCGPIO_R ;
  406 0000026C 6801            LDR              R1, [R0]    ;
  407 0000026E F041 0130       ORR              R1, R1, #0x30 ;   Start up Port
                                                             F and Port E
  408 00000272 6001            STR              R1, [R0]    ;
  409 00000274 BF00            NOP                          ;
  410 00000276 BF00            NOP                          ;
  411 00000278         ; Configure Port E
  412 00000278 4823            LDR              R0, =GPIO_PORTE_DIR_R ;
  413 0000027A 6801            LDR              R1, [R0]    ;
  414 0000027C F041 0101       ORR              R1, R1, #0x01 ;    PE0 is set t
                                                            o output (LED)
  415 00000280 F021 0112       BIC              R1, R1, #0x12 ;    PE1,4 are se
                                                            t to input (buttons
                                                            )
  416 00000284 6001            STR              R1, [R0]    ;
  417 00000286 4821            LDR              R0, =GPIO_PORTE_AFSEL_R ;
  418 00000288 6801            LDR              R1, [R0]    ;
  419 0000028A F04F 0100       MOV              R1, #0      ;      Disables the
                                                             "alternate functio
                                                            ns" in the port
  420 0000028E 6001            STR              R1, [R0]    ;
  421 00000290 481F            LDR              R0, =GPIO_PORTE_DEN_R ;
  422 00000292 6801            LDR              R1, [R0]    ;



ARM Macro Assembler    Page 13 


  423 00000294 F04F 01FF       MOV              R1, #0xFF   ;     1 means enabl
                                                            e digital I/O
  424 00000298 6001            STR              R1, [R0]    ;
  425 0000029A         ; Configure Port F
  426 0000029A 491E            LDR              R1, =GPIO_PORTF_LOCK_R ;  2) un
                                                            lock the lock regis
                                                            ter
  427 0000029C 481E            LDR              R0, =GPIO_LOCK_KEY ;   unlock G
                                                            PIO Port F Commit R
                                                            egister
  428 0000029E 6008            STR              R0, [R1]    ;
  429 000002A0 491E            LDR              R1, =GPIO_PORTF_CR_R ;    enabl
                                                            e commit for Port F
                                                            
  430 000002A2 F04F 00FF       MOV              R0, #0xFF   ;               1 m
                                                            eans allow access
  431 000002A6 6008            STR              R0, [R1]    ;
  432 000002A8 491D            LDR              R1, =GPIO_PORTF_DIR_R ;   5) se
                                                            t direction registe
                                                            r
  433 000002AA F04F 000E       MOV              R0,#0x0E    ;
  434 000002AE 6008            STR              R0, [R1]    ;
  435 000002B0 491C            LDR              R1, =GPIO_PORTF_AFSEL_R ; 6) re
                                                            gular port function
                                                            
  436 000002B2 F04F 0000       MOV              R0, #0      ;                  
                                                              0 means disable a
                                                            lternate function
  437 000002B6 6008            STR              R0, [R1]    ;
  438 000002B8 491B            LDR              R1, =GPIO_PORTF_PUR_R ;     pul
                                                            l-up resistors for 
                                                            PF4,PF0
  439 000002BA F04F 0011       MOV              R0, #0x11   ;                 1
                                                            )enable for negativ
                                                            e logic
  440 000002BE 6008            STR              R0, [R1]    ;
  441 000002C0 491A            LDR              R1, =GPIO_PORTF_DEN_R ;     7) 
                                                            enable Port F digit
                                                            al port
  442 000002C2 F04F 00FF       MOV              R0, #0xFF   ;                 1
                                                             means enable digit
                                                            al I/O
  443 000002C6 6008            STR              R0, [R1]    ;
  444 000002C8 E8BD 4004       POP              {R2, LR}    ;
  445 000002CC BC03            POP              {R0, R1}    ;
  446 000002CE 4770            BX               LR          ;
  447 000002D0         
  448 000002D0         ;-------------------------------------------------------
                       ----------------------------------------
  449 000002D0                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  450 000002D0                 END                          ; end of file
              001864A8 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 14 


              400243FC 
              00000000 
              400253FC 
              00000000 
              00000000 
              00000000 
              E000E018 
              400FE608 
              40024400 
              40024420 
              4002451C 
              40025520 
              4C4F434B 
              40025524 
              40025400 
              40025420 
              40025510 
              4002551C 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: DATA unused
NEntries 00000109

Symbol: NEntries
   Definitions
      At line 69 in file main.s
   Uses
      At line 327 in file main.s
      At line 340 in file main.s
      At line 357 in file main.s

data_capture 0000000E

Symbol: data_capture
   Definitions
      At line 61 in file main.s
   Uses
      At line 304 in file main.s
      At line 306 in file main.s
      At line 356 in file main.s

debug_capture_counter 00000108

Symbol: debug_capture_counter
   Definitions
      At line 67 in file main.s
   Uses
      At line 110 in file main.s
      At line 250 in file main.s

delay_inc 00000000

Symbol: delay_inc
   Definitions
      At line 54 in file main.s
   Uses
      At line 92 in file main.s
      At line 95 in file main.s
      At line 102 in file main.s
      At line 143 in file main.s

delay_off 00000004

Symbol: delay_off
   Definitions
      At line 55 in file main.s
   Uses
      At line 99 in file main.s
      At line 145 in file main.s
      At line 154 in file main.s
      At line 159 in file main.s
      At line 170 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


delay_on 00000008

Symbol: delay_on
   Definitions
      At line 56 in file main.s
   Uses
      At line 104 in file main.s
      At line 149 in file main.s
      At line 161 in file main.s
      At line 178 in file main.s

green_counter 0000000D

Symbol: green_counter
   Definitions
      At line 58 in file main.s
   Uses
      At line 107 in file main.s
      At line 269 in file main.s

prev_button_state 0000000C

Symbol: prev_button_state
   Definitions
      At line 57 in file main.s
   Uses
      At line 128 in file main.s
      At line 135 in file main.s

time_capture 00000040

Symbol: time_capture
   Definitions
      At line 64 in file main.s
   Uses
      At line 305 in file main.s
      At line 307 in file main.s
      At line 364 in file main.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 71 in file main.s
   Uses
      None
Comment: .text unused
Blink 0000009E

Symbol: Blink
   Definitions
      At line 164 in file main.s
   Uses
      At line 133 in file main.s
      At line 140 in file main.s
      At line 157 in file main.s

Blink_ifPushed 00000054

Symbol: Blink_ifPushed
   Definitions
      At line 126 in file main.s
   Uses
      None
Comment: Blink_ifPushed unused
Blink_incrementDuty 00000072

Symbol: Blink_incrementDuty
   Definitions
      At line 141 in file main.s
   Uses
      At line 139 in file main.s
Comment: Blink_incrementDuty used once
Breathe 00000114

Symbol: Breathe
   Definitions
      At line 221 in file main.s
   Uses
      At line 215 in file main.s
Comment: Breathe used once
Breathe_Start 000000C4

Symbol: Breathe_Start
   Definitions
      At line 184 in file main.s
   Uses
      At line 293 in file main.s
Comment: Breathe_Start used once
Breathe_Stop 0000013A

Symbol: Breathe_Stop
   Definitions
      At line 239 in file main.s
   Uses
      At line 205 in file main.s
Comment: Breathe_Stop used once
Breathe_Verse 00000106



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Breathe_Verse
   Definitions
      At line 216 in file main.s
   Uses
      At line 212 in file main.s
      At line 213 in file main.s

Breathe_ifPushed 000000EC

Symbol: Breathe_ifPushed
   Definitions
      At line 201 in file main.s
   Uses
      None
Comment: Breathe_ifPushed unused
Breathe_incrementDuty 000000F6

Symbol: Breathe_incrementDuty
   Definitions
      At line 207 in file main.s
   Uses
      At line 204 in file main.s
Comment: Breathe_incrementDuty used once
Breathe_loop 000000E8

Symbol: Breathe_loop
   Definitions
      At line 199 in file main.s
   Uses
      At line 237 in file main.s
Comment: Breathe_loop used once
Check_Breathe 0000018A

Symbol: Check_Breathe
   Definitions
      At line 285 in file main.s
   Uses
      At line 123 in file main.s
Comment: Check_Breathe used once
Check_Breathe_Leave 0000019E

Symbol: Check_Breathe_Leave
   Definitions
      At line 294 in file main.s
   Uses
      At line 292 in file main.s
Comment: Check_Breathe_Leave used once
Check_Debug 00000142

Symbol: Check_Debug
   Definitions
      At line 247 in file main.s
   Uses
      None
Comment: Check_Debug unused
Check_Debug_Leave 0000015E

Symbol: Check_Debug_Leave



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 259 in file main.s
   Uses
      At line 255 in file main.s
Comment: Check_Debug_Leave used once
Check_Green 00000166

Symbol: Check_Green
   Definitions
      At line 266 in file main.s
   Uses
      At line 122 in file main.s
Comment: Check_Green used once
Check_Green_Leave 00000182

Symbol: Check_Green_Leave
   Definitions
      At line 278 in file main.s
   Uses
      At line 274 in file main.s
Comment: Check_Green_Leave used once
Configure 00000010

Symbol: Configure
   Definitions
      At line 88 in file main.s
   Uses
      None
Comment: Configure unused
DONE_C 0000023A

Symbol: DONE_C
   Definitions
      At line 370 in file main.s
   Uses
      At line 343 in file main.s
Comment: DONE_C used once
Debug_Capture 000001F0

Symbol: Debug_Capture
   Definitions
      At line 337 in file main.s
   Uses
      At line 134 in file main.s
      At line 256 in file main.s

Debug_Init 000001A6

Symbol: Debug_Init
   Definitions
      At line 301 in file main.s
   Uses
      At line 79 in file main.s
Comment: Debug_Init used once
Ports_Init 00000266

Symbol: Ports_Init
   Definitions
      At line 402 in file main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 81 in file main.s
Comment: Ports_Init used once
RestNEntries 000001E2

Symbol: RestNEntries
   Definitions
      At line 326 in file main.s
   Uses
      None
Comment: RestNEntries unused
Start 00000000

Symbol: Start
   Definitions
      At line 76 in file main.s
   Uses
      At line 73 in file main.s
Comment: Start used once
Toggle_Green 00000242

Symbol: Toggle_Green
   Definitions
      At line 377 in file main.s
   Uses
      At line 275 in file main.s
Comment: Toggle_Green used once
delay 00000252

Symbol: delay
   Definitions
      At line 387 in file main.s
   Uses
      At line 172 in file main.s
      At line 180 in file main.s
      At line 227 in file main.s
      At line 234 in file main.s

delayDone 00000262

Symbol: delayDone
   Definitions
      At line 396 in file main.s
   Uses
      At line 393 in file main.s
Comment: delayDone used once
delayLoop 00000258

Symbol: delayLoop
   Definitions
      At line 391 in file main.s
   Uses
      At line 395 in file main.s
Comment: delayLoop used once
main_loop 0000004C

Symbol: main_loop
   Definitions
      At line 119 in file main.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 182 in file main.s
Comment: main_loop used once
setting_data_capture 000001BA

Symbol: setting_data_capture
   Definitions
      At line 310 in file main.s
   Uses
      At line 316 in file main.s
Comment: setting_data_capture used once
setting_time_capture 000001D0

Symbol: setting_time_capture
   Definitions
      At line 319 in file main.s
   Uses
      At line 325 in file main.s
Comment: setting_time_capture used once
31 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BREATHE_DELAY_MAX 00005E00

Symbol: BREATHE_DELAY_MAX
   Definitions
      At line 44 in file main.s
   Uses
      At line 192 in file main.s
Comment: BREATHE_DELAY_MAX used once
GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 36 in file main.s
   Uses
      At line 427 in file main.s
Comment: GPIO_LOCK_KEY used once
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 26 in file main.s
   Uses
      At line 417 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 24 in file main.s
   Uses
      At line 127 in file main.s
      At line 166 in file main.s
      At line 174 in file main.s
      At line 190 in file main.s
      At line 349 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 27 in file main.s
   Uses
      At line 421 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 25 in file main.s
   Uses
      At line 412 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 435 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 35 in file main.s
   Uses
      At line 429 in file main.s
Comment: GPIO_PORTF_CR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 29 in file main.s
   Uses
      At line 191 in file main.s
      At line 288 in file main.s
      At line 379 in file main.s

GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 441 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 30 in file main.s
   Uses
      At line 432 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 426 in file main.s
Comment: GPIO_PORTF_LOCK_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 438 in file main.s
Comment: GPIO_PORTF_PUR_R used once
MAX_DELAY 001864A8

Symbol: MAX_DELAY
   Definitions
      At line 42 in file main.s
   Uses
      At line 89 in file main.s
      At line 158 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 366 in file main.s
Comment: NVIC_ST_CURRENT_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 405 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 47 in file main.s
   Uses
      At line 80 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 46 in file main.s
   Uses
      At line 78 in file main.s
Comment: TExaS_Init used once
2 symbols
392 symbols in table
