


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Faiyaz Mostofa
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/14/2018
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ; Hardware connections (External: One button and one LED
                       )
    8 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
    9 00000000         ;  PE0 is LED output (1 activates external LED on protob
                       oard)
   10 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal)
   11 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   12 00000000         ; Overall functionality of this system is to operate lik
                       e this
   13 00000000         ;   1) Make PE0 an output and make PE1 and PF4 inputs.
   14 00000000         ;   2) The system starts with the the LED toggling at 8H
                       z,
   15 00000000         ;      which is 8 times per second with a duty-cycle of 
                       20%.
   16 00000000         ;      Therefore, the LED is ON for (0.2*1/8)th of a sec
                       ond
   17 00000000         ;      and OFF for (0.8*1/8)th of a second.
   18 00000000         ;   3) When the button on (PE1) is pressed-and-released 
                       increase
   19 00000000         ;      the duty cycle by 20% (modulo 100%). Therefore fo
                       r each
   20 00000000         ;      press-and-release the duty cycle changes from 20%
                        to 40% to 60%
   21 00000000         ;      to 80% to 100%(ON) to 0%(Off) to 20% to 40% so on
                       
   22 00000000         ;   4) Implement a "breathing LED" when SW1 (PF4) on the
                        Launchpad is pressed:
   23 00000000         ;      a) Be creative and play around with what "breathi
                       ng" means.
   24 00000000         ;         An example of "breathing" is most computers po
                       wer LED in sleep mode
   25 00000000         ;         (e.g., https://www.youtube.com/watch?v=ZT6siXy
                       IjvQ).
   26 00000000         ;      b) When (PF4) is released while in breathing mode
                       , resume blinking at 8Hz.
   27 00000000         ;         The duty cycle can either match the most recen
                       t duty-
   28 00000000         ;         cycle or reset to 20%.
   29 00000000         ;      TIP: debugging the breathing LED algorithm and fe
                       el on the simulator is impossible.
   30 00000000         ; PortE device registers
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 



ARM Macro Assembler    Page 2 


                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         ; PortF device registers
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   42 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   43 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   44 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   45 00000000         ;System Clock reigsters
   46 00000000 E000E010 
                       NVIC_ST_CTRL_R
                               EQU              0xE000E010
   47 00000000 E000E014 
                       NVIC_ST_RELOAD_R
                               EQU              0xE000E014
   48 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   49 00000000 00010000 
                       NVIC_ST_CTRL_COUNT
                               EQU              0x00010000  ; Count flag
   50 00000000 00000004 
                       NVIC_ST_CTRL_CLK_SRC
                               EQU              0x00000004  ; Clock Source
   51 00000000 00000002 
                       NVIC_ST_CTRL_INTEN
                               EQU              0x00000002  ; Interrupt enable
   52 00000000 00000001 
                       NVIC_ST_CTRL_ENABLE
                               EQU              0x00000001  ; Counter mode
   53 00000000 00FFFFFF 
                       NVIC_ST_RELOAD_M
                               EQU              0x00FFFFFF  ; Counter load valu
                                                            e
   54 00000000         
   55 00000000         ;Variables that hold the maximum values 



ARM Macro Assembler    Page 3 


   56 00000000 001864A8 
                       MAX_DELAY
                               EQU              0x1864A8    ;0x249700    ; The 
                                                            interval size of th
                                                            e delays
   57 00000000 00005E00 
                       BREATHE_DELAY_MAX
                               EQU              0x5E00      ; The delay require
                                                            d
   58 00000000         
   59 00000000                 IMPORT           TExaS_Init
   60 00000000                 IMPORT           SysTick_Init
   61 00000000                 IMPORT           SysTick_Wait10ms
   62 00000000         
   63 00000000                 THUMB
   64 00000000         ;------------Global Variables---------------------------
                       ----------------------------------------
   65 00000000                 AREA             DATA, ALIGN=2
   66 00000000         
   67 00000000         ;Blinking variables
   68 00000000 00 00 00 
              00       delay_inc
                               SPACE            4           ; how to increment 
                                                            the delays when we 
                                                            need to change them
                                                             (1/5 of MAX_DELAY)
                                                            
   69 00000004 00 00 00 
              00       delay_off
                               SPACE            4           ; how long the LED 
                                                            will stay off (in c
                                                            ycles)
   70 00000008 00 00 00 
              00       delay_on
                               SPACE            4           ; how long the LED 
                                                            will stay on (in cy
                                                            cles)
   71 0000000C 00      prev_button_state
                               SPACE            1           ; captures whether 
                                                            a button has been r
                                                            eleased or pushed
   72 0000000D         
   73 0000000D         ;Debuggin variables
   74 0000000D 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00    data_capture
                               SPACE            50          ; Array of 50 8-byt
                                                            e numbers
   75 0000003F 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    time_capture
                               SPACE            200         ; Array of 50 32-by
                                                            te numbers
   76 00000107         
   77 00000107                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   78 00000000                 THUMB
   79 00000000                 EXPORT           Start
   80 00000000         
   81 00000000         ;R10 = data_capture pointer
   82 00000000         ;R11 = time_capture pointer
   83 00000000         ;---------Main Code-------------------------------------
                       ----------------------------------------
   84 00000000         Start
   85 00000000         ; TExaS_Init sets bus clock at 80 MHz
   86 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   87 00000004 F7FF FFFE       BL               SysTick_Init ; Initializes the 
                                                            SysTick
   88 00000008 F000 F8C9       BL               Debug_Init  ; Initializes the D
                                                            ebugging Tools
   89 0000000C         
   90 0000000C         ; Port Initialization
   91 0000000C 4881            LDR              R0, =SYSCTL_RCGCGPIO_R ;
   92 0000000E 6801            LDR              R1, [R0]    ;
   93 00000010 F041 0130       ORR              R1, R1, #0x30 ;   Start up Port
                                                             F and Port E
   94 00000014 6001            STR              R1, [R0]    ;
   95 00000016 BF00            NOP                          ;
   96 00000018 BF00            NOP                          ;
   97 0000001A         ; Configure Port E
   98 0000001A 487F            LDR              R0, =GPIO_PORTE_DIR_R ;
   99 0000001C 6801            LDR              R1, [R0]    ;
  100 0000001E F041 0101       ORR              R1, R1, #0x01 ;    PE0 is set t
                                                            o output (LED)
  101 00000022 F021 0112       BIC              R1, R1, #0x12 ;    PE1,4 are se
                                                            t to input (buttons
                                                            )
  102 00000026 6001            STR              R1, [R0]    ;
  103 00000028 487C            LDR              R0, =GPIO_PORTE_AFSEL_R ;
  104 0000002A 6801            LDR              R1, [R0]    ;
  105 0000002C F04F 0100       MOV              R1, #0      ;      Disables the
                                                             "alternate functio
                                                            ns" in the port
  106 00000030 6001            STR              R1, [R0]    ;
  107 00000032 487B            LDR              R0, =GPIO_PORTE_DEN_R ;
  108 00000034 6801            LDR              R1, [R0]    ;
  109 00000036 F04F 01FF       MOV              R1, #0xFF   ;     1 means enabl
                                                            e digital I/O



ARM Macro Assembler    Page 6 


  110 0000003A 6001            STR              R1, [R0]    ;
  111 0000003C         ; Configure Port F
  112 0000003C 4979            LDR              R1, =GPIO_PORTF_LOCK_R ;  2) un
                                                            lock the lock regis
                                                            ter
  113 0000003E 487A            LDR              R0, =GPIO_LOCK_KEY ;   unlock G
                                                            PIO Port F Commit R
                                                            egister
  114 00000040 6008            STR              R0, [R1]    ;
  115 00000042 497A            LDR              R1, =GPIO_PORTF_CR_R ;    enabl
                                                            e commit for Port F
                                                            
  116 00000044 F04F 00FF       MOV              R0, #0xFF   ;               1 m
                                                            eans allow access
  117 00000048 6008            STR              R0, [R1]    ;
  118 0000004A 4979            LDR              R1, =GPIO_PORTF_DIR_R ;   5) se
                                                            t direction registe
                                                            r
  119 0000004C F04F 000E       MOV              R0,#0x0E    ;
  120 00000050 6008            STR              R0, [R1]    ;
  121 00000052 4978            LDR              R1, =GPIO_PORTF_AFSEL_R ; 6) re
                                                            gular port function
                                                            
  122 00000054 F04F 0000       MOV              R0, #0      ;                  
                                                              0 means disable a
                                                            lternate function
  123 00000058 6008            STR              R0, [R1]    ;
  124 0000005A 4977            LDR              R1, =GPIO_PORTF_PUR_R ;     pul
                                                            l-up resistors for 
                                                            PF4,PF0
  125 0000005C F04F 0011       MOV              R0, #0x11   ;                 1
                                                            )enable for negativ
                                                            e logic
  126 00000060 6008            STR              R0, [R1]    ;
  127 00000062 4976            LDR              R1, =GPIO_PORTF_DEN_R ;     7) 
                                                            enable Port F digit
                                                            al port
  128 00000064 F04F 00FF       MOV              R0, #0xFF   ;                 1
                                                             means enable digit
                                                            al I/O
  129 00000068 6008            STR              R0, [R1]    ;
  130 0000006A         ; Setting up variables
  131 0000006A         Configure
  132 0000006A 4975            LDR              R1, =MAX_DELAY ;  
  133 0000006C F04F 0205       MOV              R2, #5      ;     
  134 00000070 FBB1 F2F2       UDIV             R2, R1, R2  ;  split the max de
                                                            lay into 5 equal se
                                                            ctions
  135 00000074 4973            LDR              R1, =delay_inc ;
  136 00000076 600A            STR              R2, [R1]    ;   delay_inc = (MA
                                                            X_DELAY / 5)
  137 00000078         
  138 00000078 4972            LDR              R1, =delay_inc ;
  139 0000007A 680A            LDR              R2, [R1]    ;
  140 0000007C F04F 0304       MOV              R3, #4      ;
  141 00000080 FB02 F203       MUL              R2, R2, R3  ; 
  142 00000084 4970            LDR              R1, =delay_off ; 
  143 00000086 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_off starts @ 4/



ARM Macro Assembler    Page 7 


                                                            5 of the MAX_DELAY
  144 00000088         
  145 00000088 496E            LDR              R1, =delay_inc ;
  146 0000008A 680A            LDR              R2, [R1]    ;
  147 0000008C 496F            LDR              R1, =delay_on ;
  148 0000008E 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_on on starts @ 
                                                            1/5 of the MAX_DELA
                                                            Y
  149 00000090         
  150 00000090 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  151 00000092         
  152 00000092         main_loop
  153 00000092         ; The main loop engine
  154 00000092 496F            LDR              R1, =GPIO_PORTF_DATA_R ;
  155 00000094 680A            LDR              R2, [R1]    ;
  156 00000096         
  157 00000096         ; If the button is pushed, Start breathing
  158 00000096 F002 0210       AND              R2, R2, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  159 0000009A 2A00            CMP              R2, #0x00   ;
  160 0000009C D101            BNE              Blink_ifPushed ;  If SW1 is pus
                                                            hed, start the brea
                                                            thing
  161 0000009E F000 F835       BL               Breathe_Start ;
  162 000000A2         
  163 000000A2         Blink_ifPushed
  164 000000A2 496C            LDR              R1, =GPIO_PORTE_DATA_R ;
  165 000000A4 4A6C            LDR              R2, =prev_button_state ;
  166 000000A6 7812            LDRB             R2, [R2]    ;
  167 000000A8 680B            LDR              R3, [R1]    ;    <- R3 holds th
                                                            e data from the Por
                                                            tE data register
  168 000000AA F003 0302       AND              R3, R3, #0x02 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  169 000000AE 4293            CMP              R3, R2      ;     <- Check if t
                                                            he button is in the
                                                             same state as befo
                                                            re 
  170 000000B0 D01A            BEQ              Blink       ;
  171 000000B2 4A69            LDR              R2, =prev_button_state ;
  172 000000B4 7013            STRB             R3, [R2]    ;
  173 000000B6         ; If the button is pushed, set PE4 to 1
  174 000000B6 2B00            CMP              R3, #0x00   ;   If the button i
                                                            s pushed
  175 000000B8 D100            BNE              Blink_incrementDuty ;
  176 000000BA E015            B                Blink       ;
  177 000000BC         Blink_incrementDuty
  178 000000BC         ; Incrementing the duty time
  179 000000BC 4A61            LDR              R2, =delay_inc ;
  180 000000BE 6812            LDR              R2, [R2]    ;    
  181 000000C0 4961            LDR              R1, =delay_off ;   
  182 000000C2 680B            LDR              R3, [R1]    ;    
  183 000000C4 EBA3 0302       SUB              R3, R3, R2  ;    Decrement the 
                                                            off time



ARM Macro Assembler    Page 8 


  184 000000C8 600B            STR              R3, [R1]    ;
  185 000000CA 4960            LDR              R1, =delay_on ;
  186 000000CC 680B            LDR              R3, [R1]    ;
  187 000000CE 4413            ADD              R3, R3, R2  ;    Increment the 
                                                            on time
  188 000000D0 600B            STR              R3, [R1]    ;
  189 000000D2         
  190 000000D2 495D            LDR              R1, =delay_off ;
  191 000000D4 680A            LDR              R2, [R1]    ;
  192 000000D6 2A00            CMP              R2, #0      ;
  193 000000D8 D506            BPL              Blink       ;    If the the off
                                                             time is < 0 (off <
                                                             0%, on > 100%), re
                                                            set the values to o
                                                            ff = 100%, on = 0%
  194 000000DA 4A59            LDR              R2, =MAX_DELAY ;
  195 000000DC 495A            LDR              R1, =delay_off ;
  196 000000DE 600A            STR              R2, [R1]    ;
  197 000000E0 495A            LDR              R1, =delay_on ;
  198 000000E2 F04F 0200       MOV              R2, #0      ;     Reset the on 
                                                            time to 0 (light is
                                                             always off)
  199 000000E6 600A            STR              R2, [R1]    ;
  200 000000E8         
  201 000000E8         Blink
  202 000000E8         ; Turn off the light and wait
  203 000000E8 495A            LDR              R1, =GPIO_PORTE_DATA_R ;
  204 000000EA 680A            LDR              R2, [R1]    ;
  205 000000EC F022 0201       BIC              R2, #0x01   ;
  206 000000F0 600A            STR              R2, [R1]    ;
  207 000000F2 4A55            LDR              R2, =delay_off ;
  208 000000F4 6810            LDR              R0, [R2]    ;
  209 000000F6 F000 F848       BL               delay       ;   Delay the progr
                                                            am for a amount of 
                                                            time specified in R
                                                            7
  210 000000FA         ; Turn on the light and wait
  211 000000FA 680A            LDR              R2, [R1]    ;
  212 000000FC F042 0201       ORR              R2, #0x01   ;  
  213 00000100 600A            STR              R2, [R1]    ;
  214 00000102 4A52            LDR              R2, =delay_on ;
  215 00000104 6810            LDR              R0, [R2]    ;
  216 00000106 F000 F840       BL               delay       ;
  217 0000010A         
  218 0000010A E7C2            B                main_loop
  219 0000010C         ;-------------------------------------------------------
                       ----------------------------------------
  220 0000010C         Breathe_Start
  221 0000010C         ; a subroutine that handles all the breathing functional
                       ity by completly reworking everything
  222 0000010C B4FF            PUSH             {R0-R7}     ;
  223 0000010E E92D 4100       PUSH             {R8, LR}    ;
  224 00000112         
  225 00000112         ; Setting up variables
  226 00000112 4850            LDR              R0, =GPIO_PORTE_DATA_R ;
  227 00000114 F8DF 9138       LDR              R9, =GPIO_PORTF_DATA_R ;
  228 00000118 F44F 42BC       LDR              R2, =BREATHE_DELAY_MAX ;
  229 0000011C F44F 73FA       MOV              R3, #500    ;
  230 00000120 FBB2 F4F3       UDIV             R4, R2, R3  ;   The increments 



ARM Macro Assembler    Page 9 


                                                            of the delay
  231 00000124 F102 0500       ADD              R5, R2, #0  ;    Default: off f
                                                            or 4/5 of 80Hz
  232 00000128 F04F 0600       MOV              R6, #0      ;    Default: on fo
                                                            r 1/5 of 80Hz
  233 0000012C F102 0700       ADD              R7, R2, #0  ;
  234 00000130         
  235 00000130         Breathe_loop
  236 00000130         ; The main loop engine
  237 00000130 F8D9 1000       LDR              R1, [R9]    ;    <- R1 holds th
                                                            e data from the dat
                                                            a register
  238 00000134         Breathe_ifPushed
  239 00000134         ; If the button is pushed, Stop breathing
  240 00000134 F001 0310       AND              R3, R1, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  241 00000138 2B10            CMP              R3, #0x10   ;
  242 0000013A D100            BNE              Breathe_incrementDuty ;
  243 0000013C E021            B                Breathe_Stop ;
  244 0000013E         
  245 0000013E         Breathe_incrementDuty
  246 0000013E         ; Incrementing the duty time
  247 0000013E EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  248 00000142 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  249 00000144 2D00            CMP              R5, #0      ;
  250 00000146 D402            BMI              Breathe_Verse ;
  251 00000148 D001            BEQ              Breathe_Verse ;     Check if we
                                                            've stopped or froz
                                                            e the delay of the 
                                                            light (either R5 or
                                                             R6 reach zero)
  252 0000014A 2E00            CMP              R6, #0      ;
  253 0000014C D506            BPL              Breathe     ;
  254 0000014E         Breathe_Verse
  255 0000014E F04F 33FF       MOV              R3, #-1     ;
  256 00000152 FB04 F403       MUL              R4, R4, R3  ;    Once we reach 
                                                            a maximum, down/up 
                                                            or up depending on 
                                                            the scenario
  257 00000156 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  258 0000015A 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  259 0000015C         Breathe
  260 0000015C         ; Turn off the light and wait
  261 0000015C F021 0101       BIC              R1, #0x01   ;  
  262 00000160 6001            STR              R1, [R0]    ;
  263 00000162 B403            PUSH             {R0, R1}    ;
  264 00000164 F105 0000       ADD              R0, R5, #0  ;
  265 00000168 F000 F80F       BL               delay       ;     Delay the pro
                                                            gram for a amount o
                                                            f time specified in
                                                             R7
  266 0000016C BC03            POP              {R0, R1}    ;
  267 0000016E         ; Turn on the light and wait
  268 0000016E F041 0101       ORR              R1, #0x01   ;  



ARM Macro Assembler    Page 10 


  269 00000172 6001            STR              R1, [R0]    ;
  270 00000174 B403            PUSH             {R0, R1}    ;
  271 00000176 F106 0000       ADD              R0, R6, #0  ;
  272 0000017A F000 F806       BL               delay       ;
  273 0000017E BC03            POP              {R0, R1}    ;
  274 00000180         
  275 00000180 E7D6            B                Breathe_loop
  276 00000182         
  277 00000182         Breathe_Stop
  278 00000182 E8BD 4100       POP              {R8,LR}     ;
  279 00000186 BCFF            POP              {R0-R7}     ;
  280 00000188         
  281 00000188 4770            BX               LR          ;
  282 0000018A         ;-------------------------------------------------------
                       ----------------------------------------
  283 0000018A         delay
  284 0000018A         ; a subroutine that loops using the value at R0
  285 0000018A B403            PUSH             {R0, R1}    ;
  286 0000018C F04F 0100       MOV              R1, #0      ;
  287 00000190         delayLoop
  288 00000190 4288            CMP              R0, R1      ;   Loop until temp
                                                            orary value R1 reac
                                                            hes R0
  289 00000192 D002            BEQ              delayDone   ;
  290 00000194 F101 0101       ADD              R1, R1, #1  ; 
  291 00000198 E7FA            B                delayLoop   ;
  292 0000019A         delayDone
  293 0000019A BC03            POP              {R0, R1}    ;
  294 0000019C 4770            BX               LR          ;
  295 0000019E         
  296 0000019E         ;-------DEBUG_Init--------------------------------------
                       ----------------------------------------
  297 0000019E         ;Initiliazing Debug Dump
  298 0000019E         Debug_Init
  299 0000019E F8DF A0BC       LDR              R10, =data_capture
  300 000001A2 F8DF B0BC       LDR              R11, =time_capture 
                                                            ;  Created pointers
                                                            
  301 000001A6 B403            PUSH             {R0, R1}
  302 000001A8 B40C            PUSH             {R2, R3}
  303 000001AA F04F 0008       MOV              R0, #0x08   ;  8 bits in data_c
                                                            apture
  304 000001AE F04F 0132       MOV              R1, #50     ;
  305 000001B2         
  306 000001B2         setting_data_capture
  307 000001B2 F1A1 0101       SUB              R1,R1, #0x01
  308 000001B6 F04F 02FF       MOV              R2, #0xFF   ;
  309 000001BA F8CA 2000       STR              R2, [R10]
  310 000001BE 4482            ADD              R10, R10, R0
  311 000001C0 2900            CMP              R1, #0x0    ;
  312 000001C2 D1F6            BNE              setting_data_capture
  313 000001C4         
  314 000001C4 F04F 0132       MOV              R1, #50     ;
  315 000001C8 F04F 0204       MOV              R2, #0x04   ;
  316 000001CC FB00 F002       MUL              R0,R0, R2   ;
  317 000001D0         setting_time_capture
  318 000001D0 F04F 0201       MOV              R2, #0x01   ;
  319 000001D4 EBA1 0102       SUB              R1,R1, R2   ;
  320 000001D8 F04F 02FF       MOV              R2, #0xFF   ;



ARM Macro Assembler    Page 11 


  321 000001DC F8CA 2000       STR              R2, [R10]
  322 000001E0 4482            ADD              R10, R10, R0
  323 000001E2 2900            CMP              R1, #0x0    ;
  324 000001E4 D1F4            BNE              setting_time_capture
  325 000001E6         
  326 000001E6 F8DF A074       LDR              R10, =data_capture
  327 000001EA F8DF B074       LDR              R11,=time_capture
  328 000001EE BC0C            POP              {R2, R3}
  329 000001F0 BC03            POP              {R0, R1}
  330 000001F2 4770            BX               LR
  331 000001F4         
  332 000001F4         ;-------DEBUG_CAPTURE-----------------------------------
                       ----------------------------------------
  333 000001F4         ;saves one data point
  334 000001F4         Debug_Capture
  335 000001F4 B403            PUSH             {R0,R1}
  336 000001F6 4817            LDR              R0, =GPIO_PORTE_DATA_R
  337 000001F8 F000 0003       AND              R0, R0, #0x03 ;  Capturing Pins
                                                             E0 and E1
  338 000001FC 4919            LDR              R1, =NVIC_ST_CURRENT_R 
                                                            ; Capturing Time
  339 000001FE F8CA 0000       STR              R0, [R10]
  340 00000202 F8CB 1000       STR              R1, [R11]
  341 00000206 F10A 0A01       ADD              R10, R10, #0x01
  342 0000020A F10B 0B01       ADD              R11, R11, #0x01
  343 0000020E BC03            POP              {R0,R1}
  344 00000210 4770            BX               LR
  345 00000212         
  346 00000212         ;-------------------------------------------------------
                       ----------------------------------------
  347 00000212 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  348 00000214                 END                          ; end of file
              400FE608 
              40024400 
              40024420 
              4002451C 
              40025520 
              4C4F434B 
              40025524 
              40025400 
              40025420 
              40025510 
              4002551C 
              001864A8 
              00000000 
              00000000 
              00000000 
              400253FC 
              400243FC 
              00000000 
              00000000 
              00000000 
              E000E018 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 65 in file main.s
   Uses
      None
Comment: DATA unused
data_capture 0000000D

Symbol: data_capture
   Definitions
      At line 74 in file main.s
   Uses
      At line 299 in file main.s
      At line 326 in file main.s

delay_inc 00000000

Symbol: delay_inc
   Definitions
      At line 68 in file main.s
   Uses
      At line 135 in file main.s
      At line 138 in file main.s
      At line 145 in file main.s
      At line 179 in file main.s

delay_off 00000004

Symbol: delay_off
   Definitions
      At line 69 in file main.s
   Uses
      At line 142 in file main.s
      At line 181 in file main.s
      At line 190 in file main.s
      At line 195 in file main.s
      At line 207 in file main.s

delay_on 00000008

Symbol: delay_on
   Definitions
      At line 70 in file main.s
   Uses
      At line 147 in file main.s
      At line 185 in file main.s
      At line 197 in file main.s
      At line 214 in file main.s

prev_button_state 0000000C

Symbol: prev_button_state
   Definitions
      At line 71 in file main.s
   Uses
      At line 165 in file main.s
      At line 171 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


time_capture 0000003F

Symbol: time_capture
   Definitions
      At line 75 in file main.s
   Uses
      At line 300 in file main.s
      At line 327 in file main.s

7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 77 in file main.s
   Uses
      None
Comment: .text unused
Blink 000000E8

Symbol: Blink
   Definitions
      At line 201 in file main.s
   Uses
      At line 170 in file main.s
      At line 176 in file main.s
      At line 193 in file main.s

Blink_ifPushed 000000A2

Symbol: Blink_ifPushed
   Definitions
      At line 163 in file main.s
   Uses
      At line 160 in file main.s
Comment: Blink_ifPushed used once
Blink_incrementDuty 000000BC

Symbol: Blink_incrementDuty
   Definitions
      At line 177 in file main.s
   Uses
      At line 175 in file main.s
Comment: Blink_incrementDuty used once
Breathe 0000015C

Symbol: Breathe
   Definitions
      At line 259 in file main.s
   Uses
      At line 253 in file main.s
Comment: Breathe used once
Breathe_Start 0000010C

Symbol: Breathe_Start
   Definitions
      At line 220 in file main.s
   Uses
      At line 161 in file main.s
Comment: Breathe_Start used once
Breathe_Stop 00000182

Symbol: Breathe_Stop
   Definitions
      At line 277 in file main.s
   Uses
      At line 243 in file main.s
Comment: Breathe_Stop used once
Breathe_Verse 0000014E



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Breathe_Verse
   Definitions
      At line 254 in file main.s
   Uses
      At line 250 in file main.s
      At line 251 in file main.s

Breathe_ifPushed 00000134

Symbol: Breathe_ifPushed
   Definitions
      At line 238 in file main.s
   Uses
      None
Comment: Breathe_ifPushed unused
Breathe_incrementDuty 0000013E

Symbol: Breathe_incrementDuty
   Definitions
      At line 245 in file main.s
   Uses
      At line 242 in file main.s
Comment: Breathe_incrementDuty used once
Breathe_loop 00000130

Symbol: Breathe_loop
   Definitions
      At line 235 in file main.s
   Uses
      At line 275 in file main.s
Comment: Breathe_loop used once
Configure 0000006A

Symbol: Configure
   Definitions
      At line 131 in file main.s
   Uses
      None
Comment: Configure unused
Debug_Capture 000001F4

Symbol: Debug_Capture
   Definitions
      At line 334 in file main.s
   Uses
      None
Comment: Debug_Capture unused
Debug_Init 0000019E

Symbol: Debug_Init
   Definitions
      At line 298 in file main.s
   Uses
      At line 88 in file main.s
Comment: Debug_Init used once
Start 00000000

Symbol: Start



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 84 in file main.s
   Uses
      At line 79 in file main.s
Comment: Start used once
delay 0000018A

Symbol: delay
   Definitions
      At line 283 in file main.s
   Uses
      At line 209 in file main.s
      At line 216 in file main.s
      At line 265 in file main.s
      At line 272 in file main.s

delayDone 0000019A

Symbol: delayDone
   Definitions
      At line 292 in file main.s
   Uses
      At line 289 in file main.s
Comment: delayDone used once
delayLoop 00000190

Symbol: delayLoop
   Definitions
      At line 287 in file main.s
   Uses
      At line 291 in file main.s
Comment: delayLoop used once
main_loop 00000092

Symbol: main_loop
   Definitions
      At line 152 in file main.s
   Uses
      At line 218 in file main.s
Comment: main_loop used once
setting_data_capture 000001B2

Symbol: setting_data_capture
   Definitions
      At line 306 in file main.s
   Uses
      At line 312 in file main.s
Comment: setting_data_capture used once
setting_time_capture 000001D0

Symbol: setting_time_capture
   Definitions
      At line 317 in file main.s
   Uses
      At line 324 in file main.s
Comment: setting_time_capture used once
21 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BREATHE_DELAY_MAX 00005E00

Symbol: BREATHE_DELAY_MAX
   Definitions
      At line 57 in file main.s
   Uses
      At line 228 in file main.s
Comment: BREATHE_DELAY_MAX used once
GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 43 in file main.s
   Uses
      At line 113 in file main.s
Comment: GPIO_LOCK_KEY used once
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 103 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 164 in file main.s
      At line 203 in file main.s
      At line 226 in file main.s
      At line 336 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 107 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 98 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 121 in file main.s
Comment: GPIO_PORTF_AFSEL_R used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 42 in file main.s
   Uses
      At line 115 in file main.s
Comment: GPIO_PORTF_CR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 154 in file main.s
      At line 227 in file main.s

GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 127 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 118 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 41 in file main.s
   Uses
      At line 112 in file main.s
Comment: GPIO_PORTF_LOCK_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 124 in file main.s
Comment: GPIO_PORTF_PUR_R used once
MAX_DELAY 001864A8

Symbol: MAX_DELAY
   Definitions
      At line 56 in file main.s
   Uses
      At line 132 in file main.s
      At line 194 in file main.s

NVIC_ST_CTRL_CLK_SRC 00000004



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: NVIC_ST_CTRL_CLK_SRC
   Definitions
      At line 50 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_CLK_SRC unused
NVIC_ST_CTRL_COUNT 00010000

Symbol: NVIC_ST_CTRL_COUNT
   Definitions
      At line 49 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_COUNT unused
NVIC_ST_CTRL_ENABLE 00000001

Symbol: NVIC_ST_CTRL_ENABLE
   Definitions
      At line 52 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_ENABLE unused
NVIC_ST_CTRL_INTEN 00000002

Symbol: NVIC_ST_CTRL_INTEN
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_INTEN unused
NVIC_ST_CTRL_R E000E010

Symbol: NVIC_ST_CTRL_R
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_R unused
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 48 in file main.s
   Uses
      At line 338 in file main.s
Comment: NVIC_ST_CURRENT_R used once
NVIC_ST_RELOAD_M 00FFFFFF

Symbol: NVIC_ST_RELOAD_M
   Definitions
      At line 53 in file main.s
   Uses
      None
Comment: NVIC_ST_RELOAD_M unused
NVIC_ST_RELOAD_R E000E014

Symbol: NVIC_ST_RELOAD_R
   Definitions



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 47 in file main.s
   Uses
      None
Comment: NVIC_ST_RELOAD_R unused
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 44 in file main.s
   Uses
      At line 91 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 60 in file main.s
   Uses
      At line 87 in file main.s
Comment: SysTick_Init used once
SysTick_Wait10ms 00000000

Symbol: SysTick_Wait10ms
   Definitions
      At line 61 in file main.s
   Uses
      None
Comment: SysTick_Wait10ms unused
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 59 in file main.s
   Uses
      At line 86 in file main.s
Comment: TExaS_Init used once
3 symbols
387 symbols in table
