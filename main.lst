


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Faiyaz Mostofa & Zain Ahmed
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/28/2018
    5 00000000         ; Brief description of the program:
    6 00000000         ;   A collection of operations are done in this program 
                       (at once):
    7 00000000         ; - An internal Blue LED blinks repeatedly indicating th
                       at the program is running
    8 00000000         ; - A Red LED blinks on and off based on different patte
                       rns which can be changed by a switch (8Hz).
    9 00000000         ;   The LED will cycle through different patterns as spe
                       cified below:
   10 00000000         ;     :on for (1/40s) -> on for (1/20s) -> on for (3/40s
                       ) -> on for (1/10s) -> always on -> always off -> loop:
   11 00000000         ;   The delays for the blinking is handled by SysTick.s
   12 00000000         ; - The Red LED also has a breathing function can be act
                       ivated by holding the internal button @ PF4 on the micro
                       -controller.
   13 00000000         ;   The delays for the breathing is handled by the delay
                        function @ the end of this file.
   14 00000000         ;   - A debugging capture tool that runs 3rd time the lo
                       op finishes.
   15 00000000         ; Hardware connections (External: One button and one LED
                       )
   16 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
   17 00000000         ;  PE0 is a Red LED output (1 activates external LED on 
                       protoboard)
   18 00000000         ;  PF2 is a Green LED output (1 activates external LED o
                       n protoboard)
   19 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal)
   20 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   21 00000000         ;  Main Loop takes 925 cycles before debug_capture takes
                        22 cycles, for mere 2.3% intrusiveness
   22 00000000         
   23 00000000         ; PortE device registers
   24 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   25 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   26 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   27 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   28 00000000         ; PortF device registers
   29 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   30 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   31 00000000 40025420 
                       GPIO_PORTF_AFSEL_R



ARM Macro Assembler    Page 2 


                               EQU              0x40025420
   32 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   33 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   34 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   35 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   36 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   37 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   38 00000000         ; System Clock reigsters
   39 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   40 00000000         
   41 00000000         ;Variables that hold the maximum values 
   42 00000000 001864A8 
                       MAX_DELAY
                               EQU              0x1864A8    ; The interval size
                                                             of the delays (in 
                                                            cycles)
   43 00000000         ; 0x0c (in 10ms)
   44 00000000 00005E00 
                       BREATHE_DELAY_MAX
                               EQU              0x5E00      ; The delay require
                                                            d
   45 00000000         
   46 00000000                 IMPORT           TExaS_Init
   47 00000000                 IMPORT           SysTick_Init
   48 00000000         
   49 00000000                 THUMB
   50 00000000         ;------------Global Variables---------------------------
                       ----------------------------------------
   51 00000000                 AREA             DATA, ALIGN=2
   52 00000000         
   53 00000000         ;Blinking variables
   54 00000000 00 00 00 
              00       delay_inc
                               SPACE            4           ; how to increment 
                                                            the delays when we 
                                                            need to change them
                                                             (1/5 of MAX_DELAY)
                                                            
   55 00000004 00 00 00 
              00       delay_off
                               SPACE            4           ; how long the LED 
                                                            will stay off (in c
                                                            ycles)
   56 00000008 00 00 00 



ARM Macro Assembler    Page 3 


              00       delay_on
                               SPACE            4           ; how long the LED 
                                                            will stay on (in cy
                                                            cles)
   57 0000000C 00      prev_button_state
                               SPACE            1           ; captures whether 
                                                            a button has been r
                                                            eleased or pushed
   58 0000000D 00      green_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and toggles th
                                                            e blue LED after a 
                                                            certain time is met
                                                            .
   59 0000000E         
   60 0000000E         ;Debugging arrays
   61 0000000E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    data_capture
                               SPACE            50          ; Array of 50 8-byt
                                                            e numbers
   62 00000040         ; Start: 0x2000003f
   63 00000040         ; End:  0x20000090
   64 00000040 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    time_capture
                               SPACE            200         ; Array of 50 32-by
                                                            te numbers
   65 00000108         ; Start: 0x20000074
   66 00000108         ; End:  0x20000138
   67 00000108 00      debug_capture_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and captures d
                                                            ebugging data after
                                                             a certain amount o
                                                            f loops
   68 00000109         
   69 00000109 00      NEntries



ARM Macro Assembler    Page 5 


                               SPACE            1           ; Number of entries
                                                             in either array
   70 0000010A         
   71 0000010A                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   72 00000000                 THUMB
   73 00000000                 EXPORT           Start
   74 00000000         
   75 00000000         ;---------Main Code-------------------------------------
                       ----------------------------------------
   76 00000000         Start
   77 00000000         ; TExaS_Init sets bus clock at 80 MHz
   78 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   79 00000004 F000 F8E4       BL               Debug_Init  ; Initializes the D
                                                            ebugging Tools
   80 00000008 F7FF FFFE       BL               SysTick_Init ; Initializes the 
                                                            SysTick (method in 
                                                            SysTick.s)
   81 0000000C F000 F93A       BL               Ports_Init  ;  Initializes Port
                                                            s E,F
   82 00000010         ; PE0 = Red LED output
   83 00000010         ; PE1 = positive logic Input (Switch)
   84 00000010         ; PF2 = Blue LED output
   85 00000010         ; PF4 = Hold switch for breathing functionality
   86 00000010         
   87 00000010         ; Setting up variables
   88 00000010         Configure
   89 00000010 49B7            LDR              R1, =MAX_DELAY ;  
   90 00000012 F04F 0205       MOV              R2, #5      ;     
   91 00000016 FBB1 F2F2       UDIV             R2, R1, R2  ;  split the max de
                                                            lay into 5 equal se
                                                            ctions
   92 0000001A 49B6            LDR              R1, =delay_inc ;
   93 0000001C 600A            STR              R2, [R1]    ;   delay_inc = (MA
                                                            X_DELAY / 5)
   94 0000001E         
   95 0000001E 49B5            LDR              R1, =delay_inc ;
   96 00000020 680A            LDR              R2, [R1]    ;
   97 00000022 F04F 0304       MOV              R3, #4      ;
   98 00000026 FB02 F203       MUL              R2, R2, R3  ; 
   99 0000002A 49B3            LDR              R1, =delay_off ; 
  100 0000002C 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_off starts @ 4/
                                                            5 of the MAX_DELAY
  101 0000002E         
  102 0000002E 49B1            LDR              R1, =delay_inc ;
  103 00000030 680A            LDR              R2, [R1]    ;
  104 00000032 49B2            LDR              R1, =delay_on ;
  105 00000034 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_on on starts @ 
                                                            1/5 of the MAX_DELA
                                                            Y
  106 00000036         
  107 00000036 49B2            LDR              R1, =green_counter ;
  108 00000038 F04F 0200       MOV              R2, #0      ;
  109 0000003C 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he green_counter to
                                                             0



ARM Macro Assembler    Page 6 


  110 0000003E 49B1            LDR              R1, =debug_capture_counter ;
  111 00000040 F04F 0200       MOV              R2, #0      ;
  112 00000044 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he debug_counter to
                                                             0
  113 00000046         
  114 00000046 F04F 0C00       MOV              R12, #0     ;   R12 will be use
                                                            d to quickly collec
                                                            t the seven states 
                                                            after release
  115 0000004A         
  116 0000004A B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  117 0000004C         
  118 0000004C         ; The main loop engine
  119 0000004C         main_loop
  120 0000004C         
  121 0000004C F000 F8A0       BL               Check_Green ; Check whether to 
                                                            toggle the green LE
                                                            D on or not
  122 00000050 F000 F8B0       BL               Check_Breathe ; Check if whethe
                                                            r we need to make t
                                                            he LED Breathe
  123 00000054         
  124 00000054         ;If a button @ PE1 is pushed, increment the blinking pat
                       tern
  125 00000054         Blink_ifPushed
  126 00000054 49AC            LDR              R1, =GPIO_PORTE_DATA_R ;
  127 00000056 4AAD            LDR              R2, =prev_button_state ;
  128 00000058 7812            LDRB             R2, [R2]    ;
  129 0000005A 680B            LDR              R3, [R1]    ;    <- R3 holds th
                                                            e data from the Por
                                                            tE data register
  130 0000005C F003 0302       AND              R3, R3, #0x02 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  131 00000060 4293            CMP              R3, R2      ;     <- Check if t
                                                            he button is in the
                                                             same state as befo
                                                            re 
  132 00000062 D023            BEQ              Blink       ;
  133 00000064 4AA9            LDR              R2, =prev_button_state ;
  134 00000066 7013            STRB             R3, [R2]    ;
  135 00000068         ; If the button is pushed, set PE4 to 1
  136 00000068 2B00            CMP              R3, #0x00   ;   If the button i
                                                            s released
  137 0000006A D104            BNE              Collect_skip ;
  138 0000006C F1BC 0F00       CMP              R12, #0     ;
  139 00000070 D101            BNE              Collect_skip ;
  140 00000072 F04F 0C07       MOV              R12, #7     ;
  141 00000076         Collect_skip
  142 00000076 2B02            CMP              R3, #0x02   ;   If the button i
                                                            s pushed
  143 00000078 D102            BNE              Blink_incrementDuty ;
  144 0000007A F000 F8CA       BL               Debug_Capture ;
  145 0000007E E015            B                Blink       ;
  146 00000080         Blink_incrementDuty
  147 00000080         ; Incrementing the duty time



ARM Macro Assembler    Page 7 


  148 00000080 4A9C            LDR              R2, =delay_inc ;
  149 00000082 6812            LDR              R2, [R2]    ;    
  150 00000084 499C            LDR              R1, =delay_off ;   
  151 00000086 680B            LDR              R3, [R1]    ;    
  152 00000088 EBA3 0302       SUB              R3, R3, R2  ;    Decrement the 
                                                            off time
  153 0000008C 600B            STR              R3, [R1]    ;
  154 0000008E 499B            LDR              R1, =delay_on ;
  155 00000090 680B            LDR              R3, [R1]    ;
  156 00000092 4413            ADD              R3, R3, R2  ;    Increment the 
                                                            on time
  157 00000094 600B            STR              R3, [R1]    ;
  158 00000096         ;Check if the duty time needs to be reset (always on -> 
                       always off)
  159 00000096 4998            LDR              R1, =delay_off ;
  160 00000098 680A            LDR              R2, [R1]    ;
  161 0000009A 2A00            CMP              R2, #0      ;
  162 0000009C D506            BPL              Blink       ;    If the the off
                                                             time is < 0 (off <
                                                             0%, on > 100%), re
                                                            set the values to o
                                                            ff = 100%, on = 0%
  163 0000009E 4A94            LDR              R2, =MAX_DELAY ;
  164 000000A0 4995            LDR              R1, =delay_off ;
  165 000000A2 600A            STR              R2, [R1]    ;
  166 000000A4 4995            LDR              R1, =delay_on ;
  167 000000A6 F04F 0200       MOV              R2, #0      ;     Reset the on 
                                                            time to 0 (light is
                                                             always off)
  168 000000AA 600A            STR              R2, [R1]    ;
  169 000000AC         Blink
  170 000000AC         ; Turn off the light and wait
  171 000000AC F1BC 0F00       CMP              R12, #0     ;
  172 000000B0 D003            BEQ              Blink_Off_Cap_Skip
  173 000000B2 F000 F8AE       BL               Debug_Capture ;
  174 000000B6 F1AC 0C01       SUB              R12, R12, #1 ;
  175 000000BA         Blink_Off_Cap_Skip
  176 000000BA 4993            LDR              R1, =GPIO_PORTE_DATA_R ;
  177 000000BC 680A            LDR              R2, [R1]    ;
  178 000000BE F022 0201       BIC              R2, #0x01   ;
  179 000000C2 600A            STR              R2, [R1]    ;
  180 000000C4 4A8C            LDR              R2, =delay_off ;
  181 000000C6 6810            LDR              R0, [R2]    ;
  182 000000C8 F000 F8D2       BL               delay       ; ;BL delay; Delay 
                                                            the program for a a
                                                            mount of time speci
                                                            fied in R0
  183 000000CC         ; Turn on the light and wait
  184 000000CC F1BC 0F00       CMP              R12, #0     ;
  185 000000D0 D003            BEQ              Blink_On_Cap_Skip
  186 000000D2 F000 F89E       BL               Debug_Capture ;
  187 000000D6 F1AC 0C01       SUB              R12, R12, #1 ;
  188 000000DA         Blink_On_Cap_Skip
  189 000000DA 498B            LDR              R1, =GPIO_PORTE_DATA_R ;
  190 000000DC 680A            LDR              R2, [R1]    ;
  191 000000DE F042 0201       ORR              R2, #0x01   ;  
  192 000000E2 600A            STR              R2, [R1]    ;
  193 000000E4 4A85            LDR              R2, =delay_on ;
  194 000000E6 6810            LDR              R0, [R2]    ;



ARM Macro Assembler    Page 8 


  195 000000E8 F000 F8C2       BL               delay       ;BL delay
  196 000000EC         
  197 000000EC E7AE            B                main_loop
  198 000000EE         ;-------------------------------------------------------
                       ----------------------------------------
  199 000000EE         Breathe_Start
  200 000000EE         ; a subroutine that handles all the breathing functional
                       ity by completly reworking everything
  201 000000EE B4FF            PUSH             {R0-R7}     ;
  202 000000F0 E92D 4100       PUSH             {R8, LR}    ;
  203 000000F4         
  204 000000F4         ; Setting up variables
  205 000000F4 4884            LDR              R0, =GPIO_PORTE_DATA_R ;
  206 000000F6 F8DF 9218       LDR              R9, =GPIO_PORTF_DATA_R ;
  207 000000FA F44F 42BC       LDR              R2, =BREATHE_DELAY_MAX ;
  208 000000FE F44F 73FA       MOV              R3, #500    ;
  209 00000102 FBB2 F4F3       UDIV             R4, R2, R3  ;   The increments 
                                                            of the delay
  210 00000106 F102 0500       ADD              R5, R2, #0  ;    Default: off f
                                                            or 4/5 of 80Hz
  211 0000010A F04F 0600       MOV              R6, #0      ;     Default: on f
                                                            or 1/5 of 80Hz
  212 0000010E F102 0700       ADD              R7, R2, #0  ;
  213 00000112         
  214 00000112         Breathe_loop
  215 00000112 F8D9 1000       LDR              R1, [R9]    ;    <- R1 holds th
                                                            e data from the dat
                                                            a register
  216 00000116         Breathe_ifPushed
  217 00000116 F001 0310       AND              R3, R1, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  218 0000011A 2B10            CMP              R3, #0x10   ;    Keep Breathing
                                                             until the button i
                                                            s released.
  219 0000011C D100            BNE              Breathe_incrementDuty ;
  220 0000011E E021            B                Breathe_Stop ;
  221 00000120         
  222 00000120         Breathe_incrementDuty
  223 00000120         ; Incrementing the duty time
  224 00000120 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  225 00000124 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  226 00000126 2D00            CMP              R5, #0      ;
  227 00000128 D402            BMI              Breathe_Verse ;
  228 0000012A D001            BEQ              Breathe_Verse ;   Check if we'v
                                                            e stopped or froze 
                                                            the delay of the li
                                                            ght (either R5 or R
                                                            6 reach zero)
  229 0000012C 2E00            CMP              R6, #0      ;
  230 0000012E D506            BPL              Breathe     ;
  231 00000130         Breathe_Verse
  232 00000130 F04F 33FF       MOV              R3, #-1     ;
  233 00000134 FB04 F403       MUL              R4, R4, R3  ;    Once we reach 
                                                            a maximum, down/up 
                                                            or up depending on 
                                                            the scenario



ARM Macro Assembler    Page 9 


  234 00000138 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  235 0000013C 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  236 0000013E         Breathe
  237 0000013E         ; Turn off the light and wait
  238 0000013E F021 0101       BIC              R1, #0x01   ;  
  239 00000142 6001            STR              R1, [R0]    ;
  240 00000144 B403            PUSH             {R0, R1}    ;
  241 00000146 F105 0000       ADD              R0, R5, #0  ;
  242 0000014A F000 F891       BL               delay       ;     Delay the pro
                                                            gram for a amount o
                                                            f time specified in
                                                             R7
  243 0000014E BC03            POP              {R0, R1}    ;
  244 00000150         ; Turn on the light and wait
  245 00000150 F041 0101       ORR              R1, #0x01   ;  
  246 00000154 6001            STR              R1, [R0]    ;
  247 00000156 B403            PUSH             {R0, R1}    ;
  248 00000158 F106 0000       ADD              R0, R6, #0  ;
  249 0000015C F000 F888       BL               delay       ;
  250 00000160 BC03            POP              {R0, R1}    ;
  251 00000162         
  252 00000162 E7D6            B                Breathe_loop
  253 00000164         
  254 00000164         Breathe_Stop
  255 00000164 E8BD 4100       POP              {R8,LR}     ;
  256 00000168 BCFF            POP              {R0-R7}     ;
  257 0000016A         
  258 0000016A 4770            BX               LR          ;
  259 0000016C         
  260 0000016C         ;-------CHECK_debug-------------------------------------
                       ----------------------------------------
  261 0000016C         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  262 0000016C         Check_Debug
  263 0000016C B403            PUSH             {R0, R1}    ;
  264 0000016E B504            PUSH             {R2, LR}    ;
  265 00000170 4964            LDR              R1, =debug_capture_counter ;
  266 00000172 780A            LDRB             R2, [R1]    ; 
  267 00000174 F102 0201       ADD              R2, R2, #1  ;   debug_capture_c
                                                            ounter++;
  268 00000178 700A            STRB             R2, [R1]    ;
  269 0000017A 2A06            CMP              R2, #6      ;
  270 0000017C D104            BNE              Check_Debug_Leave ;
  271 0000017E F000 F848       BL               Debug_Capture ;  if(debug_captu
                                                            re_counter == 3) ca
                                                            pture data
  272 00000182 F04F 0200       MOV              R2, #0      ;
  273 00000186 700A            STRB             R2, [R1]    ;
  274 00000188         Check_Debug_Leave
  275 00000188 E8BD 4004       POP              {R2, LR}    ;
  276 0000018C BC03            POP              {R0, R1}    ;
  277 0000018E 4770            BX               LR          ;  
  278 00000190         
  279 00000190         ;-------CHECK_Green-------------------------------------
                       ----------------------------------------
  280 00000190         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays



ARM Macro Assembler    Page 10 


  281 00000190         Check_Green
  282 00000190 B403            PUSH             {R0, R1}    ;
  283 00000192 B504            PUSH             {R2, LR}    ;
  284 00000194 495A            LDR              R1, =green_counter ;
  285 00000196 780A            LDRB             R2, [R1]    ;
  286 00000198 F102 0201       ADD              R2, R2, #1  ;   green_counter++
                                                            
  287 0000019C 700A            STRB             R2, [R1]    ;
  288 0000019E 2A03            CMP              R2, #3      ;
  289 000001A0 D104            BNE              Check_Green_Leave ; 
  290 000001A2 F000 F85D       BL               Toggle_Green ;  if(green_counte
                                                            r == 3) toggle Gree
                                                            n LED
  291 000001A6 F04F 0200       MOV              R2, #0      ;
  292 000001AA 700A            STRB             R2, [R1]    ;
  293 000001AC         Check_Green_Leave
  294 000001AC E8BD 4004       POP              {R2, LR}    ;
  295 000001B0 BC03            POP              {R0, R1}    ;
  296 000001B2 4770            BX               LR          ;  
  297 000001B4         
  298 000001B4         ;-------CHECK_Breathe-----------------------------------
                       ------------------------------------------
  299 000001B4         ; If the button @ PF4 is pushed, Start breathing
  300 000001B4         Check_Breathe
  301 000001B4 B403            PUSH             {R0, R1}    ;
  302 000001B6 B504            PUSH             {R2, LR}    ;
  303 000001B8 4955            LDR              R1, =GPIO_PORTF_DATA_R ;
  304 000001BA 680A            LDR              R2, [R1]    ;
  305 000001BC F002 0210       AND              R2, R2, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  306 000001C0 2A00            CMP              R2, #0x00   ;
  307 000001C2 D101            BNE              Check_Breathe_Leave ; If SW1 is
                                                             pushed, start the 
                                                            breathing
  308 000001C4 F7FF FF93       BL               Breathe_Start ;
  309 000001C8         Check_Breathe_Leave
  310 000001C8 E8BD 4004       POP              {R2, LR}    ;
  311 000001CC BC03            POP              {R0, R1}    ;
  312 000001CE 4770            BX               LR          ;
  313 000001D0         
  314 000001D0         ;-------DEBUG_Init--------------------------------------
                       ----------------------------------------
  315 000001D0         ;Initiliazing Debug Dump
  316 000001D0         Debug_Init
  317 000001D0 B403            PUSH             {R0, R1}
  318 000001D2 B40C            PUSH             {R2, R3}
  319 000001D4 4A4F            LDR              R2, =data_capture ;
  320 000001D6 4B50            LDR              R3, =time_capture 
                                                            ;  Created pointers
                                                            
  321 000001D8         ; Fill the data array with 0xFF (signifying empty)
  322 000001D8 F04F 0032       MOV              R0, #50     ;
  323 000001DC         setting_data_capture
  324 000001DC F1A0 0001       SUB              R0,R0, #0x01
  325 000001E0 F04F 01FF       MOV              R1, #0xFF   ;  
  326 000001E4 7011            STRB             R1, [R2]
  327 000001E6 F102 0201       ADD              R2, R2, #1  ;
  328 000001EA 2800            CMP              R0, #0x0    ;



ARM Macro Assembler    Page 11 


  329 000001EC D1F6            BNE              setting_data_capture
  330 000001EE         ; Fill the time array with 0xFFFFFFFF (signifying empty)
                        
  331 000001EE F04F 0032       MOV              R0, #50     ;
  332 000001F2         setting_time_capture
  333 000001F2 F1A0 0001       SUB              R0,R0, #1   ;
  334 000001F6 F04F 31FF       MOV              R1, #0xFFFFFFFF ;
  335 000001FA 6019            STR              R1, [R3]
  336 000001FC F103 0304       ADD              R3, R3, #4  ;
  337 00000200 2800            CMP              R0, #0x0    ;
  338 00000202 D1F6            BNE              setting_time_capture
  339 00000204         RestNEntries
  340 00000204 4845            LDR              R0, =NEntries ;
  341 00000206 F04F 0200       MOV              R2, #0      ;
  342 0000020A 7002            STRB             R2, [R0]    ;
  343 0000020C         
  344 0000020C BC0C            POP              {R2, R3}
  345 0000020E BC03            POP              {R0, R1}
  346 00000210 4770            BX               LR
  347 00000212         
  348 00000212         ;-------DEBUG_CAPTURE-----------------------------------
                       ----------------------------------------
  349 00000212         ; saves one data point
  350 00000212         Debug_Capture
  351 00000212 B403            PUSH             {R0,R1}
  352 00000214 B504            PUSH             {R2,LR}
  353 00000216 4841            LDR              R0 , =NEntries
  354 00000218 7801            LDRB             R1, [R0]
  355 0000021A 2932            CMP              R1 , #50
  356 0000021C D21C            BHS              DONE_C      ;   if (the array i
                                                            s not full)
  357 0000021E F101 0101       ADD              R1, R1, #1  ;   Add a new entry
                                                            
  358 00000222 7001            STRB             R1, [R0]    ;   NEntries++;
  359 00000224         ; Record the current data entries
  360 00000224 4838            LDR              R0, =GPIO_PORTE_DATA_R ; 
  361 00000226 6800            LDR              R0, [R0]    ;
  362 00000228 F100 0100       ADD              R1, R0, #0  ;
  363 0000022C F000 0001       AND              R0, R0, #0x01 ;  R0 holds the d
                                                            ata for PE0
  364 00000230 F001 0102       AND              R1, R1, #0x02 ;  R1 holds the d
                                                            ata for PE1
  365 00000234 EA4F 01C1       LSL              R1, R1, #3  ;   Move PE1 to PE4
                                                             
  366 00000238 EA41 0100       ORR              R1, R1, R0  ;   Merge the two b
                                                            its (PE0 | PE4)
  367 0000023C 4835            LDR              R0, =data_capture ;
  368 0000023E 4A37            LDR              R2, =NEntries ;
  369 00000240 7812            LDRB             R2, [R2]    ;
  370 00000242 4410            ADD              R0, R0, R2  ;
  371 00000244 7001            STRB             R1, [R0]    ;   Store the value
                                                             in the correct spo
                                                            t on the data array
                                                            
  372 00000246         ; Record the current time
  373 00000246 F04F 0004       MOV              R0, #4      ;
  374 0000024A FB02 F200       MUL              R2, R2, R0  ;   Increment in th
                                                            e time array by 4 b
                                                            ytes



ARM Macro Assembler    Page 12 


  375 0000024E 4932            LDR              R1, =time_capture ;
  376 00000250 4411            ADD              R1, R1, R2  ;
  377 00000252 4833            LDR              R0, =NVIC_ST_CURRENT_R
  378 00000254 6800            LDR              R0, [R0]    ;
  379 00000256 6008            STR              R0, [R1]    ;   Store the curre
                                                            nt time in the corr
                                                            ect spot on the tim
                                                            e array
  380 00000258         ; Restore the registers and leave
  381 00000258         DONE_C
  382 00000258 E8BD 4004       POP              {R2, LR}    ;   
  383 0000025C BC03            POP              {R0,R1}
  384 0000025E 4770            BX               LR          ;
  385 00000260         
  386 00000260         ;-------Toggle Green LED (PF2)--------------------------
                       ----------------------------------------
  387 00000260         ;Toggles the Green LED on and off (PF2)
  388 00000260         Toggle_Green
  389 00000260 B403            PUSH             {R0, R1}    ;
  390 00000262 482B            LDR              R0, =GPIO_PORTF_DATA_R ;
  391 00000264 6801            LDR              R1, [R0]    ;
  392 00000266 F081 0104       EOR              R1, #0x04   ;
  393 0000026A 6001            STR              R1, [R0]    ;
  394 0000026C BC03            POP              {R0, R1}    ;
  395 0000026E 4770            BX               LR          ;
  396 00000270         
  397 00000270         ;-------------------------------------------------------
                       ----------------------------------------
  398 00000270         delay
  399 00000270         ; a subroutine that loops using the value at R0
  400 00000270 B403            PUSH             {R0, R1}    ;
  401 00000272 F04F 0100       MOV              R1, #0      ;
  402 00000276         delayLoop
  403 00000276 4288            CMP              R0, R1      ;   Loop until temp
                                                            orary value, R1, re
                                                            aches R0
  404 00000278 D002            BEQ              delayDone   ;
  405 0000027A F101 0101       ADD              R1, R1, #1  ; 
  406 0000027E E7FA            B                delayLoop   ;
  407 00000280         delayDone
  408 00000280 BC03            POP              {R0, R1}    ;
  409 00000282 4770            BX               LR          ;
  410 00000284         
  411 00000284         ;-------------------------------------------------------
                       ----------------------------------------
  412 00000284         ; Port Initialization
  413 00000284         Ports_Init
  414 00000284 B403            PUSH             {R0, R1}    ;
  415 00000286 B504            PUSH             {R2, LR}    ;
  416 00000288 4826            LDR              R0, =SYSCTL_RCGCGPIO_R ;
  417 0000028A 6801            LDR              R1, [R0]    ;
  418 0000028C F041 0130       ORR              R1, R1, #0x30 ;   Start up Port
                                                             F and Port E
  419 00000290 6001            STR              R1, [R0]    ;
  420 00000292 BF00            NOP                          ;
  421 00000294 BF00            NOP                          ;
  422 00000296         ; Configure Port E
  423 00000296 4824            LDR              R0, =GPIO_PORTE_DIR_R ;
  424 00000298 6801            LDR              R1, [R0]    ;



ARM Macro Assembler    Page 13 


  425 0000029A F041 0101       ORR              R1, R1, #0x01 ;    PE0 is set t
                                                            o output (LED)
  426 0000029E F021 0112       BIC              R1, R1, #0x12 ;    PE1,4 are se
                                                            t to input (buttons
                                                            )
  427 000002A2 6001            STR              R1, [R0]    ;
  428 000002A4 4821            LDR              R0, =GPIO_PORTE_AFSEL_R ;
  429 000002A6 6801            LDR              R1, [R0]    ;
  430 000002A8 F04F 0100       MOV              R1, #0      ;      Disables the
                                                             "alternate functio
                                                            ns" in the port
  431 000002AC 6001            STR              R1, [R0]    ;
  432 000002AE 4820            LDR              R0, =GPIO_PORTE_DEN_R ;
  433 000002B0 6801            LDR              R1, [R0]    ;
  434 000002B2 F04F 01FF       MOV              R1, #0xFF   ;     1 means enabl
                                                            e digital I/O
  435 000002B6 6001            STR              R1, [R0]    ;
  436 000002B8         ; Configure Port F
  437 000002B8 491E            LDR              R1, =GPIO_PORTF_LOCK_R ;  2) un
                                                            lock the lock regis
                                                            ter
  438 000002BA 481F            LDR              R0, =GPIO_LOCK_KEY ;   unlock G
                                                            PIO Port F Commit R
                                                            egister
  439 000002BC 6008            STR              R0, [R1]    ;
  440 000002BE 491F            LDR              R1, =GPIO_PORTF_CR_R ;    enabl
                                                            e commit for Port F
                                                            
  441 000002C0 F04F 00FF       MOV              R0, #0xFF   ;               1 m
                                                            eans allow access
  442 000002C4 6008            STR              R0, [R1]    ;
  443 000002C6 491E            LDR              R1, =GPIO_PORTF_DIR_R ;   5) se
                                                            t direction registe
                                                            r
  444 000002C8 F04F 000E       MOV              R0,#0x0E    ;
  445 000002CC 6008            STR              R0, [R1]    ;
  446 000002CE 491D            LDR              R1, =GPIO_PORTF_AFSEL_R ; 6) re
                                                            gular port function
                                                            
  447 000002D0 F04F 0000       MOV              R0, #0      ;                  
                                                              0 means disable a
                                                            lternate function
  448 000002D4 6008            STR              R0, [R1]    ;
  449 000002D6 491C            LDR              R1, =GPIO_PORTF_PUR_R ;     pul
                                                            l-up resistors for 
                                                            PF4,PF0
  450 000002D8 F04F 0011       MOV              R0, #0x11   ;                 1
                                                            )enable for negativ
                                                            e logic
  451 000002DC 6008            STR              R0, [R1]    ;
  452 000002DE 491B            LDR              R1, =GPIO_PORTF_DEN_R ;     7) 
                                                            enable Port F digit
                                                            al port
  453 000002E0 F04F 00FF       MOV              R0, #0xFF   ;                 1
                                                             means enable digit
                                                            al I/O
  454 000002E4 6008            STR              R0, [R1]    ;
  455 000002E6 E8BD 4004       POP              {R2, LR}    ;
  456 000002EA BC03            POP              {R0, R1}    ;



ARM Macro Assembler    Page 14 


  457 000002EC 4770            BX               LR          ;
  458 000002EE         
  459 000002EE         ;-------------------------------------------------------
                       ----------------------------------------
  460 000002EE 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  461 000002F0                 END                          ; end of file
              001864A8 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              400243FC 
              00000000 
              400253FC 
              00000000 
              00000000 
              00000000 
              E000E018 
              400FE608 
              40024400 
              40024420 
              4002451C 
              40025520 
              4C4F434B 
              40025524 
              40025400 
              40025420 
              40025510 
              4002551C 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: DATA unused
NEntries 00000109

Symbol: NEntries
   Definitions
      At line 69 in file main.s
   Uses
      At line 340 in file main.s
      At line 353 in file main.s
      At line 368 in file main.s

data_capture 0000000E

Symbol: data_capture
   Definitions
      At line 61 in file main.s
   Uses
      At line 319 in file main.s
      At line 367 in file main.s

debug_capture_counter 00000108

Symbol: debug_capture_counter
   Definitions
      At line 67 in file main.s
   Uses
      At line 110 in file main.s
      At line 265 in file main.s

delay_inc 00000000

Symbol: delay_inc
   Definitions
      At line 54 in file main.s
   Uses
      At line 92 in file main.s
      At line 95 in file main.s
      At line 102 in file main.s
      At line 148 in file main.s

delay_off 00000004

Symbol: delay_off
   Definitions
      At line 55 in file main.s
   Uses
      At line 99 in file main.s
      At line 150 in file main.s
      At line 159 in file main.s
      At line 164 in file main.s
      At line 180 in file main.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

delay_on 00000008

Symbol: delay_on
   Definitions
      At line 56 in file main.s
   Uses
      At line 104 in file main.s
      At line 154 in file main.s
      At line 166 in file main.s
      At line 193 in file main.s

green_counter 0000000D

Symbol: green_counter
   Definitions
      At line 58 in file main.s
   Uses
      At line 107 in file main.s
      At line 284 in file main.s

prev_button_state 0000000C

Symbol: prev_button_state
   Definitions
      At line 57 in file main.s
   Uses
      At line 127 in file main.s
      At line 133 in file main.s

time_capture 00000040

Symbol: time_capture
   Definitions
      At line 64 in file main.s
   Uses
      At line 320 in file main.s
      At line 375 in file main.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 71 in file main.s
   Uses
      None
Comment: .text unused
Blink 000000AC

Symbol: Blink
   Definitions
      At line 169 in file main.s
   Uses
      At line 132 in file main.s
      At line 145 in file main.s
      At line 162 in file main.s

Blink_Off_Cap_Skip 000000BA

Symbol: Blink_Off_Cap_Skip
   Definitions
      At line 175 in file main.s
   Uses
      At line 172 in file main.s
Comment: Blink_Off_Cap_Skip used once
Blink_On_Cap_Skip 000000DA

Symbol: Blink_On_Cap_Skip
   Definitions
      At line 188 in file main.s
   Uses
      At line 185 in file main.s
Comment: Blink_On_Cap_Skip used once
Blink_ifPushed 00000054

Symbol: Blink_ifPushed
   Definitions
      At line 125 in file main.s
   Uses
      None
Comment: Blink_ifPushed unused
Blink_incrementDuty 00000080

Symbol: Blink_incrementDuty
   Definitions
      At line 146 in file main.s
   Uses
      At line 143 in file main.s
Comment: Blink_incrementDuty used once
Breathe 0000013E

Symbol: Breathe
   Definitions
      At line 236 in file main.s
   Uses
      At line 230 in file main.s
Comment: Breathe used once
Breathe_Start 000000EE



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Breathe_Start
   Definitions
      At line 199 in file main.s
   Uses
      At line 308 in file main.s
Comment: Breathe_Start used once
Breathe_Stop 00000164

Symbol: Breathe_Stop
   Definitions
      At line 254 in file main.s
   Uses
      At line 220 in file main.s
Comment: Breathe_Stop used once
Breathe_Verse 00000130

Symbol: Breathe_Verse
   Definitions
      At line 231 in file main.s
   Uses
      At line 227 in file main.s
      At line 228 in file main.s

Breathe_ifPushed 00000116

Symbol: Breathe_ifPushed
   Definitions
      At line 216 in file main.s
   Uses
      None
Comment: Breathe_ifPushed unused
Breathe_incrementDuty 00000120

Symbol: Breathe_incrementDuty
   Definitions
      At line 222 in file main.s
   Uses
      At line 219 in file main.s
Comment: Breathe_incrementDuty used once
Breathe_loop 00000112

Symbol: Breathe_loop
   Definitions
      At line 214 in file main.s
   Uses
      At line 252 in file main.s
Comment: Breathe_loop used once
Check_Breathe 000001B4

Symbol: Check_Breathe
   Definitions
      At line 300 in file main.s
   Uses
      At line 122 in file main.s
Comment: Check_Breathe used once
Check_Breathe_Leave 000001C8

Symbol: Check_Breathe_Leave



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 309 in file main.s
   Uses
      At line 307 in file main.s
Comment: Check_Breathe_Leave used once
Check_Debug 0000016C

Symbol: Check_Debug
   Definitions
      At line 262 in file main.s
   Uses
      None
Comment: Check_Debug unused
Check_Debug_Leave 00000188

Symbol: Check_Debug_Leave
   Definitions
      At line 274 in file main.s
   Uses
      At line 270 in file main.s
Comment: Check_Debug_Leave used once
Check_Green 00000190

Symbol: Check_Green
   Definitions
      At line 281 in file main.s
   Uses
      At line 121 in file main.s
Comment: Check_Green used once
Check_Green_Leave 000001AC

Symbol: Check_Green_Leave
   Definitions
      At line 293 in file main.s
   Uses
      At line 289 in file main.s
Comment: Check_Green_Leave used once
Collect_skip 00000076

Symbol: Collect_skip
   Definitions
      At line 141 in file main.s
   Uses
      At line 137 in file main.s
      At line 139 in file main.s

Configure 00000010

Symbol: Configure
   Definitions
      At line 88 in file main.s
   Uses
      None
Comment: Configure unused
DONE_C 00000258

Symbol: DONE_C
   Definitions
      At line 381 in file main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 356 in file main.s
Comment: DONE_C used once
Debug_Capture 00000212

Symbol: Debug_Capture
   Definitions
      At line 350 in file main.s
   Uses
      At line 144 in file main.s
      At line 173 in file main.s
      At line 186 in file main.s
      At line 271 in file main.s

Debug_Init 000001D0

Symbol: Debug_Init
   Definitions
      At line 316 in file main.s
   Uses
      At line 79 in file main.s
Comment: Debug_Init used once
Ports_Init 00000284

Symbol: Ports_Init
   Definitions
      At line 413 in file main.s
   Uses
      At line 81 in file main.s
Comment: Ports_Init used once
RestNEntries 00000204

Symbol: RestNEntries
   Definitions
      At line 339 in file main.s
   Uses
      None
Comment: RestNEntries unused
Start 00000000

Symbol: Start
   Definitions
      At line 76 in file main.s
   Uses
      At line 73 in file main.s
Comment: Start used once
Toggle_Green 00000260

Symbol: Toggle_Green
   Definitions
      At line 388 in file main.s
   Uses
      At line 290 in file main.s
Comment: Toggle_Green used once
delay 00000270

Symbol: delay
   Definitions
      At line 398 in file main.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 182 in file main.s
      At line 195 in file main.s
      At line 242 in file main.s
      At line 249 in file main.s

delayDone 00000280

Symbol: delayDone
   Definitions
      At line 407 in file main.s
   Uses
      At line 404 in file main.s
Comment: delayDone used once
delayLoop 00000276

Symbol: delayLoop
   Definitions
      At line 402 in file main.s
   Uses
      At line 406 in file main.s
Comment: delayLoop used once
main_loop 0000004C

Symbol: main_loop
   Definitions
      At line 119 in file main.s
   Uses
      At line 197 in file main.s
Comment: main_loop used once
setting_data_capture 000001DC

Symbol: setting_data_capture
   Definitions
      At line 323 in file main.s
   Uses
      At line 329 in file main.s
Comment: setting_data_capture used once
setting_time_capture 000001F2

Symbol: setting_time_capture
   Definitions
      At line 332 in file main.s
   Uses
      At line 338 in file main.s
Comment: setting_time_capture used once
34 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BREATHE_DELAY_MAX 00005E00

Symbol: BREATHE_DELAY_MAX
   Definitions
      At line 44 in file main.s
   Uses
      At line 207 in file main.s
Comment: BREATHE_DELAY_MAX used once
GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 36 in file main.s
   Uses
      At line 438 in file main.s
Comment: GPIO_LOCK_KEY used once
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 26 in file main.s
   Uses
      At line 428 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 24 in file main.s
   Uses
      At line 126 in file main.s
      At line 176 in file main.s
      At line 189 in file main.s
      At line 205 in file main.s
      At line 360 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 27 in file main.s
   Uses
      At line 432 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 25 in file main.s
   Uses
      At line 423 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 446 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 35 in file main.s
   Uses
      At line 440 in file main.s
Comment: GPIO_PORTF_CR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 29 in file main.s
   Uses
      At line 206 in file main.s
      At line 303 in file main.s
      At line 390 in file main.s

GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 452 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 30 in file main.s
   Uses
      At line 443 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 437 in file main.s
Comment: GPIO_PORTF_LOCK_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 449 in file main.s
Comment: GPIO_PORTF_PUR_R used once
MAX_DELAY 001864A8

Symbol: MAX_DELAY
   Definitions
      At line 42 in file main.s
   Uses
      At line 89 in file main.s
      At line 163 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 377 in file main.s
Comment: NVIC_ST_CURRENT_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 416 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 47 in file main.s
   Uses
      At line 80 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 46 in file main.s
   Uses
      At line 78 in file main.s
Comment: TExaS_Init used once
2 symbols
395 symbols in table
