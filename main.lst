


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Faiyaz Mostofa & Zaine
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/14/2018
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ; Hardware connections (External: One button and one LED
                       )
    8 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
    9 00000000         ;  PE0 is LED output (1 activates external LED on protob
                       oard)
   10 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal)
   11 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   12 00000000         ; Overall functionality of this system is to operate lik
                       e this
   13 00000000         ;   1) Make PE0 an output and make PE1 and PF4 inputs.
   14 00000000         ;   2) The system starts with the the LED toggling at 8H
                       z,
   15 00000000         ;      which is 8 times per second with a duty-cycle of 
                       20%.
   16 00000000         ;      Therefore, the LED is ON for (0.2*1/8)th of a sec
                       ond
   17 00000000         ;      and OFF for (0.8*1/8)th of a second.
   18 00000000         ;   3) When the button on (PE1) is pressed-and-released 
                       increase
   19 00000000         ;      the duty cycle by 20% (modulo 100%). Therefore fo
                       r each
   20 00000000         ;      press-and-release the duty cycle changes from 20%
                        to 40% to 60%
   21 00000000         ;      to 80% to 100%(ON) to 0%(Off) to 20% to 40% so on
                       
   22 00000000         ;   4) Implement a "breathing LED" when SW1 (PF4) on the
                        Launchpad is pressed:
   23 00000000         ;      a) Be creative and play around with what "breathi
                       ng" means.
   24 00000000         ;         An example of "breathing" is most computers po
                       wer LED in sleep mode
   25 00000000         ;         (e.g., https://www.youtube.com/watch?v=ZT6siXy
                       IjvQ).
   26 00000000         ;      b) When (PF4) is released while in breathing mode
                       , resume blinking at 8Hz.
   27 00000000         ;         The duty cycle can either match the most recen
                       t duty-
   28 00000000         ;         cycle or reset to 20%.
   29 00000000         ;      TIP: debugging the breathing LED algorithm and fe
                       el on the simulator is impossible.
   30 00000000         ; PortE device registers
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 



ARM Macro Assembler    Page 2 


                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         ; PortF device registers
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   42 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   43 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   44 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   45 00000000         ; System Clock reigsters
   46 00000000 E000E010 
                       NVIC_ST_CTRL_R
                               EQU              0xE000E010
   47 00000000 E000E014 
                       NVIC_ST_RELOAD_R
                               EQU              0xE000E014
   48 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   49 00000000         
   50 00000000 00010000 
                       NVIC_ST_CTRL_COUNT
                               EQU              0x00010000  ; Count flag
   51 00000000 00000004 
                       NVIC_ST_CTRL_CLK_SRC
                               EQU              0x00000004  ; Clock Source
   52 00000000 00000002 
                       NVIC_ST_CTRL_INTEN
                               EQU              0x00000002  ; Interrupt enable
   53 00000000 00000001 
                       NVIC_ST_CTRL_ENABLE
                               EQU              0x00000001  ; Counter mode
   54 00000000 00FFFFFF 
                       NVIC_ST_RELOAD_M
                               EQU              0x00FFFFFF  ; Counter load valu
                                                            e
   55 00000000         



ARM Macro Assembler    Page 3 


   56 00000000         ;Variables that hold the maximum values 
   57 00000000 001864A8 
                       MAX_DELAY
                               EQU              0x1864A8    ;0x249700    ; The 
                                                            interval size of th
                                                            e delays
   58 00000000 00005E00 
                       BREATHE_DELAY_MAX
                               EQU              0x5E00      ; The delay require
                                                            d
   59 00000000         
   60 00000000                 IMPORT           TExaS_Init
   61 00000000                 IMPORT           SysTick_Init
   62 00000000         
   63 00000000                 THUMB
   64 00000000         ;------------Global Variables---------------------------
                       ----------------------------------------
   65 00000000                 AREA             DATA, ALIGN=2
   66 00000000         
   67 00000000         ;Blinking variables
   68 00000000 00 00 00 
              00       delay_inc
                               SPACE            4           ; how to increment 
                                                            the delays when we 
                                                            need to change them
                                                             (1/5 of MAX_DELAY)
                                                            
   69 00000004 00 00 00 
              00       delay_off
                               SPACE            4           ; how long the LED 
                                                            will stay off (in c
                                                            ycles)
   70 00000008 00 00 00 
              00       delay_on
                               SPACE            4           ; how long the LED 
                                                            will stay on (in cy
                                                            cles)
   71 0000000C 00      prev_button_state
                               SPACE            1           ; captures whether 
                                                            a button has been r
                                                            eleased or pushed
   72 0000000D 00      green_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and toggles th
                                                            e blue LED after a 
                                                            certain time is met
                                                            .
   73 0000000E         
   74 0000000E         ;Debuggin variables
   75 0000000E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    data_capture
                               SPACE            50          ; Array of 50 8-byt
                                                            e numbers
   76 00000040 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 5 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    time_capture
                               SPACE            200         ; Array of 50 32-by
                                                            te numbers
   77 00000108 00      debug_capture_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and captures d
                                                            ebugging data after
                                                             a certain amount o
                                                            f loops
   78 00000109         
   79 00000109 00      NEntries
                               SPACE            1           ; Number of entries
                                                             in either array 
   80 0000010A         
   81 0000010A                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   82 00000000                 THUMB
   83 00000000                 EXPORT           Start
   84 00000000         
   85 00000000         ;R10 = data_capture pointer
   86 00000000         ;R11 = time_capture pointer
   87 00000000         ;---------Main Code-------------------------------------
                       ----------------------------------------
   88 00000000         Start
   89 00000000         ; TExaS_Init sets bus clock at 80 MHz
   90 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   91 00000004 F000 F8F9       BL               Debug_Init  ; Initializes the D
                                                            ebugging Tools
   92 00000008 F7FF FFFE       BL               SysTick_Init ; Initializes the 
                                                            SysTick
   93 0000000C         
   94 0000000C         ; Port Initialization
   95 0000000C 48A9            LDR              R0, =SYSCTL_RCGCGPIO_R ;
   96 0000000E 6801            LDR              R1, [R0]    ;
   97 00000010 F041 0130       ORR              R1, R1, #0x30 ;   Start up Port
                                                             F and Port E
   98 00000014 6001            STR              R1, [R0]    ;
   99 00000016 BF00            NOP                          ;
  100 00000018 BF00            NOP                          ;
  101 0000001A         ; Configure Port E



ARM Macro Assembler    Page 6 


  102 0000001A 48A7            LDR              R0, =GPIO_PORTE_DIR_R ;
  103 0000001C 6801            LDR              R1, [R0]    ;
  104 0000001E F041 0101       ORR              R1, R1, #0x01 ;    PE0 is set t
                                                            o output (LED)
  105 00000022 F021 0112       BIC              R1, R1, #0x12 ;    PE1,4 are se
                                                            t to input (buttons
                                                            )
  106 00000026 6001            STR              R1, [R0]    ;
  107 00000028 48A4            LDR              R0, =GPIO_PORTE_AFSEL_R ;
  108 0000002A 6801            LDR              R1, [R0]    ;
  109 0000002C F04F 0100       MOV              R1, #0      ;      Disables the
                                                             "alternate functio
                                                            ns" in the port
  110 00000030 6001            STR              R1, [R0]    ;
  111 00000032 48A3            LDR              R0, =GPIO_PORTE_DEN_R ;
  112 00000034 6801            LDR              R1, [R0]    ;
  113 00000036 F04F 01FF       MOV              R1, #0xFF   ;     1 means enabl
                                                            e digital I/O
  114 0000003A 6001            STR              R1, [R0]    ;
  115 0000003C         ; Configure Port F
  116 0000003C 49A1            LDR              R1, =GPIO_PORTF_LOCK_R ;  2) un
                                                            lock the lock regis
                                                            ter
  117 0000003E 48A2            LDR              R0, =GPIO_LOCK_KEY ;   unlock G
                                                            PIO Port F Commit R
                                                            egister
  118 00000040 6008            STR              R0, [R1]    ;
  119 00000042 49A2            LDR              R1, =GPIO_PORTF_CR_R ;    enabl
                                                            e commit for Port F
                                                            
  120 00000044 F04F 00FF       MOV              R0, #0xFF   ;               1 m
                                                            eans allow access
  121 00000048 6008            STR              R0, [R1]    ;
  122 0000004A 49A1            LDR              R1, =GPIO_PORTF_DIR_R ;   5) se
                                                            t direction registe
                                                            r
  123 0000004C F04F 000E       MOV              R0,#0x0E    ;
  124 00000050 6008            STR              R0, [R1]    ;
  125 00000052 49A0            LDR              R1, =GPIO_PORTF_AFSEL_R ; 6) re
                                                            gular port function
                                                            
  126 00000054 F04F 0000       MOV              R0, #0      ;                  
                                                              0 means disable a
                                                            lternate function
  127 00000058 6008            STR              R0, [R1]    ;
  128 0000005A 499F            LDR              R1, =GPIO_PORTF_PUR_R ;     pul
                                                            l-up resistors for 
                                                            PF4,PF0
  129 0000005C F04F 0011       MOV              R0, #0x11   ;                 1
                                                            )enable for negativ
                                                            e logic
  130 00000060 6008            STR              R0, [R1]    ;
  131 00000062 499E            LDR              R1, =GPIO_PORTF_DEN_R ;     7) 
                                                            enable Port F digit
                                                            al port
  132 00000064 F04F 00FF       MOV              R0, #0xFF   ;                 1
                                                             means enable digit
                                                            al I/O
  133 00000068 6008            STR              R0, [R1]    ;



ARM Macro Assembler    Page 7 


  134 0000006A         ; Setting up variables
  135 0000006A         Configure
  136 0000006A 499D            LDR              R1, =MAX_DELAY ;  
  137 0000006C F04F 0205       MOV              R2, #5      ;     
  138 00000070 FBB1 F2F2       UDIV             R2, R1, R2  ;  split the max de
                                                            lay into 5 equal se
                                                            ctions
  139 00000074 499B            LDR              R1, =delay_inc ;
  140 00000076 600A            STR              R2, [R1]    ;   delay_inc = (MA
                                                            X_DELAY / 5)
  141 00000078         
  142 00000078 499A            LDR              R1, =delay_inc ;
  143 0000007A 680A            LDR              R2, [R1]    ;
  144 0000007C F04F 0304       MOV              R3, #4      ;
  145 00000080 FB02 F203       MUL              R2, R2, R3  ; 
  146 00000084 4998            LDR              R1, =delay_off ; 
  147 00000086 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_off starts @ 4/
                                                            5 of the MAX_DELAY
  148 00000088         
  149 00000088 4996            LDR              R1, =delay_inc ;
  150 0000008A 680A            LDR              R2, [R1]    ;
  151 0000008C 4997            LDR              R1, =delay_on ;
  152 0000008E 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_on on starts @ 
                                                            1/5 of the MAX_DELA
                                                            Y
  153 00000090         
  154 00000090 4997            LDR              R1, =green_counter ;
  155 00000092 F04F 0200       MOV              R2, #0      ;
  156 00000096 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he green_counter to
                                                             0
  157 00000098 4996            LDR              R1, =debug_capture_counter ;
  158 0000009A F04F 0200       MOV              R2, #0      ;
  159 0000009E 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he debug_counter to
                                                             0
  160 000000A0         
  161 000000A0 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  162 000000A2         
  163 000000A2         ; The main loop engine
  164 000000A2         main_loop
  165 000000A2         
  166 000000A2 F000 F878       BL               Check_Debug ; ; Check if we nee
                                                            d to record debuggi
                                                            ng statistics
  167 000000A6 F000 F888       BL               Check_Green ; Check whether to 
                                                            toggle the green LE
                                                            D on or not
  168 000000AA F000 F898       BL               Check_Breathe ; Check if whethe
                                                            r we need to make t
                                                            he LED Breathe
  169 000000AE         
  170 000000AE         ;If a button @ PE1 is pushed, increment the blinking pat
                       tern
  171 000000AE         Blink_ifPushed



ARM Macro Assembler    Page 8 


  172 000000AE 4992            LDR              R1, =GPIO_PORTE_DATA_R ;
  173 000000B0 4A92            LDR              R2, =prev_button_state ;
  174 000000B2 7812            LDRB             R2, [R2]    ;
  175 000000B4 680B            LDR              R3, [R1]    ;    <- R3 holds th
                                                            e data from the Por
                                                            tE data register
  176 000000B6 F003 0302       AND              R3, R3, #0x02 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  177 000000BA 4293            CMP              R3, R2      ;     <- Check if t
                                                            he button is in the
                                                             same state as befo
                                                            re 
  178 000000BC D01A            BEQ              Blink       ;
  179 000000BE 4A8F            LDR              R2, =prev_button_state ;
  180 000000C0 7013            STRB             R3, [R2]    ;
  181 000000C2         ; If the button is pushed, set PE4 to 1
  182 000000C2 2B00            CMP              R3, #0x00   ;   If the button i
                                                            s pushed
  183 000000C4 D100            BNE              Blink_incrementDuty ;
  184 000000C6 E015            B                Blink       ;
  185 000000C8         Blink_incrementDuty
  186 000000C8         ; Incrementing the duty time
  187 000000C8 4A86            LDR              R2, =delay_inc ;
  188 000000CA 6812            LDR              R2, [R2]    ;    
  189 000000CC 4986            LDR              R1, =delay_off ;   
  190 000000CE 680B            LDR              R3, [R1]    ;    
  191 000000D0 EBA3 0302       SUB              R3, R3, R2  ;    Decrement the 
                                                            off time
  192 000000D4 600B            STR              R3, [R1]    ;
  193 000000D6 4985            LDR              R1, =delay_on ;
  194 000000D8 680B            LDR              R3, [R1]    ;
  195 000000DA 4413            ADD              R3, R3, R2  ;    Increment the 
                                                            on time
  196 000000DC 600B            STR              R3, [R1]    ;
  197 000000DE         
  198 000000DE 4982            LDR              R1, =delay_off ;
  199 000000E0 680A            LDR              R2, [R1]    ;
  200 000000E2 2A00            CMP              R2, #0      ;
  201 000000E4 D506            BPL              Blink       ;    If the the off
                                                             time is < 0 (off <
                                                             0%, on > 100%), re
                                                            set the values to o
                                                            ff = 100%, on = 0%
  202 000000E6 4A7E            LDR              R2, =MAX_DELAY ;
  203 000000E8 497F            LDR              R1, =delay_off ;
  204 000000EA 600A            STR              R2, [R1]    ;
  205 000000EC 497F            LDR              R1, =delay_on ;
  206 000000EE F04F 0200       MOV              R2, #0      ;     Reset the on 
                                                            time to 0 (light is
                                                             always off)
  207 000000F2 600A            STR              R2, [R1]    ;
  208 000000F4         
  209 000000F4         Blink
  210 000000F4         ; Turn off the light and wait
  211 000000F4 4980            LDR              R1, =GPIO_PORTE_DATA_R ;
  212 000000F6 680A            LDR              R2, [R1]    ;
  213 000000F8 F022 0201       BIC              R2, #0x01   ;
  214 000000FC 600A            STR              R2, [R1]    ;



ARM Macro Assembler    Page 9 


  215 000000FE 4A7A            LDR              R2, =delay_off ;
  216 00000100 6810            LDR              R0, [R2]    ;
  217 00000102 F000 F8CC       BL               delay       ;   Delay the progr
                                                            am for a amount of 
                                                            time specified in R
                                                            7
  218 00000106         ; Turn on the light and wait
  219 00000106 680A            LDR              R2, [R1]    ;
  220 00000108 F042 0201       ORR              R2, #0x01   ;  
  221 0000010C 600A            STR              R2, [R1]    ;
  222 0000010E 4A77            LDR              R2, =delay_on ;
  223 00000110 6810            LDR              R0, [R2]    ;
  224 00000112 F000 F8C4       BL               delay       ;
  225 00000116         
  226 00000116 E7C4            B                main_loop
  227 00000118         ;-------------------------------------------------------
                       ----------------------------------------
  228 00000118         Breathe_Start
  229 00000118         ; a subroutine that handles all the breathing functional
                       ity by completly reworking everything
  230 00000118 B4FF            PUSH             {R0-R7}     ;
  231 0000011A E92D 4100       PUSH             {R8, LR}    ;
  232 0000011E         
  233 0000011E         ; Setting up variables
  234 0000011E 4876            LDR              R0, =GPIO_PORTE_DATA_R ;
  235 00000120 F8DF 91DC       LDR              R9, =GPIO_PORTF_DATA_R ;
  236 00000124 F44F 42BC       LDR              R2, =BREATHE_DELAY_MAX ;
  237 00000128 F44F 73FA       MOV              R3, #500    ;
  238 0000012C FBB2 F4F3       UDIV             R4, R2, R3  ;   The increments 
                                                            of the delay
  239 00000130 F102 0500       ADD              R5, R2, #0  ;    Default: off f
                                                            or 4/5 of 80Hz
  240 00000134 F04F 0600       MOV              R6, #0      ;     Default: on f
                                                            or 1/5 of 80Hz
  241 00000138 F102 0700       ADD              R7, R2, #0  ;
  242 0000013C         
  243 0000013C         Breathe_loop
  244 0000013C         ; The main loop engine
  245 0000013C F8D9 1000       LDR              R1, [R9]    ;    <- R1 holds th
                                                            e data from the dat
                                                            a register
  246 00000140         Breathe_ifPushed
  247 00000140 F001 0310       AND              R3, R1, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  248 00000144 2B10            CMP              R3, #0x10   ;    ; Keep Breathi
                                                            ng until the button
                                                             is released.
  249 00000146 D100            BNE              Breathe_incrementDuty ;
  250 00000148 E021            B                Breathe_Stop ;
  251 0000014A         
  252 0000014A         Breathe_incrementDuty
  253 0000014A         ; Incrementing the duty time
  254 0000014A EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  255 0000014E 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  256 00000150 2D00            CMP              R5, #0      ;
  257 00000152 D402            BMI              Breathe_Verse ;



ARM Macro Assembler    Page 10 


  258 00000154 D001            BEQ              Breathe_Verse ;     Check if we
                                                            've stopped or froz
                                                            e the delay of the 
                                                            light (either R5 or
                                                             R6 reach zero)
  259 00000156 2E00            CMP              R6, #0      ;
  260 00000158 D506            BPL              Breathe     ;
  261 0000015A         Breathe_Verse
  262 0000015A F04F 33FF       MOV              R3, #-1     ;
  263 0000015E FB04 F403       MUL              R4, R4, R3  ;    Once we reach 
                                                            a maximum, down/up 
                                                            or up depending on 
                                                            the scenario
  264 00000162 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  265 00000166 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  266 00000168         Breathe
  267 00000168         ; Turn off the light and wait
  268 00000168 F021 0101       BIC              R1, #0x01   ;  
  269 0000016C 6001            STR              R1, [R0]    ;
  270 0000016E B403            PUSH             {R0, R1}    ;
  271 00000170 F105 0000       ADD              R0, R5, #0  ;
  272 00000174 F000 F893       BL               delay       ;     Delay the pro
                                                            gram for a amount o
                                                            f time specified in
                                                             R7
  273 00000178 BC03            POP              {R0, R1}    ;
  274 0000017A         ; Turn on the light and wait
  275 0000017A F041 0101       ORR              R1, #0x01   ;  
  276 0000017E 6001            STR              R1, [R0]    ;
  277 00000180 B403            PUSH             {R0, R1}    ;
  278 00000182 F106 0000       ADD              R0, R6, #0  ;
  279 00000186 F000 F88A       BL               delay       ;
  280 0000018A BC03            POP              {R0, R1}    ;
  281 0000018C         
  282 0000018C E7D6            B                Breathe_loop
  283 0000018E         
  284 0000018E         Breathe_Stop
  285 0000018E E8BD 4100       POP              {R8,LR}     ;
  286 00000192 BCFF            POP              {R0-R7}     ;
  287 00000194         
  288 00000194 4770            BX               LR          ;
  289 00000196         
  290 00000196         ;-------CHECK_debug-------------------------------------
                       ----------------------------------------
  291 00000196         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  292 00000196         Check_Debug
  293 00000196 B403            PUSH             {R0, R1}    ;
  294 00000198 B504            PUSH             {R2, LR}    ;
  295 0000019A 4956            LDR              R1, =debug_capture_counter ;
  296 0000019C 780A            LDRB             R2, [R1]    ; 
  297 0000019E F102 0201       ADD              R2, R2, #1  ;   debug_capture_c
                                                            ounter++;
  298 000001A2 700A            STRB             R2, [R1]    ;
  299 000001A4 2A03            CMP              R2, #3      ;
  300 000001A6 D104            BNE              Check_Debug_Leave ;
  301 000001A8 F000 F852       BL               Debug_Capture ;



ARM Macro Assembler    Page 11 


  302 000001AC F04F 0200       MOV              R2, #0      ;
  303 000001B0 700A            STRB             R2, [R1]    ;
  304 000001B2         Check_Debug_Leave
  305 000001B2 E8BD 4004       POP              {R2, LR}    ;
  306 000001B6 BC03            POP              {R0, R1}    ;
  307 000001B8 4770            BX               LR          ;     if(debug_capt
                                                            ure_counter == 3) c
                                                            apture data
  308 000001BA         
  309 000001BA         ;-------CHECK_Green-------------------------------------
                       ----------------------------------------
  310 000001BA         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  311 000001BA         Check_Green
  312 000001BA B403            PUSH             {R0, R1}    ;
  313 000001BC B504            PUSH             {R2, LR}    ;
  314 000001BE 494C            LDR              R1, =green_counter ;
  315 000001C0 780A            LDRB             R2, [R1]    ;
  316 000001C2 F102 0201       ADD              R2, R2, #1  ;   green_counter++
                                                            
  317 000001C6 700A            STRB             R2, [R1]    ;
  318 000001C8 2A03            CMP              R2, #3      ;
  319 000001CA D104            BNE              Check_Green_Leave ; if(green_co
                                                            unter == 3) toggle 
                                                            Green LED
  320 000001CC F000 F85F       BL               Toggle_Green ;
  321 000001D0 F04F 0200       MOV              R2, #0      ;
  322 000001D4 700A            STRB             R2, [R1]    ;
  323 000001D6         Check_Green_Leave
  324 000001D6 E8BD 4004       POP              {R2, LR}    ;
  325 000001DA BC03            POP              {R0, R1}    ;
  326 000001DC 4770            BX               LR          ;  
  327 000001DE         
  328 000001DE         ;-------CHECK_Breathe-----------------------------------
                       ------------------------------------------
  329 000001DE         ; If the button @ PF4 is pushed, Start breathing
  330 000001DE         Check_Breathe
  331 000001DE B403            PUSH             {R0, R1}    ;
  332 000001E0 B504            PUSH             {R2, LR}    ;
  333 000001E2 4947            LDR              R1, =GPIO_PORTF_DATA_R ;
  334 000001E4 680A            LDR              R2, [R1]    ;
  335 000001E6 F002 0210       AND              R2, R2, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  336 000001EA 2A00            CMP              R2, #0x00   ;
  337 000001EC D101            BNE              Check_Breathe_Leave ;  If SW1 i
                                                            s pushed, start the
                                                             breathing
  338 000001EE F7FF FF93       BL               Breathe_Start ;
  339 000001F2         Check_Breathe_Leave
  340 000001F2 E8BD 4004       POP              {R2, LR}    ;
  341 000001F6 BC03            POP              {R0, R1}    ;
  342 000001F8 4770            BX               LR          ;
  343 000001FA         
  344 000001FA         ;-------DEBUG_Init--------------------------------------
                       ----------------------------------------
  345 000001FA         ;Initiliazing Debug Dump
  346 000001FA         Debug_Init
  347 000001FA F8DF A108       LDR              R10, =data_capture



ARM Macro Assembler    Page 12 


  348 000001FE F8DF B108       LDR              R11, =time_capture 
                                                            ;  Created pointers
                                                            
  349 00000202         
  350 00000202 B403            PUSH             {R0, R1}
  351 00000204 B40C            PUSH             {R2, R3}
  352 00000206 F04F 0008       MOV              R0, #0x08   ;  8 bits in data_c
                                                            apture
  353 0000020A F04F 0132       MOV              R1, #50     ;
  354 0000020E         
  355 0000020E         setting_data_capture
  356 0000020E F1A1 0101       SUB              R1,R1, #0x01
  357 00000212 F04F 02FF       MOV              R2, #0xFF   ;
  358 00000216 F88A 2000       STRB             R2, [R10]
  359 0000021A 4482            ADD              R10, R10, R0
  360 0000021C 2900            CMP              R1, #0x0    ;
  361 0000021E D1F6            BNE              setting_data_capture
  362 00000220         
  363 00000220 F04F 0132       MOV              R1, #50     ;
  364 00000224 F04F 0204       MOV              R2, #0x04   ;
  365 00000228 FB00 F002       MUL              R0,R0, R2   ;
  366 0000022C         setting_time_capture
  367 0000022C F04F 0201       MOV              R2, #0x01   ;
  368 00000230 EBA1 0102       SUB              R1,R1, R2   ;
  369 00000234 F04F 32FF       MOV              R2, #0xFFFFFFFF ;
  370 00000238 F8CA 2000       STR              R2, [R10]
  371 0000023C 4482            ADD              R10, R10, R0
  372 0000023E 2900            CMP              R1, #0x0    ;
  373 00000240 D1F4            BNE              setting_time_capture
  374 00000242         
  375 00000242 F8DF A0C0       LDR              R10, =data_capture
  376 00000246 F8DF B0C0       LDR              R11,=time_capture
  377 0000024A BC0C            POP              {R2, R3}
  378 0000024C BC03            POP              {R0, R1}
  379 0000024E 4770            BX               LR
  380 00000250         
  381 00000250         ;-------DEBUG_CAPTURE-----------------------------------
                       ----------------------------------------
  382 00000250         ;saves one data point
  383 00000250         Debug_Capture
  384 00000250 B403            PUSH             {R0,R1}
  385 00000252 482E            LDR              R0 , =NEntries
  386 00000254 6800            LDR              R0, [R0]
  387 00000256 2832            CMP              R0 , #50
  388 00000258 D017            BEQ              DONE_C
  389 0000025A 4827            LDR              R0, =GPIO_PORTE_DATA_R
  390 0000025C F000 0002       AND              R0, R0, #0x02 ;  Capturing Pins
                                                             E0 and E1
  391 00000260 EA4F 00D0       LSR              R0, R0, #0x03 ;
  392 00000264 4924            LDR              R1, =GPIO_PORTE_DATA_R
  393 00000266 F001 0101       AND              R1,R1,#0x01 ;
  394 0000026A EA00 0001       AND              R0,R0,R1    ;
  395 0000026E 4928            LDR              R1, =NVIC_ST_CURRENT_R 
                                                            ; Capturing Time
  396 00000270 F88A 0000       STRB             R0, [R10]   ;   Finished Storin
                                                            g Data
  397 00000274         
  398 00000274 F8CB 1000       STR              R1, [R11]
  399 00000278 F10A 0A01       ADD              R10, R10, #0x01



ARM Macro Assembler    Page 13 


  400 0000027C F10B 0B04       ADD              R11, R11, #0x04
  401 00000280 4822            LDR              R0, =NEntries
  402 00000282 6801            LDR              R1, [R0]
  403 00000284 F101 0101       ADD              R1,R1, #0x01
  404 00000288 6001            STR              R1, [R0]
  405 0000028A         
  406 0000028A BC03    DONE_C  POP              {R0,R1}
  407 0000028C 4770            BX               LR          ;
  408 0000028E         
  409 0000028E         ;-------Toggle Green LED (PF2)--------------------------
                       ----------------------------------------
  410 0000028E         ;Toggles the Green LED on and off (PF2)
  411 0000028E         Toggle_Green
  412 0000028E B403            PUSH             {R0, R1}    ;
  413 00000290 481B            LDR              R0, =GPIO_PORTF_DATA_R ;
  414 00000292 6801            LDR              R1, [R0]    ;
  415 00000294 F081 0104       EOR              R1, #0x04   ;
  416 00000298 6001            STR              R1, [R0]    ;
  417 0000029A BC03            POP              {R0, R1}    ;
  418 0000029C 4770            BX               LR          ;
  419 0000029E         
  420 0000029E         ;-------------------------------------------------------
                       ----------------------------------------
  421 0000029E         delay
  422 0000029E         ; a subroutine that loops using the value at R0
  423 0000029E B403            PUSH             {R0, R1}    ;
  424 000002A0 F04F 0100       MOV              R1, #0      ;
  425 000002A4         delayLoop
  426 000002A4 4288            CMP              R0, R1      ;   Loop until temp
                                                            orary value R1 reac
                                                            hes R0
  427 000002A6 D002            BEQ              delayDone   ;
  428 000002A8 F101 0101       ADD              R1, R1, #1  ; 
  429 000002AC E7FA            B                delayLoop   ;
  430 000002AE         delayDone
  431 000002AE BC03            POP              {R0, R1}    ;
  432 000002B0 4770            BX               LR          ;
  433 000002B2         
  434 000002B2         ;-------------------------------------------------------
                       ----------------------------------------
  435 000002B2 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  436 000002B4                 END                          ; end of file
              400FE608 
              40024400 
              40024420 
              4002451C 
              40025520 
              4C4F434B 
              40025524 
              40025400 
              40025420 
              40025510 
              4002551C 
              001864A8 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 14 


              00000000 
              00000000 
              400243FC 
              00000000 
              400253FC 
              00000000 
              00000000 
              00000000 
              E000E018 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 65 in file main.s
   Uses
      None
Comment: DATA unused
NEntries 00000109

Symbol: NEntries
   Definitions
      At line 79 in file main.s
   Uses
      At line 385 in file main.s
      At line 401 in file main.s

data_capture 0000000E

Symbol: data_capture
   Definitions
      At line 75 in file main.s
   Uses
      At line 347 in file main.s
      At line 375 in file main.s

debug_capture_counter 00000108

Symbol: debug_capture_counter
   Definitions
      At line 77 in file main.s
   Uses
      At line 157 in file main.s
      At line 295 in file main.s

delay_inc 00000000

Symbol: delay_inc
   Definitions
      At line 68 in file main.s
   Uses
      At line 139 in file main.s
      At line 142 in file main.s
      At line 149 in file main.s
      At line 187 in file main.s

delay_off 00000004

Symbol: delay_off
   Definitions
      At line 69 in file main.s
   Uses
      At line 146 in file main.s
      At line 189 in file main.s
      At line 198 in file main.s
      At line 203 in file main.s
      At line 215 in file main.s

delay_on 00000008



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: delay_on
   Definitions
      At line 70 in file main.s
   Uses
      At line 151 in file main.s
      At line 193 in file main.s
      At line 205 in file main.s
      At line 222 in file main.s

green_counter 0000000D

Symbol: green_counter
   Definitions
      At line 72 in file main.s
   Uses
      At line 154 in file main.s
      At line 314 in file main.s

prev_button_state 0000000C

Symbol: prev_button_state
   Definitions
      At line 71 in file main.s
   Uses
      At line 173 in file main.s
      At line 179 in file main.s

time_capture 00000040

Symbol: time_capture
   Definitions
      At line 76 in file main.s
   Uses
      At line 348 in file main.s
      At line 376 in file main.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 81 in file main.s
   Uses
      None
Comment: .text unused
Blink 000000F4

Symbol: Blink
   Definitions
      At line 209 in file main.s
   Uses
      At line 178 in file main.s
      At line 184 in file main.s
      At line 201 in file main.s

Blink_ifPushed 000000AE

Symbol: Blink_ifPushed
   Definitions
      At line 171 in file main.s
   Uses
      None
Comment: Blink_ifPushed unused
Blink_incrementDuty 000000C8

Symbol: Blink_incrementDuty
   Definitions
      At line 185 in file main.s
   Uses
      At line 183 in file main.s
Comment: Blink_incrementDuty used once
Breathe 00000168

Symbol: Breathe
   Definitions
      At line 266 in file main.s
   Uses
      At line 260 in file main.s
Comment: Breathe used once
Breathe_Start 00000118

Symbol: Breathe_Start
   Definitions
      At line 228 in file main.s
   Uses
      At line 338 in file main.s
Comment: Breathe_Start used once
Breathe_Stop 0000018E

Symbol: Breathe_Stop
   Definitions
      At line 284 in file main.s
   Uses
      At line 250 in file main.s
Comment: Breathe_Stop used once
Breathe_Verse 0000015A



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Breathe_Verse
   Definitions
      At line 261 in file main.s
   Uses
      At line 257 in file main.s
      At line 258 in file main.s

Breathe_ifPushed 00000140

Symbol: Breathe_ifPushed
   Definitions
      At line 246 in file main.s
   Uses
      None
Comment: Breathe_ifPushed unused
Breathe_incrementDuty 0000014A

Symbol: Breathe_incrementDuty
   Definitions
      At line 252 in file main.s
   Uses
      At line 249 in file main.s
Comment: Breathe_incrementDuty used once
Breathe_loop 0000013C

Symbol: Breathe_loop
   Definitions
      At line 243 in file main.s
   Uses
      At line 282 in file main.s
Comment: Breathe_loop used once
Check_Breathe 000001DE

Symbol: Check_Breathe
   Definitions
      At line 330 in file main.s
   Uses
      At line 168 in file main.s
Comment: Check_Breathe used once
Check_Breathe_Leave 000001F2

Symbol: Check_Breathe_Leave
   Definitions
      At line 339 in file main.s
   Uses
      At line 337 in file main.s
Comment: Check_Breathe_Leave used once
Check_Debug 00000196

Symbol: Check_Debug
   Definitions
      At line 292 in file main.s
   Uses
      At line 166 in file main.s
Comment: Check_Debug used once
Check_Debug_Leave 000001B2

Symbol: Check_Debug_Leave



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 304 in file main.s
   Uses
      At line 300 in file main.s
Comment: Check_Debug_Leave used once
Check_Green 000001BA

Symbol: Check_Green
   Definitions
      At line 311 in file main.s
   Uses
      At line 167 in file main.s
Comment: Check_Green used once
Check_Green_Leave 000001D6

Symbol: Check_Green_Leave
   Definitions
      At line 323 in file main.s
   Uses
      At line 319 in file main.s
Comment: Check_Green_Leave used once
Configure 0000006A

Symbol: Configure
   Definitions
      At line 135 in file main.s
   Uses
      None
Comment: Configure unused
DONE_C 0000028A

Symbol: DONE_C
   Definitions
      At line 406 in file main.s
   Uses
      At line 388 in file main.s
Comment: DONE_C used once
Debug_Capture 00000250

Symbol: Debug_Capture
   Definitions
      At line 383 in file main.s
   Uses
      At line 301 in file main.s
Comment: Debug_Capture used once
Debug_Init 000001FA

Symbol: Debug_Init
   Definitions
      At line 346 in file main.s
   Uses
      At line 91 in file main.s
Comment: Debug_Init used once
Start 00000000

Symbol: Start
   Definitions
      At line 88 in file main.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 83 in file main.s
Comment: Start used once
Toggle_Green 0000028E

Symbol: Toggle_Green
   Definitions
      At line 411 in file main.s
   Uses
      At line 320 in file main.s
Comment: Toggle_Green used once
delay 0000029E

Symbol: delay
   Definitions
      At line 421 in file main.s
   Uses
      At line 217 in file main.s
      At line 224 in file main.s
      At line 272 in file main.s
      At line 279 in file main.s

delayDone 000002AE

Symbol: delayDone
   Definitions
      At line 430 in file main.s
   Uses
      At line 427 in file main.s
Comment: delayDone used once
delayLoop 000002A4

Symbol: delayLoop
   Definitions
      At line 425 in file main.s
   Uses
      At line 429 in file main.s
Comment: delayLoop used once
main_loop 000000A2

Symbol: main_loop
   Definitions
      At line 164 in file main.s
   Uses
      At line 226 in file main.s
Comment: main_loop used once
setting_data_capture 0000020E

Symbol: setting_data_capture
   Definitions
      At line 355 in file main.s
   Uses
      At line 361 in file main.s
Comment: setting_data_capture used once
setting_time_capture 0000022C

Symbol: setting_time_capture
   Definitions
      At line 366 in file main.s
   Uses



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

      At line 373 in file main.s
Comment: setting_time_capture used once
29 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BREATHE_DELAY_MAX 00005E00

Symbol: BREATHE_DELAY_MAX
   Definitions
      At line 58 in file main.s
   Uses
      At line 236 in file main.s
Comment: BREATHE_DELAY_MAX used once
GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 43 in file main.s
   Uses
      At line 117 in file main.s
Comment: GPIO_LOCK_KEY used once
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 107 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 172 in file main.s
      At line 211 in file main.s
      At line 234 in file main.s
      At line 389 in file main.s
      At line 392 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 111 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 102 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 125 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 42 in file main.s
   Uses
      At line 119 in file main.s
Comment: GPIO_PORTF_CR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 235 in file main.s
      At line 333 in file main.s
      At line 413 in file main.s

GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 131 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 122 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 41 in file main.s
   Uses
      At line 116 in file main.s
Comment: GPIO_PORTF_LOCK_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 128 in file main.s
Comment: GPIO_PORTF_PUR_R used once
MAX_DELAY 001864A8

Symbol: MAX_DELAY
   Definitions
      At line 57 in file main.s
   Uses
      At line 136 in file main.s
      At line 202 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


NVIC_ST_CTRL_CLK_SRC 00000004

Symbol: NVIC_ST_CTRL_CLK_SRC
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_CLK_SRC unused
NVIC_ST_CTRL_COUNT 00010000

Symbol: NVIC_ST_CTRL_COUNT
   Definitions
      At line 50 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_COUNT unused
NVIC_ST_CTRL_ENABLE 00000001

Symbol: NVIC_ST_CTRL_ENABLE
   Definitions
      At line 53 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_ENABLE unused
NVIC_ST_CTRL_INTEN 00000002

Symbol: NVIC_ST_CTRL_INTEN
   Definitions
      At line 52 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_INTEN unused
NVIC_ST_CTRL_R E000E010

Symbol: NVIC_ST_CTRL_R
   Definitions
      At line 46 in file main.s
   Uses
      None
Comment: NVIC_ST_CTRL_R unused
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 48 in file main.s
   Uses
      At line 395 in file main.s
Comment: NVIC_ST_CURRENT_R used once
NVIC_ST_RELOAD_M 00FFFFFF

Symbol: NVIC_ST_RELOAD_M
   Definitions
      At line 54 in file main.s
   Uses
      None
Comment: NVIC_ST_RELOAD_M unused
NVIC_ST_RELOAD_R E000E014




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

Symbol: NVIC_ST_RELOAD_R
   Definitions
      At line 47 in file main.s
   Uses
      None
Comment: NVIC_ST_RELOAD_R unused
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 44 in file main.s
   Uses
      At line 95 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
23 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 61 in file main.s
   Uses
      At line 92 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 60 in file main.s
   Uses
      At line 90 in file main.s
Comment: TExaS_Init used once
2 symbols
397 symbols in table
