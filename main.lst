


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: Faiyaz Mostofa & Zain Ahmed
    3 00000000         ; Date Created: 2/4/2017
    4 00000000         ; Last Modified: 2/28/2018
    5 00000000         ; Brief description of the program:
    6 00000000         ;   A collection of operations are done in this program 
                       (at once):
    7 00000000         ; - An internal Blue LED blinks repeatedly indicating th
                       at the program is running
    8 00000000         ; - A Red LED blinks on and off based on different patte
                       rns which can be changed by a switch (8Hz).
    9 00000000         ;   The LED will cycle through different patterns as spe
                       cified below:
   10 00000000         ;     :on for (1/40s) -> on for (1/20s) -> on for (3/40s
                       ) -> on for (1/10s) -> always on -> always off -> loop:
   11 00000000         ;   The delays for the blinking is handled by SysTick.s
   12 00000000         ; - The Red LED also has a breathing function can be act
                       ivated by holding the internal button @ PF4 on the micro
                       -controller.
   13 00000000         ;   The delays for the breathing is handled by the delay
                        function @ the end of this file.
   14 00000000         ;   - A debugging capture tool that runs 3rd time the lo
                       op finishes.
   15 00000000         ; Hardware connections (External: One button and one LED
                       )
   16 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
   17 00000000         ;  PE0 is a Red LED output (1 activates external LED on 
                       protoboard)
   18 00000000         ;  PF2 is a Green LED output (1 activates external LED o
                       n protoboard)
   19 00000000         ;  PF4 is builtin button SW1 on Launchpad (Internal)
   20 00000000         ;        Negative Logic (0 means pressed, 1 means not pr
                       essed)
   21 00000000         ;  Main Loop takes 925 cycles before debug_capture takes
                        22 cycles, for mere 2.3% intrusiveness
   22 00000000         
   23 00000000         ; PortE device registers
   24 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   25 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   26 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   27 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   28 00000000         ; PortF device registers
   29 00000000 400253FC 
                       GPIO_PORTF_DATA_R
                               EQU              0x400253FC
   30 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   31 00000000 40025420 
                       GPIO_PORTF_AFSEL_R



ARM Macro Assembler    Page 2 


                               EQU              0x40025420
   32 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   33 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   34 00000000 40025520 
                       GPIO_PORTF_LOCK_R
                               EQU              0x40025520
   35 00000000 40025524 
                       GPIO_PORTF_CR_R
                               EQU              0x40025524
   36 00000000 4C4F434B 
                       GPIO_LOCK_KEY
                               EQU              0x4C4F434B  ; Unlocks the GPIO_
                                                            CR register
   37 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   38 00000000         ; System Clock reigsters
   39 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   40 00000000         
   41 00000000         ;Variables that hold the maximum values 
   42 00000000 001864A8 
                       MAX_DELAY
                               EQU              0x1864A8    ; The interval size
                                                             of the delays (in 
                                                            cycles)
   43 00000000         ; 0x0c (in 10ms)
   44 00000000 00005E00 
                       BREATHE_DELAY_MAX
                               EQU              0x5E00      ; The delay require
                                                            d
   45 00000000         
   46 00000000                 IMPORT           TExaS_Init
   47 00000000                 IMPORT           SysTick_Init
   48 00000000         
   49 00000000                 THUMB
   50 00000000         ;------------Global Variables---------------------------
                       ----------------------------------------
   51 00000000                 AREA             DATA, ALIGN=2
   52 00000000         
   53 00000000         ;Blinking variables
   54 00000000 00 00 00 
              00       delay_inc
                               SPACE            4           ; how to increment 
                                                            the delays when we 
                                                            need to change them
                                                             (1/5 of MAX_DELAY)
                                                            
   55 00000004 00 00 00 
              00       delay_off
                               SPACE            4           ; how long the LED 
                                                            will stay off (in c
                                                            ycles)
   56 00000008 00 00 00 



ARM Macro Assembler    Page 3 


              00       delay_on
                               SPACE            4           ; how long the LED 
                                                            will stay on (in cy
                                                            cles)
   57 0000000C 00      prev_button_state
                               SPACE            1           ; captures whether 
                                                            a button has been r
                                                            eleased or pushed
   58 0000000D 00      green_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and toggles th
                                                            e blue LED after a 
                                                            certain time is met
                                                            .
   59 0000000E         
   60 0000000E         ;Debuggin variables
   61 0000000E 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    data_capture
                               SPACE            50          ; Array of 50 8-byt
                                                            e numbers
   62 00000040         ; 0x2000003e
   63 00000040         ; 0x20000090
   64 00000040 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    time_capture
                               SPACE            200         ; Array of 50 32-by
                                                            te numbers
   65 00000108         ; 0x20000070
   66 00000108         ; 0x20000138
   67 00000108 00      debug_capture_counter
                               SPACE            1           ; it counts everyti
                                                            me the main loop is
                                                             run and captures d
                                                            ebugging data after
                                                             a certain amount o
                                                            f loops
   68 00000109         
   69 00000109 00      NEntries



ARM Macro Assembler    Page 5 


                               SPACE            1           ; Number of entries
                                                             in either array
   70 0000010A         
   71 0000010A                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   72 00000000                 THUMB
   73 00000000                 EXPORT           Start
   74 00000000         
   75 00000000         ;---------Main Code-------------------------------------
                       ----------------------------------------
   76 00000000         Start
   77 00000000         ; TExaS_Init sets bus clock at 80 MHz
   78 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   79 00000004 F000 F8CD       BL               Debug_Init  ; Initializes the D
                                                            ebugging Tools
   80 00000008 F7FF FFFE       BL               SysTick_Init ; Initializes the 
                                                            SysTick (method in 
                                                            SysTick.s)
   81 0000000C F000 F927       BL               Ports_Init  ;  Initializes Port
                                                            s E,F
   82 00000010         ; PE0 = Red LED output
   83 00000010         ; PE1 = positive logic Input (Switch)
   84 00000010         ; PF2 = Blue LED output
   85 00000010         ; PF4 = Hold switch for breathing functionality
   86 00000010         
   87 00000010         ; Setting up variables
   88 00000010         Configure
   89 00000010 49AD            LDR              R1, =MAX_DELAY ;  
   90 00000012 F04F 0205       MOV              R2, #5      ;     
   91 00000016 FBB1 F2F2       UDIV             R2, R1, R2  ;  split the max de
                                                            lay into 5 equal se
                                                            ctions
   92 0000001A 49AC            LDR              R1, =delay_inc ;
   93 0000001C 600A            STR              R2, [R1]    ;   delay_inc = (MA
                                                            X_DELAY / 5)
   94 0000001E         
   95 0000001E 49AB            LDR              R1, =delay_inc ;
   96 00000020 680A            LDR              R2, [R1]    ;
   97 00000022 F04F 0304       MOV              R3, #4      ;
   98 00000026 FB02 F203       MUL              R2, R2, R3  ; 
   99 0000002A 49A9            LDR              R1, =delay_off ; 
  100 0000002C 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_off starts @ 4/
                                                            5 of the MAX_DELAY
  101 0000002E         
  102 0000002E 49A7            LDR              R1, =delay_inc ;
  103 00000030 680A            LDR              R2, [R1]    ;
  104 00000032 49A8            LDR              R1, =delay_on ;
  105 00000034 600A            STR              R2, [R1]    ;   Default: the de
                                                            lay_on on starts @ 
                                                            1/5 of the MAX_DELA
                                                            Y
  106 00000036         
  107 00000036 49A8            LDR              R1, =green_counter ;
  108 00000038 F04F 0200       MOV              R2, #0      ;
  109 0000003C 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he green_counter to
                                                             0



ARM Macro Assembler    Page 6 


  110 0000003E 49A7            LDR              R1, =debug_capture_counter ;
  111 00000040 F04F 0200       MOV              R2, #0      ;
  112 00000044 700A            STRB             R2, [R1]    ;   Initially set t
                                                            he debug_counter to
                                                             0
  113 00000046         
  114 00000046 B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  115 00000048         
  116 00000048         ; The main loop engine
  117 00000048         main_loop
  118 00000048         
  119 00000048         ;BL Check_Debug; ; Check if we need to record debugging 
                       statistics
  120 00000048 F000 F88B       BL               Check_Green ; Check whether to 
                                                            toggle the green LE
                                                            D on or not
  121 0000004C F000 F89B       BL               Check_Breathe ; Check if whethe
                                                            r we need to make t
                                                            he LED Breathe
  122 00000050         
  123 00000050         ;If a button @ PE1 is pushed, increment the blinking pat
                       tern
  124 00000050         Blink_ifPushed
  125 00000050 49A3            LDR              R1, =GPIO_PORTE_DATA_R ;
  126 00000052 4AA4            LDR              R2, =prev_button_state ;
  127 00000054 7812            LDRB             R2, [R2]    ;
  128 00000056 680B            LDR              R3, [R1]    ;    <- R3 holds th
                                                            e data from the Por
                                                            tE data register
  129 00000058 F003 0302       AND              R3, R3, #0x02 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  130 0000005C 4293            CMP              R3, R2      ;     <- Check if t
                                                            he button is in the
                                                             same state as befo
                                                            re 
  131 0000005E D01C            BEQ              Blink       ;
  132 00000060 F000 F8C4       BL               Debug_Capture ;
  133 00000064 4A9F            LDR              R2, =prev_button_state ;
  134 00000066 7013            STRB             R3, [R2]    ;
  135 00000068         ; If the button is pushed, set PE4 to 1
  136 00000068 2B00            CMP              R3, #0x00   ;   If the button i
                                                            s pushed
  137 0000006A D100            BNE              Blink_incrementDuty ;
  138 0000006C E015            B                Blink       ;
  139 0000006E         Blink_incrementDuty
  140 0000006E         ; Incrementing the duty time
  141 0000006E 4A97            LDR              R2, =delay_inc ;
  142 00000070 6812            LDR              R2, [R2]    ;    
  143 00000072 4997            LDR              R1, =delay_off ;   
  144 00000074 680B            LDR              R3, [R1]    ;    
  145 00000076 EBA3 0302       SUB              R3, R3, R2  ;    Decrement the 
                                                            off time
  146 0000007A 600B            STR              R3, [R1]    ;
  147 0000007C 4995            LDR              R1, =delay_on ;
  148 0000007E 680B            LDR              R3, [R1]    ;
  149 00000080 4413            ADD              R3, R3, R2  ;    Increment the 



ARM Macro Assembler    Page 7 


                                                            on time
  150 00000082 600B            STR              R3, [R1]    ;
  151 00000084         ;Check if the duty time needs to be reset (always on -> 
                       always off)
  152 00000084 4992            LDR              R1, =delay_off ;
  153 00000086 680A            LDR              R2, [R1]    ;
  154 00000088 2A00            CMP              R2, #0      ;
  155 0000008A D506            BPL              Blink       ;    If the the off
                                                             time is < 0 (off <
                                                             0%, on > 100%), re
                                                            set the values to o
                                                            ff = 100%, on = 0%
  156 0000008C 4A8E            LDR              R2, =MAX_DELAY ;
  157 0000008E 4990            LDR              R1, =delay_off ;
  158 00000090 600A            STR              R2, [R1]    ;
  159 00000092 4990            LDR              R1, =delay_on ;
  160 00000094 F04F 0200       MOV              R2, #0      ;     Reset the on 
                                                            time to 0 (light is
                                                             always off)
  161 00000098 600A            STR              R2, [R1]    ;
  162 0000009A         Blink
  163 0000009A         ; Turn off the light and wait
  164 0000009A 4991            LDR              R1, =GPIO_PORTE_DATA_R ;
  165 0000009C 680A            LDR              R2, [R1]    ;
  166 0000009E F022 0201       BIC              R2, #0x01   ;
  167 000000A2 600A            STR              R2, [R1]    ;
  168 000000A4 4A8A            LDR              R2, =delay_off ;
  169 000000A6 6810            LDR              R0, [R2]    ;
  170 000000A8 F000 F8CF       BL               delay       ; ;BL delay; Delay 
                                                            the program for a a
                                                            mount of time speci
                                                            fied in R0
  171 000000AC         ; Turn on the light and wait
  172 000000AC 498C            LDR              R1, =GPIO_PORTE_DATA_R ;
  173 000000AE 680A            LDR              R2, [R1]    ;
  174 000000B0 F042 0201       ORR              R2, #0x01   ;  
  175 000000B4 600A            STR              R2, [R1]    ;
  176 000000B6 4A87            LDR              R2, =delay_on ;
  177 000000B8 6810            LDR              R0, [R2]    ;
  178 000000BA F000 F8C6       BL               delay       ;BL delay
  179 000000BE         
  180 000000BE E7C3            B                main_loop
  181 000000C0         ;-------------------------------------------------------
                       ----------------------------------------
  182 000000C0         Breathe_Start
  183 000000C0         ; a subroutine that handles all the breathing functional
                       ity by completly reworking everything
  184 000000C0 B4FF            PUSH             {R0-R7}     ;
  185 000000C2 E92D 4100       PUSH             {R8, LR}    ;
  186 000000C6         
  187 000000C6         ; Setting up variables
  188 000000C6 4886            LDR              R0, =GPIO_PORTE_DATA_R ;
  189 000000C8 F8DF 921C       LDR              R9, =GPIO_PORTF_DATA_R ;
  190 000000CC F44F 42BC       LDR              R2, =BREATHE_DELAY_MAX ;
  191 000000D0 F44F 73FA       MOV              R3, #500    ;
  192 000000D4 FBB2 F4F3       UDIV             R4, R2, R3  ;   The increments 
                                                            of the delay
  193 000000D8 F102 0500       ADD              R5, R2, #0  ;    Default: off f
                                                            or 4/5 of 80Hz



ARM Macro Assembler    Page 8 


  194 000000DC F04F 0600       MOV              R6, #0      ;     Default: on f
                                                            or 1/5 of 80Hz
  195 000000E0 F102 0700       ADD              R7, R2, #0  ;
  196 000000E4         
  197 000000E4         Breathe_loop
  198 000000E4 F8D9 1000       LDR              R1, [R9]    ;    <- R1 holds th
                                                            e data from the dat
                                                            a register
  199 000000E8         Breathe_ifPushed
  200 000000E8 F001 0310       AND              R3, R1, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  201 000000EC 2B10            CMP              R3, #0x10   ;    Keep Breathing
                                                             until the button i
                                                            s released.
  202 000000EE D100            BNE              Breathe_incrementDuty ;
  203 000000F0 E021            B                Breathe_Stop ;
  204 000000F2         
  205 000000F2         Breathe_incrementDuty
  206 000000F2         ; Incrementing the duty time
  207 000000F2 EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  208 000000F6 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  209 000000F8 2D00            CMP              R5, #0      ;
  210 000000FA D402            BMI              Breathe_Verse ;
  211 000000FC D001            BEQ              Breathe_Verse ;   Check if we'v
                                                            e stopped or froze 
                                                            the delay of the li
                                                            ght (either R5 or R
                                                            6 reach zero)
  212 000000FE 2E00            CMP              R6, #0      ;
  213 00000100 D506            BPL              Breathe     ;
  214 00000102         Breathe_Verse
  215 00000102 F04F 33FF       MOV              R3, #-1     ;
  216 00000106 FB04 F403       MUL              R4, R4, R3  ;    Once we reach 
                                                            a maximum, down/up 
                                                            or up depending on 
                                                            the scenario
  217 0000010A EBA5 0504       SUB              R5, R5, R4  ;    Decrement the 
                                                            off time
  218 0000010E 4426            ADD              R6, R6, R4  ;    Increment the 
                                                            on time
  219 00000110         Breathe
  220 00000110         ; Turn off the light and wait
  221 00000110 F021 0101       BIC              R1, #0x01   ;  
  222 00000114 6001            STR              R1, [R0]    ;
  223 00000116 B403            PUSH             {R0, R1}    ;
  224 00000118 F105 0000       ADD              R0, R5, #0  ;
  225 0000011C F000 F895       BL               delay       ;     Delay the pro
                                                            gram for a amount o
                                                            f time specified in
                                                             R7
  226 00000120 BC03            POP              {R0, R1}    ;
  227 00000122         ; Turn on the light and wait
  228 00000122 F041 0101       ORR              R1, #0x01   ;  
  229 00000126 6001            STR              R1, [R0]    ;
  230 00000128 B403            PUSH             {R0, R1}    ;
  231 0000012A F106 0000       ADD              R0, R6, #0  ;



ARM Macro Assembler    Page 9 


  232 0000012E F000 F88C       BL               delay       ;
  233 00000132 BC03            POP              {R0, R1}    ;
  234 00000134         
  235 00000134 E7D6            B                Breathe_loop
  236 00000136         
  237 00000136         Breathe_Stop
  238 00000136 E8BD 4100       POP              {R8,LR}     ;
  239 0000013A BCFF            POP              {R0-R7}     ;
  240 0000013C         
  241 0000013C 4770            BX               LR          ;
  242 0000013E         
  243 0000013E         ;-------CHECK_debug-------------------------------------
                       ----------------------------------------
  244 0000013E         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  245 0000013E         Check_Debug
  246 0000013E B403            PUSH             {R0, R1}    ;
  247 00000140 B504            PUSH             {R2, LR}    ;
  248 00000142 4966            LDR              R1, =debug_capture_counter ;
  249 00000144 780A            LDRB             R2, [R1]    ; 
  250 00000146 F102 0201       ADD              R2, R2, #1  ;   debug_capture_c
                                                            ounter++;
  251 0000014A 700A            STRB             R2, [R1]    ;
  252 0000014C 2A06            CMP              R2, #6      ;
  253 0000014E D104            BNE              Check_Debug_Leave ;
  254 00000150 F000 F84C       BL               Debug_Capture ;  if(debug_captu
                                                            re_counter == 3) ca
                                                            pture data
  255 00000154 F04F 0200       MOV              R2, #0      ;
  256 00000158 700A            STRB             R2, [R1]    ;
  257 0000015A         Check_Debug_Leave
  258 0000015A E8BD 4004       POP              {R2, LR}    ;
  259 0000015E BC03            POP              {R0, R1}    ;
  260 00000160 4770            BX               LR          ;  
  261 00000162         
  262 00000162         ;-------CHECK_Green-------------------------------------
                       ----------------------------------------
  263 00000162         ; Wait 5 duty cycles, then save the points in the Dubugg
                       ing arrays
  264 00000162         Check_Green
  265 00000162 B403            PUSH             {R0, R1}    ;
  266 00000164 B504            PUSH             {R2, LR}    ;
  267 00000166 495C            LDR              R1, =green_counter ;
  268 00000168 780A            LDRB             R2, [R1]    ;
  269 0000016A F102 0201       ADD              R2, R2, #1  ;   green_counter++
                                                            
  270 0000016E 700A            STRB             R2, [R1]    ;
  271 00000170 2A03            CMP              R2, #3      ;
  272 00000172 D104            BNE              Check_Green_Leave ; 
  273 00000174 F000 F861       BL               Toggle_Green ;  if(green_counte
                                                            r == 3) toggle Gree
                                                            n LED
  274 00000178 F04F 0200       MOV              R2, #0      ;
  275 0000017C 700A            STRB             R2, [R1]    ;
  276 0000017E         Check_Green_Leave
  277 0000017E E8BD 4004       POP              {R2, LR}    ;
  278 00000182 BC03            POP              {R0, R1}    ;
  279 00000184 4770            BX               LR          ;  
  280 00000186         



ARM Macro Assembler    Page 10 


  281 00000186         ;-------CHECK_Breathe-----------------------------------
                       ------------------------------------------
  282 00000186         ; If the button @ PF4 is pushed, Start breathing
  283 00000186         Check_Breathe
  284 00000186 B403            PUSH             {R0, R1}    ;
  285 00000188 B504            PUSH             {R2, LR}    ;
  286 0000018A 4957            LDR              R1, =GPIO_PORTF_DATA_R ;
  287 0000018C 680A            LDR              R2, [R1]    ;
  288 0000018E F002 0210       AND              R2, R2, #0x10 ;   Check whether
                                                             the button has bee
                                                            n pushed or not
  289 00000192 2A00            CMP              R2, #0x00   ;
  290 00000194 D101            BNE              Check_Breathe_Leave ; If SW1 is
                                                             pushed, start the 
                                                            breathing
  291 00000196 F7FF FF93       BL               Breathe_Start ;
  292 0000019A         Check_Breathe_Leave
  293 0000019A E8BD 4004       POP              {R2, LR}    ;
  294 0000019E BC03            POP              {R0, R1}    ;
  295 000001A0 4770            BX               LR          ;
  296 000001A2         
  297 000001A2         ;-------DEBUG_Init--------------------------------------
                       ----------------------------------------
  298 000001A2         ;Initiliazing Debug Dump
  299 000001A2         Debug_Init
  300 000001A2 B403            PUSH             {R0, R1}
  301 000001A4 B40C            PUSH             {R2, R3}
  302 000001A6         
  303 000001A6 4A51            LDR              R2, =data_capture ;
  304 000001A8 4B51            LDR              R3, =time_capture 
                                                            ;  Created pointers
                                                            
  305 000001AA F8DF A140       LDR              R10, =data_capture ;
  306 000001AE F8DF B140       LDR              R11, =time_capture ;
  307 000001B2         ; Fill the data array with 0xFF (signifying empty) 
  308 000001B2 F04F 0032       MOV              R0, #50     ;
  309 000001B6         setting_data_capture
  310 000001B6 F1A0 0001       SUB              R0,R0, #0x01
  311 000001BA F04F 01FF       MOV              R1, #0xFF   ;  
  312 000001BE 7011            STRB             R1, [R2]
  313 000001C0 F102 0201       ADD              R2, R2, #1  ;
  314 000001C4 2800            CMP              R0, #0x0    ;
  315 000001C6 D1F6            BNE              setting_data_capture
  316 000001C8         ; Fill the time array with 0xFFFFFFFF (signifying empty)
                        
  317 000001C8 F04F 0032       MOV              R0, #50     ;
  318 000001CC         setting_time_capture
  319 000001CC F1A0 0001       SUB              R0,R0, #1   ;
  320 000001D0 F04F 31FF       MOV              R1, #0xFFFFFFFF ;
  321 000001D4 6019            STR              R1, [R3]
  322 000001D6 F103 0304       ADD              R3, R3, #4  ;
  323 000001DA 2800            CMP              R0, #0x0    ;
  324 000001DC D1F6            BNE              setting_time_capture
  325 000001DE         RestNEntries
  326 000001DE 4845            LDR              R0, =NEntries ;
  327 000001E0 F04F 0200       MOV              R2, #0      ;
  328 000001E4 7002            STRB             R2, [R0]    ;
  329 000001E6         
  330 000001E6 BC0C            POP              {R2, R3}



ARM Macro Assembler    Page 11 


  331 000001E8 BC03            POP              {R0, R1}
  332 000001EA 4770            BX               LR
  333 000001EC         
  334 000001EC         ;-------DEBUG_CAPTURE-----------------------------------
                       ----------------------------------------
  335 000001EC         ; saves one data point
  336 000001EC         Debug_Capture
  337 000001EC B403            PUSH             {R0,R1}
  338 000001EE B504            PUSH             {R2,LR}
  339 000001F0 4840            LDR              R0 , =NEntries
  340 000001F2 6801            LDR              R1, [R0]
  341 000001F4 2932            CMP              R1 , #50
  342 000001F6 D21C            BHS              DONE_C      ;   if (the array i
                                                            s not full)
  343 000001F8 F101 0101       ADD              R1, R1, #1  ;   Add a new entry
                                                            
  344 000001FC 7001            STRB             R1, [R0]    ;   NEntries++;
  345 000001FE         ; Record the current data entries
  346 000001FE 4838            LDR              R0, =GPIO_PORTE_DATA_R ; 
  347 00000200 6800            LDR              R0, [R0]    ;
  348 00000202 F100 0100       ADD              R1, R0, #0  ;
  349 00000206 F000 0001       AND              R0, R0, #0x01 ;  R0 holds the d
                                                            ata for PE0
  350 0000020A F001 0102       AND              R1, R1, #0x02 ;  R1 holds the d
                                                            ata for PE1
  351 0000020E EA4F 01C1       LSL              R1, R1, #3  ;   Move PE1 to PE4
                                                             
  352 00000212 EA41 0100       ORR              R1, R1, R0  ;   Merge the two b
                                                            its (PE0 | PE4)
  353 00000216 4835            LDR              R0, =data_capture ;
  354 00000218 4A36            LDR              R2, =NEntries ;
  355 0000021A 7812            LDRB             R2, [R2]    ;
  356 0000021C 4410            ADD              R0, R0, R2  ;
  357 0000021E 7001            STRB             R1, [R0]    ;   Store the value
                                                             in the correct spo
                                                            t on the data array
                                                            
  358 00000220         ; Record the current time
  359 00000220 F04F 0004       MOV              R0, #4      ;
  360 00000224 FB02 F200       MUL              R2, R2, R0  ;   Increment in th
                                                            e time array by 4 b
                                                            ytes
  361 00000228 4931            LDR              R1, =time_capture ;
  362 0000022A 4411            ADD              R1, R1, R2  ;
  363 0000022C 4832            LDR              R0, =NVIC_ST_CURRENT_R
  364 0000022E 6800            LDR              R0, [R0]    ;
  365 00000230 6008            STR              R0, [R1]    ;   Store the curre
                                                            nt time in the corr
                                                            ect spot on the tim
                                                            e array
  366 00000232         ; Restore the registers and leave
  367 00000232         DONE_C
  368 00000232 E8BD 4004       POP              {R2, LR}    ;   
  369 00000236 BC03            POP              {R0,R1}
  370 00000238 4770            BX               LR          ;
  371 0000023A         
  372 0000023A         ;-------Toggle Green LED (PF2)--------------------------
                       ----------------------------------------
  373 0000023A         ;Toggles the Green LED on and off (PF2)



ARM Macro Assembler    Page 12 


  374 0000023A         Toggle_Green
  375 0000023A B403            PUSH             {R0, R1}    ;
  376 0000023C 482A            LDR              R0, =GPIO_PORTF_DATA_R ;
  377 0000023E 6801            LDR              R1, [R0]    ;
  378 00000240 F081 0104       EOR              R1, #0x04   ;
  379 00000244 6001            STR              R1, [R0]    ;
  380 00000246 BC03            POP              {R0, R1}    ;
  381 00000248 4770            BX               LR          ;
  382 0000024A         
  383 0000024A         ;-------------------------------------------------------
                       ----------------------------------------
  384 0000024A         delay
  385 0000024A         ; a subroutine that loops using the value at R0
  386 0000024A B403            PUSH             {R0, R1}    ;
  387 0000024C F04F 0100       MOV              R1, #0      ;
  388 00000250         delayLoop
  389 00000250 4288            CMP              R0, R1      ;   Loop until temp
                                                            orary value, R1, re
                                                            aches R0
  390 00000252 D002            BEQ              delayDone   ;
  391 00000254 F101 0101       ADD              R1, R1, #1  ; 
  392 00000258 E7FA            B                delayLoop   ;
  393 0000025A         delayDone
  394 0000025A BC03            POP              {R0, R1}    ;
  395 0000025C 4770            BX               LR          ;
  396 0000025E         
  397 0000025E         ;-------------------------------------------------------
                       ----------------------------------------
  398 0000025E         ; Port Initialization
  399 0000025E         Ports_Init
  400 0000025E B403            PUSH             {R0, R1}    ;
  401 00000260 B504            PUSH             {R2, LR}    ;
  402 00000262 4826            LDR              R0, =SYSCTL_RCGCGPIO_R ;
  403 00000264 6801            LDR              R1, [R0]    ;
  404 00000266 F041 0130       ORR              R1, R1, #0x30 ;   Start up Port
                                                             F and Port E
  405 0000026A 6001            STR              R1, [R0]    ;
  406 0000026C BF00            NOP                          ;
  407 0000026E BF00            NOP                          ;
  408 00000270         ; Configure Port E
  409 00000270 4823            LDR              R0, =GPIO_PORTE_DIR_R ;
  410 00000272 6801            LDR              R1, [R0]    ;
  411 00000274 F041 0101       ORR              R1, R1, #0x01 ;    PE0 is set t
                                                            o output (LED)
  412 00000278 F021 0112       BIC              R1, R1, #0x12 ;    PE1,4 are se
                                                            t to input (buttons
                                                            )
  413 0000027C 6001            STR              R1, [R0]    ;
  414 0000027E 4821            LDR              R0, =GPIO_PORTE_AFSEL_R ;
  415 00000280 6801            LDR              R1, [R0]    ;
  416 00000282 F04F 0100       MOV              R1, #0      ;      Disables the
                                                             "alternate functio
                                                            ns" in the port
  417 00000286 6001            STR              R1, [R0]    ;
  418 00000288 481F            LDR              R0, =GPIO_PORTE_DEN_R ;
  419 0000028A 6801            LDR              R1, [R0]    ;
  420 0000028C F04F 01FF       MOV              R1, #0xFF   ;     1 means enabl
                                                            e digital I/O
  421 00000290 6001            STR              R1, [R0]    ;



ARM Macro Assembler    Page 13 


  422 00000292         ; Configure Port F
  423 00000292 491E            LDR              R1, =GPIO_PORTF_LOCK_R ;  2) un
                                                            lock the lock regis
                                                            ter
  424 00000294 481E            LDR              R0, =GPIO_LOCK_KEY ;   unlock G
                                                            PIO Port F Commit R
                                                            egister
  425 00000296 6008            STR              R0, [R1]    ;
  426 00000298 491E            LDR              R1, =GPIO_PORTF_CR_R ;    enabl
                                                            e commit for Port F
                                                            
  427 0000029A F04F 00FF       MOV              R0, #0xFF   ;               1 m
                                                            eans allow access
  428 0000029E 6008            STR              R0, [R1]    ;
  429 000002A0 491D            LDR              R1, =GPIO_PORTF_DIR_R ;   5) se
                                                            t direction registe
                                                            r
  430 000002A2 F04F 000E       MOV              R0,#0x0E    ;
  431 000002A6 6008            STR              R0, [R1]    ;
  432 000002A8 491C            LDR              R1, =GPIO_PORTF_AFSEL_R ; 6) re
                                                            gular port function
                                                            
  433 000002AA F04F 0000       MOV              R0, #0      ;                  
                                                              0 means disable a
                                                            lternate function
  434 000002AE 6008            STR              R0, [R1]    ;
  435 000002B0 491B            LDR              R1, =GPIO_PORTF_PUR_R ;     pul
                                                            l-up resistors for 
                                                            PF4,PF0
  436 000002B2 F04F 0011       MOV              R0, #0x11   ;                 1
                                                            )enable for negativ
                                                            e logic
  437 000002B6 6008            STR              R0, [R1]    ;
  438 000002B8 491A            LDR              R1, =GPIO_PORTF_DEN_R ;     7) 
                                                            enable Port F digit
                                                            al port
  439 000002BA F04F 00FF       MOV              R0, #0xFF   ;                 1
                                                             means enable digit
                                                            al I/O
  440 000002BE 6008            STR              R0, [R1]    ;
  441 000002C0 E8BD 4004       POP              {R2, LR}    ;
  442 000002C4 BC03            POP              {R0, R1}    ;
  443 000002C6 4770            BX               LR          ;
  444 000002C8         
  445 000002C8         ;-------------------------------------------------------
                       ----------------------------------------
  446 000002C8                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  447 000002C8                 END                          ; end of file
              001864A8 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              400243FC 
              00000000 
              400253FC 



ARM Macro Assembler    Page 14 


              00000000 
              00000000 
              00000000 
              E000E018 
              400FE608 
              40024400 
              40024420 
              4002451C 
              40025520 
              4C4F434B 
              40025524 
              40025400 
              40025420 
              40025510 
              4002551C 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\In
c\Luminary --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: DATA unused
NEntries 00000109

Symbol: NEntries
   Definitions
      At line 69 in file main.s
   Uses
      At line 326 in file main.s
      At line 339 in file main.s
      At line 354 in file main.s

data_capture 0000000E

Symbol: data_capture
   Definitions
      At line 61 in file main.s
   Uses
      At line 303 in file main.s
      At line 305 in file main.s
      At line 353 in file main.s

debug_capture_counter 00000108

Symbol: debug_capture_counter
   Definitions
      At line 67 in file main.s
   Uses
      At line 110 in file main.s
      At line 248 in file main.s

delay_inc 00000000

Symbol: delay_inc
   Definitions
      At line 54 in file main.s
   Uses
      At line 92 in file main.s
      At line 95 in file main.s
      At line 102 in file main.s
      At line 141 in file main.s

delay_off 00000004

Symbol: delay_off
   Definitions
      At line 55 in file main.s
   Uses
      At line 99 in file main.s
      At line 143 in file main.s
      At line 152 in file main.s
      At line 157 in file main.s
      At line 168 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


delay_on 00000008

Symbol: delay_on
   Definitions
      At line 56 in file main.s
   Uses
      At line 104 in file main.s
      At line 147 in file main.s
      At line 159 in file main.s
      At line 176 in file main.s

green_counter 0000000D

Symbol: green_counter
   Definitions
      At line 58 in file main.s
   Uses
      At line 107 in file main.s
      At line 267 in file main.s

prev_button_state 0000000C

Symbol: prev_button_state
   Definitions
      At line 57 in file main.s
   Uses
      At line 126 in file main.s
      At line 133 in file main.s

time_capture 00000040

Symbol: time_capture
   Definitions
      At line 64 in file main.s
   Uses
      At line 304 in file main.s
      At line 306 in file main.s
      At line 361 in file main.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 71 in file main.s
   Uses
      None
Comment: .text unused
Blink 0000009A

Symbol: Blink
   Definitions
      At line 162 in file main.s
   Uses
      At line 131 in file main.s
      At line 138 in file main.s
      At line 155 in file main.s

Blink_ifPushed 00000050

Symbol: Blink_ifPushed
   Definitions
      At line 124 in file main.s
   Uses
      None
Comment: Blink_ifPushed unused
Blink_incrementDuty 0000006E

Symbol: Blink_incrementDuty
   Definitions
      At line 139 in file main.s
   Uses
      At line 137 in file main.s
Comment: Blink_incrementDuty used once
Breathe 00000110

Symbol: Breathe
   Definitions
      At line 219 in file main.s
   Uses
      At line 213 in file main.s
Comment: Breathe used once
Breathe_Start 000000C0

Symbol: Breathe_Start
   Definitions
      At line 182 in file main.s
   Uses
      At line 291 in file main.s
Comment: Breathe_Start used once
Breathe_Stop 00000136

Symbol: Breathe_Stop
   Definitions
      At line 237 in file main.s
   Uses
      At line 203 in file main.s
Comment: Breathe_Stop used once
Breathe_Verse 00000102



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: Breathe_Verse
   Definitions
      At line 214 in file main.s
   Uses
      At line 210 in file main.s
      At line 211 in file main.s

Breathe_ifPushed 000000E8

Symbol: Breathe_ifPushed
   Definitions
      At line 199 in file main.s
   Uses
      None
Comment: Breathe_ifPushed unused
Breathe_incrementDuty 000000F2

Symbol: Breathe_incrementDuty
   Definitions
      At line 205 in file main.s
   Uses
      At line 202 in file main.s
Comment: Breathe_incrementDuty used once
Breathe_loop 000000E4

Symbol: Breathe_loop
   Definitions
      At line 197 in file main.s
   Uses
      At line 235 in file main.s
Comment: Breathe_loop used once
Check_Breathe 00000186

Symbol: Check_Breathe
   Definitions
      At line 283 in file main.s
   Uses
      At line 121 in file main.s
Comment: Check_Breathe used once
Check_Breathe_Leave 0000019A

Symbol: Check_Breathe_Leave
   Definitions
      At line 292 in file main.s
   Uses
      At line 290 in file main.s
Comment: Check_Breathe_Leave used once
Check_Debug 0000013E

Symbol: Check_Debug
   Definitions
      At line 245 in file main.s
   Uses
      None
Comment: Check_Debug unused
Check_Debug_Leave 0000015A

Symbol: Check_Debug_Leave



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 257 in file main.s
   Uses
      At line 253 in file main.s
Comment: Check_Debug_Leave used once
Check_Green 00000162

Symbol: Check_Green
   Definitions
      At line 264 in file main.s
   Uses
      At line 120 in file main.s
Comment: Check_Green used once
Check_Green_Leave 0000017E

Symbol: Check_Green_Leave
   Definitions
      At line 276 in file main.s
   Uses
      At line 272 in file main.s
Comment: Check_Green_Leave used once
Configure 00000010

Symbol: Configure
   Definitions
      At line 88 in file main.s
   Uses
      None
Comment: Configure unused
DONE_C 00000232

Symbol: DONE_C
   Definitions
      At line 367 in file main.s
   Uses
      At line 342 in file main.s
Comment: DONE_C used once
Debug_Capture 000001EC

Symbol: Debug_Capture
   Definitions
      At line 336 in file main.s
   Uses
      At line 132 in file main.s
      At line 254 in file main.s

Debug_Init 000001A2

Symbol: Debug_Init
   Definitions
      At line 299 in file main.s
   Uses
      At line 79 in file main.s
Comment: Debug_Init used once
Ports_Init 0000025E

Symbol: Ports_Init
   Definitions
      At line 399 in file main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 81 in file main.s
Comment: Ports_Init used once
RestNEntries 000001DE

Symbol: RestNEntries
   Definitions
      At line 325 in file main.s
   Uses
      None
Comment: RestNEntries unused
Start 00000000

Symbol: Start
   Definitions
      At line 76 in file main.s
   Uses
      At line 73 in file main.s
Comment: Start used once
Toggle_Green 0000023A

Symbol: Toggle_Green
   Definitions
      At line 374 in file main.s
   Uses
      At line 273 in file main.s
Comment: Toggle_Green used once
delay 0000024A

Symbol: delay
   Definitions
      At line 384 in file main.s
   Uses
      At line 170 in file main.s
      At line 178 in file main.s
      At line 225 in file main.s
      At line 232 in file main.s

delayDone 0000025A

Symbol: delayDone
   Definitions
      At line 393 in file main.s
   Uses
      At line 390 in file main.s
Comment: delayDone used once
delayLoop 00000250

Symbol: delayLoop
   Definitions
      At line 388 in file main.s
   Uses
      At line 392 in file main.s
Comment: delayLoop used once
main_loop 00000048

Symbol: main_loop
   Definitions
      At line 117 in file main.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 180 in file main.s
Comment: main_loop used once
setting_data_capture 000001B6

Symbol: setting_data_capture
   Definitions
      At line 309 in file main.s
   Uses
      At line 315 in file main.s
Comment: setting_data_capture used once
setting_time_capture 000001CC

Symbol: setting_time_capture
   Definitions
      At line 318 in file main.s
   Uses
      At line 324 in file main.s
Comment: setting_time_capture used once
31 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BREATHE_DELAY_MAX 00005E00

Symbol: BREATHE_DELAY_MAX
   Definitions
      At line 44 in file main.s
   Uses
      At line 190 in file main.s
Comment: BREATHE_DELAY_MAX used once
GPIO_LOCK_KEY 4C4F434B

Symbol: GPIO_LOCK_KEY
   Definitions
      At line 36 in file main.s
   Uses
      At line 424 in file main.s
Comment: GPIO_LOCK_KEY used once
GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 26 in file main.s
   Uses
      At line 414 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 24 in file main.s
   Uses
      At line 125 in file main.s
      At line 164 in file main.s
      At line 172 in file main.s
      At line 188 in file main.s
      At line 346 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 27 in file main.s
   Uses
      At line 418 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 25 in file main.s
   Uses
      At line 409 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 432 in file main.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: GPIO_PORTF_AFSEL_R used once
GPIO_PORTF_CR_R 40025524

Symbol: GPIO_PORTF_CR_R
   Definitions
      At line 35 in file main.s
   Uses
      At line 426 in file main.s
Comment: GPIO_PORTF_CR_R used once
GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 29 in file main.s
   Uses
      At line 189 in file main.s
      At line 286 in file main.s
      At line 376 in file main.s

GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 438 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 30 in file main.s
   Uses
      At line 429 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_LOCK_R 40025520

Symbol: GPIO_PORTF_LOCK_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 423 in file main.s
Comment: GPIO_PORTF_LOCK_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 435 in file main.s
Comment: GPIO_PORTF_PUR_R used once
MAX_DELAY 001864A8

Symbol: MAX_DELAY
   Definitions
      At line 42 in file main.s
   Uses
      At line 89 in file main.s
      At line 156 in file main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 39 in file main.s
   Uses
      At line 363 in file main.s
Comment: NVIC_ST_CURRENT_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 402 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
16 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 47 in file main.s
   Uses
      At line 80 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 46 in file main.s
   Uses
      At line 78 in file main.s
Comment: TExaS_Init used once
2 symbols
392 symbols in table
